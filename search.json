[{"path":"https://baselinenowcast.epinowcast.org/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2025 baselinenowcast authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://baselinenowcast.epinowcast.org/articles/baselinenowcast.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Getting Started with baselinenowcast","text":"Incomplete reporting epidemiological data recent times can result case count data right-truncated. Right-truncated case counts can misleading interpret face-value, typically show decline number reported observations recent time points. time points highest proportion data yet observed dataset. imputation cases eventually observed current time referred nowcast. number methods developed nowcast epidemiological case count data. purpose baselinenowcast provide nowcast computed directly recent observations estimate delay distribution empirically, apply partially observed data generate nowcast. section, describe example nowcasting problem, demonstrate use baselinenowcast estimate delay distribution data apply estimate generate probabilistic nowcast. example walk low-level functionality “default” model permutation. future vignettes, demonstrate examples create complex model permutations. details mathematical methods provided mathematical model vignette.","code":""},{"path":"https://baselinenowcast.epinowcast.org/articles/baselinenowcast.html","id":"packages","dir":"Articles","previous_headings":"","what":"Packages","title":"Getting Started with baselinenowcast","text":"well baselinenowcast package vignette also uses epinowcast, ggplot2, tidyr, dplyr. installation epinowcast required using package. However, pre post-processing functions provide lot data wrangling needed set nowcasting problem. note just using components epinowcast, can installed using following:","code":"# nolint start # Installing epinowcast # install.packages( #  \"epinowcast\", repos = \"https://epinowcast.r-universe.dev\" # ) #nolint # nolint end # Load packages library(baselinenowcast) library(epinowcast) library(ggplot2) library(dplyr) library(tidyr) # Set seed for reproducibility set.seed(123)"},{"path":"https://baselinenowcast.epinowcast.org/articles/baselinenowcast.html","id":"data","dir":"Articles","previous_headings":"","what":"Data","title":"Getting Started with baselinenowcast","text":"Nowcasting right-truncated case counts involves estimation reporting delays recently reported data. , need case counts indexed diagnosed (often called “reference date”) reported (.e. administratively recorded via public health surveillance; often called “report date”). difference reference date report date reporting delay. quick start, use daily level data Robert Koch Institute via Germany Nowcasting hub. data represent hospital admission counts date positive test date test report Germany October 1, 2021. filter data just look national-level data, age groups. pretend making nowcast August 1, 2021, therefore exclude reference dates report dates date. germany_covid19_hosp provided package data epinowcast. Let’s start plotting sum reports reference date, compare eventually observe latest date complete dataset (data available October 1, 2021). epinowcast function enw_latest_data() used filter observations latest available reported total counts reference date. epinowcast function enw_filter_report_dates() used create truncated dataset generating retrospective nowcast, using data available nowcast date. Using observed data nowcast date (observed_data) enw_latest_data() function, make plot latest total number confirmed cases reference date.  red line shows total number confirmed admissions reference date, across delays, using data available August 1, 2021. demonstrates characteristic behaviour right-truncation. yet observed data longer delays recent time points. black line shows total number confirmed admissions reference date October 1, 2021. task estimate, data available August 1, 2021, “final” total number cases reference date.","code":"nowcast_date <- \"2021-08-01\" eval_date <- \"2021-10-01\"  target_data <- germany_covid19_hosp[location == \"DE\"][age_group == \"00+\"] |>   enw_filter_report_dates(latest_date = eval_date) |>   enw_filter_reference_dates(     latest_date = nowcast_date   ) latest_data <- enw_latest_data(target_data) observed_data <- enw_filter_report_dates(   target_data,   latest_date = nowcast_date )  head(observed_data) ##    reference_date location age_group confirm report_date ##            <IDat>   <fctr>    <fctr>   <int>      <IDat> ## 1:     2021-04-06       DE       00+     149  2021-04-06 ## 2:     2021-04-07       DE       00+     312  2021-04-07 ## 3:     2021-04-08       DE       00+     424  2021-04-08 ## 4:     2021-04-09       DE       00+     288  2021-04-09 ## 5:     2021-04-10       DE       00+     273  2021-04-10 ## 6:     2021-04-11       DE       00+     107  2021-04-11 obs_data_by_reference_date <- enw_latest_data(observed_data) plot_data <- ggplot() +   geom_line(     data = obs_data_by_reference_date,     aes(x = reference_date, y = confirm), color = \"darkred\"   ) +   geom_line(     data = latest_data,     aes(x = reference_date, y = confirm), color = \"black\"   ) +   theme_bw() +   xlab(\"Reference date\") +   ylab(\"Confirmed admissions\") +   scale_y_continuous(trans = \"log10\") +   ggtitle(\"Comparing real-time and later observed cases\") plot_data"},{"path":"https://baselinenowcast.epinowcast.org/articles/baselinenowcast.html","id":"pre-processing","dir":"Articles","previous_headings":"","what":"Pre-processing","title":"Getting Started with baselinenowcast","text":"order compute nowcast data, need start creating call reporting triangle. See nomenclature vignette details structure naming different components used package. entries reporting triangle represent number new cases assigned reference time point particular delay, entries bottom right triangle missing data reported longer delays yet observed recent reference times. reporting triangle used estimate delay distribution, proportion final number cases reported particular delay. example, fit delay distribution, apply generate nowcast matrix using data, national level data Germany age groups. recommend choosing maximum delay number historical observations based exploratory data analysis, specifications change significantly depending dataset. Empirical data outside delay window used training. use 3 times maximum delay total training volume. ’ll use recent 50% reference times delay estimation. uncertainty estimation, generate retrospective nowcast datasets recent 50% reference times. means order estimate delay using amount data, oldest retrospective nowcast dataset use first 50% reference times. Note uses recent observations. Next use epinowcast function, enw_filter_reference_dates() filter include n_training_volume days historical data. epinowcast function enw_latest_data() used filter latest available reported total counts reference date. obtain data want evaluate forecasts , use enw_filter_reference_dates() applied target_data, filter n_training_volume days historical data. Next obtain reporting triangle, adding additional day max_delay want max_delay + 1 entries since 0 valid delay. also validates data correct format runs preprocessing see enw_preprocess_data() details. Extract components pobs, epinowcast object. one group need reference_date, delay, new_confirm. now pivot wide format, dropping reference_date column, convert matrix format low-level functions baselinenowcast expect. , grey indicates matrix elements NA, expect case bottom right portion reporting triangle counts yet observed.","code":"max_delay <- 30 n_training_volume <- 3 * max_delay n_history_delay <- as.integer(0.5 * n_training_volume) n_retrospective_nowcasts <- as.integer(0.5 * n_training_volume) training_data <- enw_filter_reference_dates(   observed_data,   include_days = n_training_volume - 1 ) latest_training_data <- enw_latest_data(training_data) eval_data <- enw_filter_reference_dates(   latest_data,   include_days = n_training_volume - 1 ) pobs <- enw_preprocess_data(   obs = training_data,   max_delay = max_delay + 1 ) reporting_triangle_df <- select(   pobs$new_confirm[[1]],   reference_date,   delay,   new_confirm ) reporting_triangle <- reporting_triangle_df |>   pivot_wider(names_from = delay, values_from = new_confirm) |>   select(-reference_date) |>   as.matrix() triangle_df <- as.data.frame(reporting_triangle) |>   mutate(time = row_number()) |>   pivot_longer(!time,     values_to = \"count\",     names_prefix = \"V\",     names_to = \"delay\"   ) |>   mutate(delay = as.numeric(delay))  plot_triangle <- ggplot(   triangle_df,   aes(x = delay, y = time, fill = count) ) +   geom_tile() +   scale_fill_gradient(low = \"white\", high = \"blue\") +   labs(title = \"Reporting triangle\", x = \"Delay\", y = \"Time\") +   theme_bw() +   scale_y_reverse() plot_triangle"},{"path":"https://baselinenowcast.epinowcast.org/articles/baselinenowcast.html","id":"estimate-delay","dir":"Articles","previous_headings":"","what":"Estimate delay","title":"Getting Started with baselinenowcast","text":"Now reporting triangle, now ready pass baselinenowcast package estimate delay distribution. tell function maximum delay number observations want use estimation. want pass reporting triangle (single group!) function. See documentation estimate_delay() full description function inputs.","code":"delay_pmf <- estimate_delay(   reporting_triangle = reporting_triangle,   max_delay = max_delay,   n = n_history_delay ) delay_df <- data.frame(   delay = 0:(length(delay_pmf) - 1),   pmf = delay_pmf )  delay_cdf_plot <- ggplot(delay_df) +   geom_line(aes(x = delay, y = cumsum(pmf))) +   xlab(\"Delay\") +   ylab(\"Cumulative proportion reported\") +   ggtitle(\"Empirical point estimate of cumulative proportion reported by delay\") + # nolint   theme_bw()  delay_pmf_plot <- ggplot(delay_df) +   geom_line(aes(x = delay, y = pmf)) +   xlab(\"Delay\") +   ylab(\"Proportion reported\") +   ggtitle(\"Empirical point estimate of proportion reported by delay\") +   theme_bw() delay_cdf_plot delay_pmf_plot"},{"path":"https://baselinenowcast.epinowcast.org/articles/baselinenowcast.html","id":"apply-the-delay-to-generate-a-point-nowcast","dir":"Articles","previous_headings":"","what":"Apply the delay to generate a point nowcast","title":"Getting Started with baselinenowcast","text":"next step workflow take estimated delay distribution apply partially observed reporting triangle, generating estimate number new cases confirmed reference date delay. generate point estimate complete reporting matrix. case, applying delay reporting triangle used generate estimate, doesn’t always case. See documentation apply_delay() full description input requirements. worth noting also estimated delay applied one single step calling generate_pt_nowcast_mat(). subsequent steps estimate uncertainty, delay estimation generating point nowcast matrix happen single step. ’ll make quick plot compare point estimate nowcasted confirmed cases August 1, 2021, “final” observations October 1, 2021 right-truncated data available August 1, 2021.  can see point nowcast (blue) slightly underestimates eventually reported (black), decent overall job correcting right-truncation observed data nowcast date (red).","code":"point_nowcast_matrix <- apply_delay(   reporting_triangle = reporting_triangle,   delay_pmf = delay_pmf ) point_nowcast_df <- eval_data |>   mutate(nowcast = rowSums(point_nowcast_matrix))  prep_latest_data <- latest_training_data |>   mutate(type = \"Real-time data\") |>   select(type, reference_date, count = confirm) # Combine data into a single dataframe for plotting plot_data <- point_nowcast_df |>   pivot_longer(     cols = c(confirm, nowcast),     names_to = \"type\",     values_to = \"count\"   ) |>   mutate(type = case_when(     type == \"confirm\" ~ \"Final observed data\",     type == \"nowcast\" ~ \"Point nowcast\",     TRUE ~ type   )) |>   bind_rows(prep_latest_data)  # Create plot with data type as a variable plot_pt_nowcast <- ggplot(plot_data, aes(   x = reference_date,   y = count,   color = type )) +   geom_line() +   scale_color_manual(values = c(     \"Real-time data\" = \"darkred\",     \"Final observed data\" = \"black\",     \"Point nowcast\" = \"darkblue\"   )) +   theme_bw() +   xlab(\"Reference date\") +   ylab(\"Confirmed admissions\") +   scale_y_continuous(trans = \"log10\") +   ggtitle(\"Comparing real-time, nowcasted, and later observed cases\") +   theme(legend.position = \"bottom\") +   labs(color = \"Type\") plot_pt_nowcast"},{"path":"https://baselinenowcast.epinowcast.org/articles/baselinenowcast.html","id":"estimate-uncertainty","dir":"Articles","previous_headings":"","what":"Estimate uncertainty","title":"Getting Started with baselinenowcast","text":"far, ’ve demonstrated generate point estimate nowcast. like generate probabilistic nowcasts. method used estimate uncertainty works generating retrospective reporting triangles using available retrospective nowcast time estimate delay distribution, generate point nowcast matrix, compare estimated counts reference time observed nowcast horizon. assumes observations follow negative binomial observation model, independently estimates dispersion negative binomial forecast horizon. repeat process n_retrospective_nowcasts reference times current reporting triangle, starting latest reference time working backwards, ultimately using n_retrospective_nowcasts n_history_delay reference times. results list retrospective reporting triangles. See documentation truncate_triangles() construct_triangles() information inputs outputs functions. Next pass list reporting triangles fill_triangles() specify n, number reference times used estimate delay nowcast, set n_history_delay previous specified. Next, use retrospective reporting triangles, point nowcast matrices, truncated reporting triangles estimate uncertainty horizon, starting horizon 0 using estimate_uncertainty() function.","code":"trunc_rep_tri_list <- truncate_triangles(reporting_triangle,   n = n_retrospective_nowcasts ) retro_rep_tri_list <- construct_triangles(trunc_rep_tri_list) retro_pt_nowcast_mat_list <- fill_triangles(   retro_reporting_triangles = retro_rep_tri_list,   n = n_history_delay ) disp_params <- estimate_uncertainty(   point_nowcast_matrices = retro_pt_nowcast_mat_list,   truncated_reporting_triangles = trunc_rep_tri_list,   retro_reporting_triangles = retro_rep_tri_list,   n = n_retrospective_nowcasts )"},{"path":"https://baselinenowcast.epinowcast.org/articles/baselinenowcast.html","id":"generate-probabilistic-nowcast","dir":"Articles","previous_headings":"","what":"Generate probabilistic nowcast","title":"Getting Started with baselinenowcast","text":"Now estimated dispersion, can generate probabilistic nowcast using sample_nowcasts() function : generates draws nowcast distribution combines draws observed data form single draw nowcast repeats process draws draws See documentation sample_nowcasts()details.","code":"nowcast_draws_df <- sample_nowcasts(   point_nowcast_matrix, reporting_triangle,   uncertainty_params = disp_params,   draws = 100 )  head(nowcast_draws_df) ##   pred_count time draw ## 1        736    1    1 ## 2        897    2    1 ## 3        893    3    1 ## 4        804    4    1 ## 5        722    5    1 ## 6        492    6    1"},{"path":"https://baselinenowcast.epinowcast.org/articles/baselinenowcast.html","id":"visualizing-the-nowcast","dir":"Articles","previous_headings":"","what":"Visualizing the nowcast","title":"Getting Started with baselinenowcast","text":"Let’s visualize nowcast compared final observed data. first need join nowcast original data can see nowcast reference date. Prepare data nowcast date, latest_training_data can map nowcast draws onto . Prepare final evaluation data can combine datasets. Join nowcasts, data nowcast date, final data. Create separate dataframe observed final data, make plotting easier.  Gray lines indicate probabilistic nowcast draws, combination already observed data reference date predicted nowcast draws reference date. Black lines show “final” data October 1, 2021.","code":"latest_data_prepped <- latest_training_data |>   mutate(time = row_number()) |>   rename(obs_confirm = confirm) |>   mutate(reference_date = as.Date(reference_date)) final_data_prepped <- eval_data |>   select(reference_date, final_confirm = confirm) |>   mutate(reference_date = as.Date(reference_date)) obs_with_nowcast_draws_df <- nowcast_draws_df |>   left_join(latest_data_prepped, by = \"time\") |>   left_join(final_data_prepped, by = \"reference_date\") head(obs_with_nowcast_draws_df) ##   pred_count time draw reference_date location age_group obs_confirm ## 1        736    1    1     2021-05-04       DE       00+         823 ## 2        897    2    1     2021-05-05       DE       00+        1028 ## 3        893    3    1     2021-05-06       DE       00+        1016 ## 4        804    4    1     2021-05-07       DE       00+         892 ## 5        722    5    1     2021-05-08       DE       00+         822 ## 6        492    6    1     2021-05-09       DE       00+         561 ##   report_date final_confirm ## 1  2021-07-24           823 ## 2  2021-07-25          1028 ## 3  2021-07-26          1016 ## 4  2021-07-27           892 ## 5  2021-07-28           822 ## 6  2021-07-29           561 combined_data <- obs_with_nowcast_draws_df |>   select(reference_date, obs_confirm, final_confirm) |>   distinct() |>   pivot_longer(     cols = c(obs_confirm, final_confirm),     names_to = \"type\",     values_to = \"count\"   ) |>   mutate(type = case_when(     type == \"obs_confirm\" ~ \"Observed data\",     type == \"final_confirm\" ~ \"Final observed data\"   )) # Plot with draws for nowcast only plot_prob_nowcast <- ggplot() +   # Add nowcast draws as thin gray lines   geom_line(     data = obs_with_nowcast_draws_df,     aes(       x = reference_date, y = pred_count, group = draw,       color = \"Nowcast draw\", linewidth = \"Nowcast draw\"     )   ) +   # Add observed data and final data once   geom_line(     data = combined_data,     aes(       x = reference_date,       y = count,       color = type,       linewidth = type     )   ) +   theme_bw() +   scale_color_manual(     values = c(       \"Nowcast draw\" = \"gray\",       \"Observed data\" = \"darkred\",       \"Final observed data\" = \"black\"     ),     name = \"\"   ) +   scale_linewidth_manual(     values = c(       \"Nowcast draw\" = 0.2,       \"Observed data\" = 1,       \"Final observed data\" = 1     ),     name = \"\"   ) +   scale_y_continuous(trans = \"log10\") +   xlab(\"Reference date\") +   ylab(\"Hospital admissions\") +   theme(legend.position = \"bottom\") +   ggtitle(\"Comparison of admissions as of the nowcast date, later observed counts, \\n and probabilistic nowcasted counts\") # nolint plot_prob_nowcast"},{"path":"https://baselinenowcast.epinowcast.org/articles/model_definition.html","id":"overview","dir":"Articles","previous_headings":"","what":"Overview","title":"Mathematical methods for baselinenowcast","text":"baselinenowcast model based reference model COVID-19 hospital admissions nowcasting challenge Germany 2021 2022[1]. Using slight variation chain ladder method[2], method uses preliminary case counts empirical delay distributions estimate yet---observed cases. Probabilistic nowcasts generated using observation model means point nowcast uncertainty estimated past nowcast errors. Users can flexibly specify data like use delay estimation uncertainty quantification, well specify parametric form observation model used uncertainty quantification. Time steps can correspond time unit. See Default Settings section full description default behaviour baselinenowcast() method.","code":""},{"path":"https://baselinenowcast.epinowcast.org/articles/model_definition.html","id":"notation","dir":"Articles","previous_headings":"Overview","what":"Notation","title":"Mathematical methods for baselinenowcast","text":"denote \\(X_{t,d}, d = 0, \\dots, D\\) number cases occurring time \\(t\\) appear dataset delay \\(d\\). example, delay \\(d = 0\\) means case occurring day \\(t\\) arrived dataset day \\(t\\). consider cases reporting within maximum delay \\(D\\). number cases reporting time \\(t\\) delay \\(d\\) can written : \\[ X_{t, \\le d} = \\sum_{=0}^d X_{t,} \\] special case “final” number reported cases time \\(t\\), denoted \\[ X_t = X_{t, \\le D} = \\sum_{=0}^D X_{t,} \\]{#eq:Xltd} delays \\(d < D\\) define notation \\[X_{t,>d} = \\sum_{= d+1} ^{D} X_{t,}\\] representing number cases still missing \\(d\\) delay. following use uppercase letters (\\(X_t\\)) random variables, lower case (\\(x_t\\)) corresponding observations, hats (\\(\\hat{x}_t\\)) estimated/imputed values. refer \\(X_t\\) describe random variable, \\(x_t\\) corresponding observation, \\(\\hat{x}_t\\) estimated/imputed value. matrix \\(\\mathbf{x}\\) entries \\(x_{t,d}, t = 1, \\dots, t^*, d = 1, \\dots, D\\) referred reporting matrix. description nowcasting terms used document (e.g. reporting triangle) corresponding abbreviations package, please consult nowcasting nomenclature vignette. case \\(t^*\\) corresponds present date, entries \\(t+d>t^*\\) yet observed thus still missing. available entries bottom form triangle, incomplete reporting matrix referred reporting triangle.","code":""},{"path":"https://baselinenowcast.epinowcast.org/articles/model_definition.html","id":"preprocessing","dir":"Articles","previous_headings":"Overview","what":"Pre-processing of the reporting triangle","title":"Mathematical methods for baselinenowcast","text":"following steps require reporting triangle non-negative entries. practice necessarily case. instance, reporting triangle computed increments subsequent data snapshots, occasional downward corrections due data entrance issues can cause negative entries. therefore apply pre-processing step re-distribute negative entries across neighbouring cells positive entries.","code":""},{"path":[]},{"path":"https://baselinenowcast.epinowcast.org/articles/model_definition.html","id":"estimating-the-delay-distribution-from-a-reporting-matrix","dir":"Articles","previous_headings":"Overview > Delay distribution estimation","what":"Estimating the delay distribution from a reporting matrix","title":"Mathematical methods for baselinenowcast","text":"complete reporting matrix available, estimating discrete-time delay distribution \\(\\pi_d, d = 0, \\dots, D\\) straightforward. Using last \\(N\\) rows reporting matrix \\(\\mathbf{x}\\), compute \\[ \\hat{\\pi}_d= \\frac{\\sum_{t=t^*-N+1}^{t=t^*} x_{t,d}}{\\sum_{t=t^*-N+1}^{t=t^*} x_{t}}, \\]{#eq-pi_d} simply relative frequency delay \\(d\\) days among cases reporting matrix.","code":""},{"path":"https://baselinenowcast.epinowcast.org/articles/model_definition.html","id":"estimating-the-delay-distribution-from-a-reporting-triangle","dir":"Articles","previous_headings":"Overview > Delay distribution estimation","what":"Estimating the delay distribution from a reporting triangle","title":"Mathematical methods for baselinenowcast","text":"case \\(t^*\\) present day, reporting triangle missing entries available, estimator \\(\\hat{\\pi}_d\\) @eq-pi_d can evaluated discarding data last \\(D-1\\) time points. order use partial observations, use different representation delay distribution via terms form \\[ \\theta_d = \\frac{\\pi_d}{\\pi_{\\le d-1}} \\] {#eq:theta_d} \\(d = 1, \\dots, D\\). , analogy [eq-Xltd?] write \\[ \\pi_{\\le d-1} = \\sum_{d'=0}^{d-1} \\pi_d. \\] {#eq:pi_less_than_d} \\(\\theta_d\\) can estimated via \\[ \\hat{\\theta}_d = \\frac{\\sum_{t=t^* - N + 1}^{t^*-d} x_{t, d}}{\\sum_{t= t^* - N + 1}^{t^*-d} x_{t, \\leq d - 1}}, \\] translated estimates \\(\\hat{\\pi}_0,..., \\hat{\\pi}_D\\) via recursion \\[ \\hat{\\pi}_{\\leq d} = (1+\\hat{\\theta}_d)\\hat{\\pi}_{\\leq d-1} \\] subject constrain \\(\\sum_{d = 0}^D \\pi_d = 1\\). note method equivalent -called chain ladder method[2], adapted notation terms reporting triangles (rather development triangles used accounting). intuition behind method described Figure[fig-squares?], basic assumption ratio delays complete observations (navy orange elements matrix) equivalent ratio delays partially observed components matrix (blue yellow elements matrix). delay_estimate() function ingests either reporting matrix reporting triangle uses last n rows compute empirical delay probability mass function (PMF), returning simplex vector indexed starting delay 0.","code":""},{"path":"https://baselinenowcast.epinowcast.org/articles/model_definition.html","id":"point-nowcast-generation","dir":"Articles","previous_headings":"Overview","what":"Point nowcast generation","title":"Mathematical methods for baselinenowcast","text":"now address computation point nowcast, .e., expected final case numbers \\(\\hat{x}_t, t = t^* - D + 1, t^*\\). based reporting triangle, specifically preliminary totals \\(x_{t, \\leq t^* - t}\\), estimated delay distribution, \\(\\hat{\\pi}_d, d = 0, \\dots, D\\). following denote current time \\(t^*\\) nowcast time, time \\(t = t^* - D, \\dots, t^*\\) reference time. difference \\(j = t^* - t\\) called horizon. intuitive approach, used [1] standard chain ladder technique, simply inflate current total reference time \\(t\\) inverse respective probability observation time \\(t^*\\), \\[ \\hat{x}_t =\\frac{x_{t, \\leq t^*-t}}{\\pi_{\\leq t^*-t}}. \\] , however, well-behaved cases \\(t\\) observed yet, .e., \\(x_{t, \\leq t^* - t} = 0\\). \\(\\hat{x}_t\\) likewise zero, yields problems uncertainty quantification method (see next section). Motivated Bayesian argument (see Zero-handling ) therefore use expression \\[ \\hat{x}_t = \\frac{x_{t, \\leq t^*-t} + 1 - \\pi_{\\leq t^*-t}}{\\hat{\\pi}_{t, \\leq t^*-t}} \\] {#eq-correction} instead. yields essentially identical results large \\(x_{t, \\leq t^* - t}\\), produces positive \\(\\hat{x}_t\\) even preliminary zero values \\(x_{t, \\leq t^* - t} = 0\\). uncertainty quantification scheme require estimated totals \\(\\hat{x}_t\\), entries \\(\\hat{x}_{t,d}\\) point nowcast matrix. \\(t = t^* - D + 1, \\dots, t^*, d > t^* - t\\) obtained \\[ \\hat{x}_{t,d} = \\hat{\\pi}_d \\times \\hat{x}_t. \\] apply_delay() function ingests reporting triangle delay PMF returns point nowcast matrix. generation point nowcast described schematic [fig-pt_nowcast?], describing missing elements reporting triangle estimated can used generate point estimate final counts reference time.","code":""},{"path":"https://baselinenowcast.epinowcast.org/articles/model_definition.html","id":"uncertainty-quantification","dir":"Articles","previous_headings":"Overview","what":"Uncertainty quantification","title":"Mathematical methods for baselinenowcast","text":"estimate uncertainty nowcasts, use nowcast errors \\(M\\) past nowcasting time points. See Default Settings details default settings used package define number \\(M\\) past nowcasting time points used.","code":""},{"path":"https://baselinenowcast.epinowcast.org/articles/model_definition.html","id":"generation-of-retrospective-reporting-triangles","dir":"Articles","previous_headings":"Overview > Uncertainty quantification","what":"Generation of retrospective reporting triangles","title":"Mathematical methods for baselinenowcast","text":"first obtain “vintage” reporting triangles raw reporting triangle (.e., pre-processing) replicate data available times \\(s^* = t^*-1, ..., t^*-M\\), .e., last \\(M\\) time points nowcasts generated. simply corresponds stepwise omission entries \\(t + d > s^*\\), \\(s^*\\) diagonal bottom left top right. pre-processing step Section Preprocessing reporting triangle applied vintage reporting triangle. can achieved stepwise manner using functions truncate_triangles() construct_triangles() return list n retrospective reporting triangles order recent oldest.","code":""},{"path":"https://baselinenowcast.epinowcast.org/articles/model_definition.html","id":"generation-of-retrospective-point-nowcast-matrices","dir":"Articles","previous_headings":"Overview > Uncertainty quantification","what":"Generation of retrospective point nowcast matrices","title":"Mathematical methods for baselinenowcast","text":"\\(M\\) vintage reporting triangles, .e., \\(s^* = t^*-1,, ..., t^*-M\\), apply method described estimate delay distribution generate point nowcast matrix using function fill_triangles(). indicate data version based, entries denoted : \\[ \\hat{x}_{t, d}(s^*) \\] \\(t = s^* - D + 1, \\dots, s^*\\) \\(d = s^* - t + 1, \\dots D\\). Note estimation based last \\(N\\) rows respective reporting triangle, must consequently contain least \\(M + N\\) rows total.","code":""},{"path":"https://baselinenowcast.epinowcast.org/articles/model_definition.html","id":"fit-an-observation-model-to-past-nowcast-errors","dir":"Articles","previous_headings":"Overview > Uncertainty quantification","what":"Fit an observation model to past nowcast errors","title":"Mathematical methods for baselinenowcast","text":"point nowcast based reporting triangle time \\(s^*\\) can also written \\[ \\hat{x}_{t}(s^*) = x_{t, \\leq s^* - t} + \\hat{x}_{t, > s^* - t}(s^*). \\] second term associated uncertainty, first already known time \\(s^*\\). quantify uncertainty given nowcast horizon \\(0 \\leq j \\leq D\\), assemble \\(\\hat{x}_{s^* - j, > j}(s^*)\\) \\(x_{s^* - j,> j}\\) \\(s^* = t^* - M, \\dots, t^* - 1\\). default, baselinenowcast() method assumes count data can fit negative binomial observation model, though choice observation model can selected user. Assuming negative binomial observation model, observations complete, estimate overdispersion parameter \\(\\phi_j\\) negative binomial distribution \\[ X_{s^* - j, > j} \\sim \\text{NegBin}[\\hat{x}_{s^* - j, > j}(s^*), \\phi_j], \\]{#eq-negbin} independence assumed across different \\(s^*\\). , however, directly feasible \\(x_{s^* - j, > j}\\) yet observed time \\(t^*\\). discard instances, considerably reduce number available observations. therefore use partial observations available time \\(t^*\\) assume \\[ \\left(\\sum_{d = j + 1}^{\\min(D, t^* - s^*)} X_{s^* - j, d} \\right) \\sim \\text{NegBin}\\left[\\sum_{d = j + 1}^{\\min(D, t^* - s^*)} \\hat{x}_{s^* - j, d}, \\phi_j \\right]. \\]{#eq-negbin2} quantify uncertainty target quantity level, assumed, default, final count reference time, summed across reporting delays. , use constant dispersion parameter \\(\\phi_j\\) despite values fitting procedure yet incomplete justified fact negative binomial distribution closed binomial subsampling, overdispersion parameter preserved. equation[eq-negbin?] holds combination \\[ \\left(\\sum_{d = j + 1}^{\\min(D, t^* - s^*)} X_{s^* - j, d} \\right) \\ | \\ X_{s^* - j, > j} \\sim \\text{Bin}\\left[X_{s^* - j, > j}, \\left(\\sum_{d = j + 1}^{\\min(D, t^* - s^*)} \\pi_{d}\\right) / \\pi_{> j} \\right], \\] thus obtain[eq-negbin2?]. Estimated dispersion parameters \\(\\hat{\\phi}_0, \\dots, \\hat{\\phi}_D\\) obtained maximum likelihood estimation. estimate_uncertainty() function ingests truncated reporting triangles, retrospective reporting triangles, retrospective point nowcasts returns set uncertainty parameters corresponding specified observation model. uncertainty quantification procedure described schematically Figure[fig-uncertainty_quantification?].","code":""},{"path":[]},{"path":"https://baselinenowcast.epinowcast.org/articles/model_definition.html","id":"predicted-probabilistic-nowcast-generation","dir":"Articles","previous_headings":"Overview > Probabilistic nowcast generation","what":"Predicted probabilistic nowcast generation","title":"Mathematical methods for baselinenowcast","text":"Predictive distributions \\(X_{t^*}, \\dots, X_{t^* - D + 1}\\) obtained generating draws observation model, case negative binomial, estimated dispersion parameters mean given predicted component point nowcasts. Specifically, set \\[ X_{t, > t^* - t} \\sim \\text{NegBin}(\\hat{x}_{t, > t^* - t}, \\phi_{t^* - t}). \\] described schematic Figure[fig-predicted_prob_nowcasts?] describes sampling observation model mean given sum predicted components point nowcast matrix (white squares).","code":""},{"path":"https://baselinenowcast.epinowcast.org/articles/model_definition.html","id":"combine-with-observations-to-obtain-probabilistic-nowcasts","dir":"Articles","previous_headings":"Overview > Probabilistic nowcast generation","what":"Combine with observations to obtain probabilistic nowcasts","title":"Mathematical methods for baselinenowcast","text":"predictive distribution \\(X_{t}\\) results shifting distribution already known value \\(x_{t, \\leq t^* - t}\\). described schematic Figure[fig-comb_w_obs?] describes combining right-truncated partial observed data summed across reference times predicted probabilistic nowcast components generate probabilistic nowcasts. sample_nowcasts() function ingests uncertainty parameters, reporting triangle, point nowcast matrix generates probabilistic nowcasts.","code":""},{"path":"https://baselinenowcast.epinowcast.org/articles/model_definition.html","id":"zero-handling-approximation","dir":"Articles","previous_headings":"Overview","what":"Zero-handling strategy","title":"Mathematical methods for baselinenowcast","text":"mentioned Point nowcast generation, use modified point nowcasts deal zero values preliminary counts. motivate approach Bayesian perspective, based work [Morgenstern2025?]. end assume \\[ X_{t, \\leq d} \\ \\mid X_t \\sim \\text{Bin}\\left(X_t, \\sum_{d = 0}^d \\pi_t\\right). \\] now interested conditional expectation \\[ \\mathbb{E}(X_t \\ \\mid X_{t, \\leq d}) \\] binomial subsampling problem. derive improper prior distribution \\[ X_t \\sim \\text{DiscreteUniform}(0, 1, 2, \\dots). \\] notational simplicity readability following, substitute \\(N = X_{t}\\), \\(Y = X_{t, \\geq d}\\) \\(p = \\sum_{d = 0}^D \\pi_d\\) thus looking \\(\\mathbb{E}(N | Y = y)\\) \\(Y \\sim \\text{Bin}(N, p)\\) discrete uniform prior \\(N\\). expectation can written : \\[ \\mathbb{E}(N \\ | \\ Y = y) = \\sum_{n=0}^{\\infty}\\text{Pr}(N = n | Y = y) \\times n \\]{#eq-expectation} Applying Bayes Theorem \\[ \\text{Pr}(N = n \\ |\\ Y = y)  = \\frac{\\text{Pr}(Y = y \\ | \\ N = n) \\times \\text{Pr}(N=n)}{\\sum_{=0}^{\\infty}\\text{Pr}( Y = y \\ |\\ N= ) \\times \\text{Pr}(N = )}. \\] \\(\\text{Pr}(N=n)\\) constant simplifies \\[ \\text{Pr}(N = n \\ |\\ Y = y)  = \\frac{\\text{Pr}(Y = y \\ |\\ N = n)}{\\sum_{=0}^{\\infty}\\text{Pr}( Y = y \\ |\\ N= )}. \\] Now substituting probability mass function binomial distribution \\[ \\text{Pr}(Y = y\\ |\\ N = n) =\\binom{n}{y} p^y(1-p)^{n-y} \\] get \\[ \\text{Pr}(N = n \\ |\\ Y = y) = \\frac{\\binom{n}{y} p^y(1-p)^{n-y}}{\\sum_{=1}^\\infty \\binom{1}{y}p^y(1-p)^{-y}} \\] Plugging [eq-expectation?] get following (omitting terms \\(n<y\\), 0): \\[ \\mathbb{E}(N \\ |\\ Y = y) = \\sum_{n=y}^{\\infty}n \\frac{\\binom{n}{y} p^y(1-p)^{n-y}}{\\sum_{=y}^\\infty \\binom{}{y}p^y(1-p)^{-y}} \\] equivalent \\[ \\mathbb{E}(N \\ | \\ Y = y) =  \\frac{\\sum_{n=y}^{\\infty}n \\binom{n}{y} p^y(1-p)^{n-y}}{\\sum_{=y}^\\infty \\binom{}{y}p^y(1-p)^{-y}}. \\] numerator denominator known convergent series, solutions available standard libraries like Mathematica[Mathematica2024?]. get \\[ \\mathbb{E}(N \\ |\\ Y = y)  = \\frac{(y + 1 -p)/p^2}{1/p} = \\frac{y + 1 - p}{p}, \\] corresponds corrected point estimate provided equation[eq-correction?].","code":""},{"path":"https://baselinenowcast.epinowcast.org/articles/model_definition.html","id":"default-settings","dir":"Articles","previous_headings":"","what":"Default settings","title":"Mathematical methods for baselinenowcast","text":"guide practitioners, set default behaviours based maximum delay observed data. use partial reporting triangle delay estimation, derive delay estimates uncertainty estimates reporting triangle nowcasted, use three times maximum delay number (\\(V=3 \\times D\\)) reference times total training volume \\(V\\) used model (line [1]). Within step additional defaults: Delay distribution estimation: 50% reference times training volume \\(V\\) used delay estimation, \\(N\\), minimum requirement least one maximum delay. less data available, indicated user, producing error less data theoretically minimum available given modelling step. Point nowcast generation: Delay estimation occurs using reporting triangle nowcasted. Uncertainty Estimation: 50% reference times training volume \\(V\\) used retrospective point nowcast times, \\(M\\). insufficient data, method uses oldest retrospective nowcast date least amount historical data delay estimation used point nowcast current nowcast date, requires least two retrospective nowcasts containing sufficient data. default sum predicted components row across rows context specific (diverging [1]. sum week due target data rolling 7 day sum).","code":""},{"path":[]},{"path":"https://baselinenowcast.epinowcast.org/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Kaitlyn Johnson. Author, maintainer, copyright holder. Sam Abbott. Author. Johannes Bracher. Author. Sebastian Funk. Author.","code":""},{"path":"https://baselinenowcast.epinowcast.org/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Johnson K, Abbott S, Bracher J, Funk S (2025). baselinenowcast: Baseline nowcast. R package version 0.0.0.1000, https://baselinenowcast.epinowcast.org.","code":"@Manual{,   title = {baselinenowcast: Baseline nowcast},   author = {Kaitlyn Johnson and Sam Abbott and Johannes Bracher and Sebastian Funk},   year = {2025},   note = {R package version 0.0.0.1000},   url = {https://baselinenowcast.epinowcast.org}, }"},{"path":[]},{"path":"https://baselinenowcast.epinowcast.org/index.html","id":"summary","dir":"","previous_headings":"","what":"Summary","title":"Baseline nowcast for right-truncated epidemiological data","text":"Nowcasting right-truncated epidemiological data critical timely public health decision-making, reporting delays can create misleading impressions declining trends recent data. package provides simple nowcasting methods practical use based using empirical delay distributions uncertainty past performance. also designed used baseline method developers new nowcasting methods. supports standard data frame inputs reference date, report date, count columns, compatible ‘epinowcast’ objects, also supports direct use reporting triangles. Alongside opinionated default workflow, low-level pipe-friendly modular interface, allowing context-specific workflows. can accommodate wide spectrum reporting schedules, including mixed patterns reference reporting (daily-weekly, weekly-daily). also supports sharing delay distributions uncertainty estimates strata, well custom uncertainty models delay estimation methods.","code":""},{"path":"https://baselinenowcast.epinowcast.org/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Baseline nowcast for right-truncated epidemiological data","text":"install development version GitHub (warning! version may contain breaking changes /bugs), use pak package:","code":"pak::pak(file.path(\"epinowcast\", \"baselinenowcast\"))"},{"path":"https://baselinenowcast.epinowcast.org/index.html","id":"resources","dir":"","previous_headings":"","what":"Resources","title":"Baseline nowcast for right-truncated epidemiological data","text":"provide range documentation, case studies, community spaces ask (answer!) questions: organisation website includes links resources, guest posts, seminar schedule upcoming past recordings. community forum areas question answer considering new methods tools, among others. generally interested real-time analysis infectious disease, may find useful even use baselinenowcast.","code":""},{"path":"https://baselinenowcast.epinowcast.org/index.html","id":"contributing","dir":"","previous_headings":"","what":"Contributing","title":"Baseline nowcast for right-truncated epidemiological data","text":"welcome contributions new contributors! particularly appreciate help identifying identified issues. Please check add issues, /add pull request see contributing guide information.","code":""},{"path":"https://baselinenowcast.epinowcast.org/index.html","id":"how-to-make-a-bug-report-or-feature-request","dir":"","previous_headings":"Contributing","what":"How to make a bug report or feature request","title":"Baseline nowcast for right-truncated epidemiological data","text":"Please briefly describe problem output expect issue. See contributing guide information.","code":""},{"path":"https://baselinenowcast.epinowcast.org/index.html","id":"code-of-conduct","dir":"","previous_headings":"Contributing","what":"Code of Conduct","title":"Baseline nowcast for right-truncated epidemiological data","text":"Please note baselinenowcast project released Contributor Code Conduct. contributing project, agree abide terms.","code":""},{"path":"https://baselinenowcast.epinowcast.org/index.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Baseline nowcast for right-truncated epidemiological data","text":"use baselinenowcast work, please consider citing citation(\"baselinenowcast\").","code":""},{"path":"https://baselinenowcast.epinowcast.org/index.html","id":"contributors","dir":"","previous_headings":"","what":"Contributors","title":"Baseline nowcast for right-truncated epidemiological data","text":"contributions project gratefully acknowledged using allcontributors package following allcontributors specification. Contributions kind welcome!","code":""},{"path":"https://baselinenowcast.epinowcast.org/index.html","id":"code","dir":"","previous_headings":"Contributors","what":"Code","title":"Baseline nowcast for right-truncated epidemiological data","text":"kaitejohnson, seabbs, TimTaylor, sbfnk","code":""},{"path":"https://baselinenowcast.epinowcast.org/index.html","id":"issue-authors","dir":"","previous_headings":"Contributors","what":"Issue Authors","title":"Baseline nowcast for right-truncated epidemiological data","text":"jonathonmellor, swo","code":""},{"path":"https://baselinenowcast.epinowcast.org/index.html","id":"issue-contributors","dir":"","previous_headings":"Contributors","what":"Issue Contributors","title":"Baseline nowcast for right-truncated epidemiological data","text":"jamesmbaazam, jbracher","code":""},{"path":"https://baselinenowcast.epinowcast.org/reference/apply_delay.html","id":null,"dir":"Reference","previous_headings":"","what":"Apply the delay to generate a point nowcast — apply_delay","title":"Apply the delay to generate a point nowcast — apply_delay","text":"Generate point estimate completed reporting square (rectangle) reporting triangle want complete nowcast delay PMF. element computed taking product expected number total cases assigned reference time $t$ proportion cases reported delay $d$. formula obtain expected number total cases function reporting delay previous observations derived elsewhere. code adapted code written (MIT license) Karlsruhe Institute Technology RESPINOW German Hospitalization Nowcasting Hub. Modified : https://github.com/KITmetricslab/RESPINOW-Hub/blob/7cce3ae2728116e8c8cc0e4ab29074462c24650e/code/baseline/functions.R#L55 #nolint","code":""},{"path":"https://baselinenowcast.epinowcast.org/reference/apply_delay.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Apply the delay to generate a point nowcast — apply_delay","text":"","code":"apply_delay(reporting_triangle, delay_pmf)"},{"path":"https://baselinenowcast.epinowcast.org/reference/apply_delay.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Apply the delay to generate a point nowcast — apply_delay","text":"reporting_triangle Matrix reporting triangle nowcasted, rows representing time points reference columns representing delays delay_pmf Vector delays assumed indexed starting first delay column rep_mat_to_nowcast","code":""},{"path":"https://baselinenowcast.epinowcast.org/reference/apply_delay.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Apply the delay to generate a point nowcast — apply_delay","text":"point_nowcast_matrix Matrix number rows columns rep_mat_to_nowcast missing values filled point estimates","code":""},{"path":"https://baselinenowcast.epinowcast.org/reference/apply_delay.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Apply the delay to generate a point nowcast — apply_delay","text":"","code":"triangle <- matrix(   c(     80, 50, 25, 10,     100, 50, 30, 20,     90, 45, 25, NA,     80, 40, NA, NA,     70, NA, NA, NA   ),   nrow = 5,   byrow = TRUE ) delay_pmf <- estimate_delay(   reporting_triangle = triangle,   max_delay = 3,   n = 4 ) point_nowcast_matrix <- apply_delay(   reporting_triangle = triangle,   delay_pmf = delay_pmf ) print(point_nowcast_matrix) #>      [,1]     [,2]     [,3]     [,4] #> [1,]   80 50.00000 25.00000 10.00000 #> [2,]  100 50.00000 30.00000 20.00000 #> [3,]   90 45.00000 25.00000 17.78889 #> [4,]   80 40.00000 23.20529 15.92281 #> [5,]   70 35.24853 20.35851 13.96745"},{"path":"https://baselinenowcast.epinowcast.org/reference/combine_obs_with_pred.html","id":null,"dir":"Reference","previous_headings":"","what":"Combine observed data with a single prediction draw — combine_obs_with_pred","title":"Combine observed data with a single prediction draw — combine_obs_with_pred","text":"Internally sums observed counts reporting triangle reference time adds predicted counts form single draw nowcast final counts reference time.","code":""},{"path":"https://baselinenowcast.epinowcast.org/reference/combine_obs_with_pred.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Combine observed data with a single prediction draw — combine_obs_with_pred","text":"","code":"combine_obs_with_pred(   predicted_counts,   reporting_triangle,   ref_time_aggregator = identity,   delay_aggregator = function(x) rowSums(x, na.rm = TRUE) )"},{"path":"https://baselinenowcast.epinowcast.org/reference/combine_obs_with_pred.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Combine observed data with a single prediction draw — combine_obs_with_pred","text":"predicted_counts Vector predicted counts reference time. Note using reference time delay aggregator function, assumed already aggregated. reporting_triangle Matrix reporting triangle, rows representing time points reference columns representing delays. Can reporting matrix incomplete reporting matrix. Can also ragged reporting triangle, multiple columns reported row. (e.g. weekly reporting daily data). ref_time_aggregator Function operates along rows (reference times) retrospective point nowcast matrix aggregated across columns (delays). Default identity aggregate across reference times. delay_aggregator Function operates along columns (delays) retrospective point nowcast matrix aggregated across reference times. Default function(x) rowSums(x, na.rm = TRUE).","code":""},{"path":"https://baselinenowcast.epinowcast.org/reference/combine_obs_with_pred.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Combine observed data with a single prediction draw — combine_obs_with_pred","text":"vector predicted counts reference time","code":""},{"path":"https://baselinenowcast.epinowcast.org/reference/combine_obs_with_pred.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Combine observed data with a single prediction draw — combine_obs_with_pred","text":"","code":"pred_counts <- c(10, 20, 30, 40) reporting_matrix <- matrix(   c(     7, 9, 4, 3,     1, 2, 3, 4,     5, 6, 7, 8,     9, 10, 11, 12   ),   nrow = 4,   byrow = TRUE ) reporting_triangle <- construct_triangle(reporting_matrix) combine_obs_with_pred(pred_counts, reporting_triangle) #> [1] 33 26 41 49 # Another example with rolling sum if (requireNamespace(\"zoo\", quietly = TRUE)) {   combine_obs_with_pred(pred_counts,     reporting_triangle,     ref_time_aggregator = function(x) zoo::rollsum(x, k = 2, align = \"right\")   ) } #> Warning: longer object length is not a multiple of shorter object length #> [1] 36 34 44 66"},{"path":"https://baselinenowcast.epinowcast.org/reference/construct_triangle.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate a single retrospective reporting triangle — construct_triangle","title":"Generate a single retrospective reporting triangle — construct_triangle","text":"function generates single reporting triangle removing bottom right observations truncated reporting triangle matrix. singular version construct_triangles().","code":""},{"path":"https://baselinenowcast.epinowcast.org/reference/construct_triangle.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate a single retrospective reporting triangle — construct_triangle","text":"","code":"construct_triangle(truncated_reporting_triangle, structure = 1)"},{"path":"https://baselinenowcast.epinowcast.org/reference/construct_triangle.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate a single retrospective reporting triangle — construct_triangle","text":"truncated_reporting_triangle single truncated reporting triangle. May may contain NAs. structure Integer vector specifying reporting structure. integer, divides columns evenly integer (last possibly truncated).  vector, sum must greater equal number columns. Default 1 (standard triangular structure).","code":""},{"path":"https://baselinenowcast.epinowcast.org/reference/construct_triangle.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate a single retrospective reporting triangle — construct_triangle","text":"single retrospective reporting triangle matrix NAs appropriate positions.","code":""},{"path":"https://baselinenowcast.epinowcast.org/reference/construct_triangle.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate a single retrospective reporting triangle — construct_triangle","text":"","code":"triangle <- matrix(   c(     65, 46, 21, 7,     70, 40, 20, 5,     80, 50, 10, 10,     100, 40, 31, 20,     95, 45, 21, 10,     82, 42, 6, NA,     70, 90, NA, NA   ),   nrow = 7,   byrow = TRUE )  # Standard triangular structure (default) rep_tri <- construct_triangle(triangle) rep_tri #>      [,1] [,2] [,3] [,4] #> [1,]   65   46   21    7 #> [2,]   70   40   20    5 #> [3,]   80   50   10   10 #> [4,]  100   40   31   20 #> [5,]   95   45   21   NA #> [6,]   82   42   NA   NA #> [7,]   70   NA   NA   NA  # Ragged structure with 2 columns per delay period rep_ragged <- construct_triangle(triangle, 2) rep_ragged #>      [,1] [,2] [,3] [,4] #> [1,]   65   46   21    7 #> [2,]   70   40   20    5 #> [3,]   80   50   10   10 #> [4,]  100   40   31   20 #> [5,]   95   45   21   10 #> [6,]   82   42    6   NA #> [7,]   70   90   NA   NA  # Custom structure with explicit column counts rep_custom <- construct_triangle(triangle, c(1, 2)) rep_custom #>      [,1] [,2] [,3] [,4] #> [1,]   65   46   21    7 #> [2,]   70   40   20    5 #> [3,]   80   50   10   10 #> [4,]  100   40   31   20 #> [5,]   95   45   21   10 #> [6,]   82   42    6   NA #> [7,]   70   NA   NA   NA"},{"path":"https://baselinenowcast.epinowcast.org/reference/construct_triangles.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate retrospective reporting triangles — construct_triangles","title":"Generate retrospective reporting triangles — construct_triangles","text":"function ingests list truncated reporting triangles iteratively generates reporting triangle available maximum reference time. operates element list order (recent retrospective nowcast time oldest retrospective nowcast time).","code":""},{"path":"https://baselinenowcast.epinowcast.org/reference/construct_triangles.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate retrospective reporting triangles — construct_triangles","text":"","code":"construct_triangles(truncated_reporting_triangles, structure = 1)"},{"path":"https://baselinenowcast.epinowcast.org/reference/construct_triangles.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate retrospective reporting triangles — construct_triangles","text":"truncated_reporting_triangles List n truncated reporting triangle matrices many rows available given truncation. structure Integer vector specifying reporting structure. integer, divides columns evenly integer (last possibly truncated).  vector, sum must greater equal number columns. Default 1 (standard triangular structure).","code":""},{"path":"https://baselinenowcast.epinowcast.org/reference/construct_triangles.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate retrospective reporting triangles — construct_triangles","text":"reporting_triangles List retrospective reporting triangles, generated removing bottom right observations truncated reporting triangle matrices.","code":""},{"path":"https://baselinenowcast.epinowcast.org/reference/construct_triangles.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate retrospective reporting triangles — construct_triangles","text":"","code":"triangle <- matrix(   c(     65, 46, 21, 7,     70, 40, 20, 5,     80, 50, 10, 10,     100, 40, 31, 20,     95, 45, 21, NA,     82, 42, NA, NA,     70, NA, NA, NA   ),   nrow = 7,   byrow = TRUE )  trunc_rts <- truncate_triangles(triangle, n = 2) retro_rts <- construct_triangles(trunc_rts)  # With custom structure retro_rts_custom <- construct_triangles(   trunc_rts,   structure = 2 ) retro_rts_custom #> [[1]] #>      [,1] [,2] [,3] [,4] #> [1,]   65   46   21    7 #> [2,]   70   40   20    5 #> [3,]   80   50   10   10 #> [4,]  100   40   31   20 #> [5,]   95   45   21   NA #> [6,]   82   42   NA   NA #>  #> [[2]] #>      [,1] [,2] [,3] [,4] #> [1,]   65   46   21    7 #> [2,]   70   40   20    5 #> [3,]   80   50   10   10 #> [4,]  100   40   31   NA #> [5,]   95   45   NA   NA #>"},{"path":"https://baselinenowcast.epinowcast.org/reference/dot-apply_mask.html","id":null,"dir":"Reference","previous_headings":"","what":"Apply mask to extract the elements of the matrix that are both true — .apply_mask","title":"Apply mask to extract the elements of the matrix that are both true — .apply_mask","text":"Apply mask extract elements matrix true","code":""},{"path":"https://baselinenowcast.epinowcast.org/reference/dot-apply_mask.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Apply mask to extract the elements of the matrix that are both true — .apply_mask","text":"","code":".apply_mask(mat, indices_1, indices_2)"},{"path":"https://baselinenowcast.epinowcast.org/reference/dot-apply_mask.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Apply mask to extract the elements of the matrix that are both true — .apply_mask","text":"mat Matrix containing elements extraction. indices_1 Matrix booleans dimensions mat. indices_2 Matrix booleans dimensions mat","code":""},{"path":"https://baselinenowcast.epinowcast.org/reference/dot-apply_mask.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Apply mask to extract the elements of the matrix that are both true — .apply_mask","text":"Matrix dimensions mat overlapping TRUE elements .","code":""},{"path":"https://baselinenowcast.epinowcast.org/reference/dot-calc_expectation.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate the updated rows of the expected nowcasted triangle — .calc_expectation","title":"Calculate the updated rows of the expected nowcasted triangle — .calc_expectation","text":"Calculate updated rows expected nowcasted triangle","code":""},{"path":"https://baselinenowcast.epinowcast.org/reference/dot-calc_expectation.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate the updated rows of the expected nowcasted triangle — .calc_expectation","text":"","code":".calc_expectation(index, expectation, delay_prob, delay_cdf_prev, n_rows)"},{"path":"https://baselinenowcast.epinowcast.org/reference/dot-calc_expectation.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate the updated rows of the expected nowcasted triangle — .calc_expectation","text":"index Integer indicating delay index expectation Matrix incomplete reporting matrix delay_prob Scalar probability current delay delay_cdf_prev Scalar cumulative probability previous delay n_rows Number rows expectation matrix","code":""},{"path":"https://baselinenowcast.epinowcast.org/reference/dot-calc_expectation.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate the updated rows of the expected nowcasted triangle — .calc_expectation","text":"Matrix another set entries corresponding updated values specified rows column","code":""},{"path":"https://baselinenowcast.epinowcast.org/reference/dot-calc_n_retro_nowcast_times.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate the number of retrospective nowcast times that can be used after aggregating — .calc_n_retro_nowcast_times","title":"Calculate the number of retrospective nowcast times that can be used after aggregating — .calc_n_retro_nowcast_times","text":"Calculate number retrospective nowcast times can used aggregating","code":""},{"path":"https://baselinenowcast.epinowcast.org/reference/dot-calc_n_retro_nowcast_times.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate the number of retrospective nowcast times that can be used after aggregating — .calc_n_retro_nowcast_times","text":"","code":".calc_n_retro_nowcast_times(   list_of_obs,   n_possible_horizons,   ref_time_aggregator = identity )"},{"path":"https://baselinenowcast.epinowcast.org/reference/dot-calc_n_retro_nowcast_times.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate the number of retrospective nowcast times that can be used after aggregating — .calc_n_retro_nowcast_times","text":"list_of_obs List matrices truncated reporting triangles n_possible_horizons Integer indicating number horizons retrospective reporting triangle. ref_time_aggregator Function operates along rows (reference times) retrospective point nowcast matrix aggregated across columns (delays). Default identity aggregate across reference times.","code":""},{"path":"https://baselinenowcast.epinowcast.org/reference/dot-calc_n_retro_nowcast_times.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate the number of retrospective nowcast times that can be used after aggregating — .calc_n_retro_nowcast_times","text":"n_iters Integer indicating number iterations, number retrospective nowcast times, sufficient data aggregated used generate retrospective point nowcast.","code":""},{"path":"https://baselinenowcast.epinowcast.org/reference/dot-check_lhs_not_only_zeros.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if there are non-zero-values on the LHS of NAs — .check_lhs_not_only_zeros","title":"Check if there are non-zero-values on the LHS of NAs — .check_lhs_not_only_zeros","text":"Check non-zero-values LHS NAs","code":""},{"path":"https://baselinenowcast.epinowcast.org/reference/dot-check_lhs_not_only_zeros.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if there are non-zero-values on the LHS of NAs — .check_lhs_not_only_zeros","text":"","code":".check_lhs_not_only_zeros(mat)"},{"path":"https://baselinenowcast.epinowcast.org/reference/dot-check_lhs_not_only_zeros.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if there are non-zero-values on the LHS of NAs — .check_lhs_not_only_zeros","text":"mat Matrix check","code":""},{"path":"https://baselinenowcast.epinowcast.org/reference/dot-check_lhs_not_only_zeros.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check if there are non-zero-values on the LHS of NAs — .check_lhs_not_only_zeros","text":"Boolean indicating whether non-zero values LHS first NA (TRUE = non-zeros, FALSE = zeros)","code":""},{"path":"https://baselinenowcast.epinowcast.org/reference/dot-check_na_bottom_right.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if matrix has valid NA pattern — .check_na_bottom_right","title":"Check if matrix has valid NA pattern — .check_na_bottom_right","text":"Check matrix valid NA pattern","code":""},{"path":"https://baselinenowcast.epinowcast.org/reference/dot-check_na_bottom_right.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if matrix has valid NA pattern — .check_na_bottom_right","text":"","code":".check_na_bottom_right(mat)"},{"path":"https://baselinenowcast.epinowcast.org/reference/dot-check_na_bottom_right.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if matrix has valid NA pattern — .check_na_bottom_right","text":"mat Matrix","code":""},{"path":"https://baselinenowcast.epinowcast.org/reference/dot-check_na_bottom_right.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check if matrix has valid NA pattern — .check_na_bottom_right","text":"Boolean indicating whether matrix contains NAs bottom right (TRUE bottom right, FALSE elsewhere).","code":""},{"path":"https://baselinenowcast.epinowcast.org/reference/dot-check_obs_and_pred.html","id":null,"dir":"Reference","previous_headings":"","what":"Check observations and predictions are compatible — .check_obs_and_pred","title":"Check observations and predictions are compatible — .check_obs_and_pred","text":"Check observations predictions compatible","code":""},{"path":"https://baselinenowcast.epinowcast.org/reference/dot-check_obs_and_pred.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check observations and predictions are compatible — .check_obs_and_pred","text":"","code":".check_obs_and_pred(obs, pred)"},{"path":"https://baselinenowcast.epinowcast.org/reference/dot-check_obs_and_pred.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check observations and predictions are compatible — .check_obs_and_pred","text":"obs Matrix vector observations. pred Matrix vector predictions.","code":""},{"path":"https://baselinenowcast.epinowcast.org/reference/dot-check_obs_and_pred.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check observations and predictions are compatible — .check_obs_and_pred","text":"NULL, invisibly","code":""},{"path":"https://baselinenowcast.epinowcast.org/reference/dot-extract_predictions.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract from one matrix only elements that are missing in another — .extract_predictions","title":"Extract from one matrix only elements that are missing in another — .extract_predictions","text":"Extract one matrix elements missing another","code":""},{"path":"https://baselinenowcast.epinowcast.org/reference/dot-extract_predictions.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract from one matrix only elements that are missing in another — .extract_predictions","text":"","code":".extract_predictions(point_nowcast_matrix, reporting_triangle)"},{"path":"https://baselinenowcast.epinowcast.org/reference/dot-extract_predictions.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract from one matrix only elements that are missing in another — .extract_predictions","text":"point_nowcast_matrix Matrix point nowcast predictions observations, rows representing reference times columns representing delays. reporting_triangle Matrix reporting triangle, rows representing time points reference columns representing delays. Can reporting matrix incomplete reporting matrix. Can also ragged reporting triangle, multiple columns reported row. (e.g. weekly reporting daily data).","code":""},{"path":"https://baselinenowcast.epinowcast.org/reference/dot-extract_predictions.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract from one matrix only elements that are missing in another — .extract_predictions","text":"Matrix containing elements point_nowcast_matrix elements missing reporting_triangle","code":""},{"path":"https://baselinenowcast.epinowcast.org/reference/dot-filter_to_recent_horizons.html","id":null,"dir":"Reference","previous_headings":"","what":"Filter to recent horizons — .filter_to_recent_horizons","title":"Filter to recent horizons — .filter_to_recent_horizons","text":"Filter recent horizons","code":""},{"path":"https://baselinenowcast.epinowcast.org/reference/dot-filter_to_recent_horizons.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Filter to recent horizons — .filter_to_recent_horizons","text":"","code":".filter_to_recent_horizons(mat, n_possible_horizons)"},{"path":"https://baselinenowcast.epinowcast.org/reference/dot-filter_to_recent_horizons.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Filter to recent horizons — .filter_to_recent_horizons","text":"mat Matrix containing rows n_possible_horizons Number rows want starting final row","code":""},{"path":"https://baselinenowcast.epinowcast.org/reference/dot-filter_to_recent_horizons.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Filter to recent horizons — .filter_to_recent_horizons","text":"bottom_matrix Matrix containing last n_possible_horizons rows matrix.","code":""},{"path":"https://baselinenowcast.epinowcast.org/reference/dot-handle_neg_vals.html","id":null,"dir":"Reference","previous_headings":"","what":"Handle negative values in the reporting triangle Takes in a reporting triangle and returns a matrix in the same format as the input triangle, but with negative values of reporting handled via passing them to the subsequent days (from longer delay to shorter). This code was adapted from code written (under an MIT license) by the Karlsruhe Institute of Technology RESPINOW German Hospitalization Nowcasting Hub. Modified from https://github.com/KITmetricslab/RESPINOW-Hub/blob/main/code/baseline/functions.R #nolint — .handle_neg_vals","title":"Handle negative values in the reporting triangle Takes in a reporting triangle and returns a matrix in the same format as the input triangle, but with negative values of reporting handled via passing them to the subsequent days (from longer delay to shorter). This code was adapted from code written (under an MIT license) by the Karlsruhe Institute of Technology RESPINOW German Hospitalization Nowcasting Hub. Modified from https://github.com/KITmetricslab/RESPINOW-Hub/blob/main/code/baseline/functions.R #nolint — .handle_neg_vals","text":"Handle negative values reporting triangle Takes reporting triangle returns matrix format input triangle, negative values reporting handled via passing subsequent days (longer delay shorter). code adapted code written (MIT license) Karlsruhe Institute Technology RESPINOW German Hospitalization Nowcasting Hub. Modified https://github.com/KITmetricslab/RESPINOW-Hub/blob/main/code/baseline/functions.R #nolint","code":""},{"path":"https://baselinenowcast.epinowcast.org/reference/dot-handle_neg_vals.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Handle negative values in the reporting triangle Takes in a reporting triangle and returns a matrix in the same format as the input triangle, but with negative values of reporting handled via passing them to the subsequent days (from longer delay to shorter). This code was adapted from code written (under an MIT license) by the Karlsruhe Institute of Technology RESPINOW German Hospitalization Nowcasting Hub. Modified from https://github.com/KITmetricslab/RESPINOW-Hub/blob/main/code/baseline/functions.R #nolint — .handle_neg_vals","text":"","code":".handle_neg_vals(triangle)"},{"path":"https://baselinenowcast.epinowcast.org/reference/dot-handle_neg_vals.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Handle negative values in the reporting triangle Takes in a reporting triangle and returns a matrix in the same format as the input triangle, but with negative values of reporting handled via passing them to the subsequent days (from longer delay to shorter). This code was adapted from code written (under an MIT license) by the Karlsruhe Institute of Technology RESPINOW German Hospitalization Nowcasting Hub. Modified from https://github.com/KITmetricslab/RESPINOW-Hub/blob/main/code/baseline/functions.R #nolint — .handle_neg_vals","text":"triangle Matrix reporting triangle, rows representing time points reference columns representing delays.","code":""},{"path":"https://baselinenowcast.epinowcast.org/reference/dot-handle_neg_vals.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Handle negative values in the reporting triangle Takes in a reporting triangle and returns a matrix in the same format as the input triangle, but with negative values of reporting handled via passing them to the subsequent days (from longer delay to shorter). This code was adapted from code written (under an MIT license) by the Karlsruhe Institute of Technology RESPINOW German Hospitalization Nowcasting Hub. Modified from https://github.com/KITmetricslab/RESPINOW-Hub/blob/main/code/baseline/functions.R #nolint — .handle_neg_vals","text":"Matrix positive integers negative values reporting handled via passing subsequent days delay.","code":""},{"path":"https://baselinenowcast.epinowcast.org/reference/dot-safelydoesit.html","id":null,"dir":"Reference","previous_headings":"","what":"Safe iterator — .safelydoesit","title":"Safe iterator — .safelydoesit","text":"Safe iterator","code":""},{"path":"https://baselinenowcast.epinowcast.org/reference/dot-safelydoesit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Safe iterator — .safelydoesit","text":"","code":".safelydoesit(fun)"},{"path":"https://baselinenowcast.epinowcast.org/reference/dot-safelydoesit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Safe iterator — .safelydoesit","text":"fun Function wrap around","code":""},{"path":"https://baselinenowcast.epinowcast.org/reference/dot-safelydoesit.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Safe iterator — .safelydoesit","text":"Function return NULL error occurs","code":""},{"path":"https://baselinenowcast.epinowcast.org/reference/dot-validate_delay_and_triangle.html","id":null,"dir":"Reference","previous_headings":"","what":"Validate triangle to nowcast and delay PMF together Various checks to make sure that the reporting triangle and the delay PMF passed in to apply_delay() are formatted properly and compatible. — .validate_delay_and_triangle","title":"Validate triangle to nowcast and delay PMF together Various checks to make sure that the reporting triangle and the delay PMF passed in to apply_delay() are formatted properly and compatible. — .validate_delay_and_triangle","text":"Validate triangle nowcast delay PMF together Various checks make sure reporting triangle  delay PMF passed apply_delay() formatted properly compatible.","code":""},{"path":"https://baselinenowcast.epinowcast.org/reference/dot-validate_delay_and_triangle.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Validate triangle to nowcast and delay PMF together Various checks to make sure that the reporting triangle and the delay PMF passed in to apply_delay() are formatted properly and compatible. — .validate_delay_and_triangle","text":"","code":".validate_delay_and_triangle(triangle, delay_pmf)"},{"path":"https://baselinenowcast.epinowcast.org/reference/dot-validate_delay_and_triangle.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Validate triangle to nowcast and delay PMF together Various checks to make sure that the reporting triangle and the delay PMF passed in to apply_delay() are formatted properly and compatible. — .validate_delay_and_triangle","text":"triangle Matrix values rows indicating time points columns indicating delays. delay_pmf Vector length number delays indicating probability case reported given delay.","code":""},{"path":"https://baselinenowcast.epinowcast.org/reference/dot-validate_delay_and_triangle.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Validate triangle to nowcast and delay PMF together Various checks to make sure that the reporting triangle and the delay PMF passed in to apply_delay() are formatted properly and compatible. — .validate_delay_and_triangle","text":"NULL, invisibly","code":""},{"path":"https://baselinenowcast.epinowcast.org/reference/dot-validate_triangle.html","id":null,"dir":"Reference","previous_headings":"","what":"Validate triangle Various checks to make sure that the reporting triangle passed in to estimate_delay() is formatted properly. — .validate_triangle","title":"Validate triangle Various checks to make sure that the reporting triangle passed in to estimate_delay() is formatted properly. — .validate_triangle","text":"Validate triangle Various checks make sure reporting triangle passed estimate_delay() formatted properly.","code":""},{"path":"https://baselinenowcast.epinowcast.org/reference/dot-validate_triangle.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Validate triangle Various checks to make sure that the reporting triangle passed in to estimate_delay() is formatted properly. — .validate_triangle","text":"","code":".validate_triangle(   triangle,   max_delay = ncol(triangle) - 1,   n = nrow(triangle) )"},{"path":"https://baselinenowcast.epinowcast.org/reference/dot-validate_triangle.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Validate triangle Various checks to make sure that the reporting triangle passed in to estimate_delay() is formatted properly. — .validate_triangle","text":"max_delay Integer indicating maximum delay estimate, units delay. default use whole reporting triangle, ncol(reporting_triangle) -1. n Integer indicating number reference times (observations) used estimate reporting delay, always starting recent reporting delay. default use whole reporting triangle, nrow(reporting_triangle)","code":""},{"path":"https://baselinenowcast.epinowcast.org/reference/dot-validate_triangle.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Validate triangle Various checks to make sure that the reporting triangle passed in to estimate_delay() is formatted properly. — .validate_triangle","text":"NULL, invisibly","code":""},{"path":"https://baselinenowcast.epinowcast.org/reference/estimate_delay.html","id":null,"dir":"Reference","previous_headings":"","what":"Estimate a delay distribution from a reporting triangle — estimate_delay","title":"Estimate a delay distribution from a reporting triangle — estimate_delay","text":"Provides estimate reporting delay function delay, based reporting triangle specified maximum delay number reference date observations used estimation. point estimate delay computed empirically, using iterative algorithm starting recent observations. code adapted code written (MIT license) Karlsruhe Institute Technology RESPINOW German Hospitalization Nowcasting Hub. Modified : https://github.com/KITmetricslab/RESPINOW-Hub/blob/7cce3ae2728116e8c8cc0e4ab29074462c24650e/code/baseline/functions.R#L55 #nolint","code":""},{"path":"https://baselinenowcast.epinowcast.org/reference/estimate_delay.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Estimate a delay distribution from a reporting triangle — estimate_delay","text":"","code":"estimate_delay(   reporting_triangle,   max_delay = ncol(reporting_triangle) - 1,   n = nrow(reporting_triangle) )"},{"path":"https://baselinenowcast.epinowcast.org/reference/estimate_delay.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Estimate a delay distribution from a reporting triangle — estimate_delay","text":"reporting_triangle Matrix reporting triangle, rows representing time points reference columns representing delays. Can reporting matrix incomplete reporting matrix. Can also ragged reporting triangle, multiple columns reported row. (e.g. weekly reporting daily data). max_delay Integer indicating maximum delay estimate, units delay. default use whole reporting triangle, ncol(reporting_triangle) -1. n Integer indicating number reference times (observations) used estimate reporting delay, always starting recent reporting delay. default use whole reporting triangle, nrow(reporting_triangle)","code":""},{"path":"https://baselinenowcast.epinowcast.org/reference/estimate_delay.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Estimate a delay distribution from a reporting triangle — estimate_delay","text":"Vector indexed 0 length max_delay + 1 columns indicating point estimate empirical probability mass delay.","code":""},{"path":"https://baselinenowcast.epinowcast.org/reference/estimate_delay.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Estimate a delay distribution from a reporting triangle — estimate_delay","text":"","code":"triangle <- matrix(   c(     80, 50, 25, 10,     100, 50, 30, 20,     90, 45, 25, NA,     80, 40, NA, NA,     70, NA, NA, NA   ),   nrow = 5,   byrow = TRUE ) delay_pmf <- estimate_delay(   reporting_triangle = triangle,   max_delay = 3,   n = 4 ) delay_pmf #> [1] 0.5029412 0.2514706 0.1455882 0.1000000"},{"path":"https://baselinenowcast.epinowcast.org/reference/estimate_uncertainty.html","id":null,"dir":"Reference","previous_headings":"","what":"Estimate uncertainty parameters — estimate_uncertainty","title":"Estimate uncertainty parameters — estimate_uncertainty","text":"function ingests list point nowcast matrices corresponding list truncated reporting matrices uses estimate vector uncertainty parameters observations estimates horizon, starting 0 max delay number horizons.","code":""},{"path":"https://baselinenowcast.epinowcast.org/reference/estimate_uncertainty.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Estimate uncertainty parameters — estimate_uncertainty","text":"","code":"estimate_uncertainty(   point_nowcast_matrices,   truncated_reporting_triangles,   retro_reporting_triangles,   n = length(point_nowcast_matrices),   uncertainty_model = fit_by_horizon,   ref_time_aggregator = identity,   delay_aggregator = function(x) rowSums(x, na.rm = TRUE) )"},{"path":"https://baselinenowcast.epinowcast.org/reference/estimate_uncertainty.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Estimate uncertainty parameters — estimate_uncertainty","text":"point_nowcast_matrices List point nowcast matrices rows represent reference time points columns represent delays. truncated_reporting_triangles List truncated reporting matrices, containing observations latest reference time. Elements list paired elements point_nowcast_matrices. retro_reporting_triangles List n truncated reporting triangle matrices many rows available given truncation. n Integer indicating number reporting matrices use estimate uncertainty parameters. uncertainty_model Function ingests matrix observations matrix predictions returns vector can used apply uncertainty using error model. Default fit_by_horizon arguments obs matrix observations pred matrix predictions fits column (horizon) negative binomial observation model default. user can specify different fitting model replacing fit_model argument fit_by_horizon. ref_time_aggregator Function operates along rows (reference times) retrospective point nowcast matrix aggregated across columns (delays). Default identity aggregate across reference times. delay_aggregator Function operates along columns (delays) retrospective point nowcast matrix aggregated across reference times. Default function(x) rowSums(x, na.rm = TRUE).","code":""},{"path":"https://baselinenowcast.epinowcast.org/reference/estimate_uncertainty.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Estimate uncertainty parameters — estimate_uncertainty","text":"uncertainty_params Vector length number horizons, element representing estimate uncertainty parameter horizon. specific parameter type depends chosen error model.","code":""},{"path":"https://baselinenowcast.epinowcast.org/reference/estimate_uncertainty.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Estimate uncertainty parameters — estimate_uncertainty","text":"","code":"triangle <- matrix(   c(     78, 40, 24, 9,     65, 46, 21, 7,     70, 40, 20, 5,     80, 50, 10, 10,     100, 40, 31, 20,     95, 45, 21, NA,     82, 42, NA, NA,     70, NA, NA, NA   ),   nrow = 8,   byrow = TRUE )  trunc_rts <- truncate_triangles(triangle, n = 3) retro_rts <- construct_triangles(trunc_rts)  retro_nowcasts <- fill_triangles(retro_rts, n = 5) # Estimate dispersion parameters using default (negative binomial error # model on the sums) disp_params <- estimate_uncertainty(   point_nowcast_matrices = retro_nowcasts,   truncated_reporting_triangles = trunc_rts,   retro_reporting_triangles = retro_rts ) disp_params #> [1] 999.999942   4.995964   3.937042  # Estimate dispersion parameters from rolling sum on the reference times if (requireNamespace(\"zoo\", quietly = TRUE)) {   disp_params_agg <- estimate_uncertainty(     point_nowcast_matrices = retro_nowcasts,     truncated_reporting_triangles = trunc_rts,     retro_reporting_triangles = retro_rts,     ref_time_aggregator = function(x) zoo::rollsum(x, k = 2, align = \"right\")   )   disp_params_agg } #> [1] 333.84093  10.32929  16.76673"},{"path":"https://baselinenowcast.epinowcast.org/reference/fill_triangle.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate point nowcast — fill_triangle","title":"Generate point nowcast — fill_triangle","text":"function ingests reporting triangle matrix optionally, delay distribution, returns completed reporting square represents point nowcast. delay distribution specified, used generate nowcast, otherwise, delay distribution estimated reporting_triangle.","code":""},{"path":"https://baselinenowcast.epinowcast.org/reference/fill_triangle.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate point nowcast — fill_triangle","text":"","code":"fill_triangle(   reporting_triangle,   max_delay = ncol(reporting_triangle) - 1,   n = nrow(reporting_triangle),   delay_pmf = NULL )"},{"path":"https://baselinenowcast.epinowcast.org/reference/fill_triangle.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate point nowcast — fill_triangle","text":"reporting_triangle Matrix reporting triangle, rows representing time points reference columns representing delays. Can reporting matrix incomplete reporting matrix. Can also ragged reporting triangle, multiple columns reported row. (e.g. weekly reporting daily data). max_delay Integer indicating maximum delay estimate, units delay. default use whole reporting triangle, ncol(reporting_triangle) -1. n Integer indicating number reference times (observations) used estimate reporting delay, always starting recent reporting delay. default use whole reporting triangle, nrow(reporting_triangle) delay_pmf Vector delays assumed indexed starting first delay column reporting_triangle. Default NULL, estimate delay reporting_triangle.","code":""},{"path":"https://baselinenowcast.epinowcast.org/reference/fill_triangle.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate point nowcast — fill_triangle","text":"point_nowcast_matrix Matrix number rows columns reporting_triangle missing values filled point estimates.","code":""},{"path":"https://baselinenowcast.epinowcast.org/reference/fill_triangle.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate point nowcast — fill_triangle","text":"","code":"triangle <- matrix(   c(     80, 50, 25, 10,     100, 50, 30, 20,     90, 45, 25, NA,     80, 40, NA, NA,     70, NA, NA, NA   ),   nrow = 5,   byrow = TRUE ) point_nowcast_matrix <- fill_triangle(   reporting_triangle = triangle ) point_nowcast_matrix #>      [,1]     [,2]     [,3]     [,4] #> [1,]   80 50.00000 25.00000 10.00000 #> [2,]  100 50.00000 30.00000 20.00000 #> [3,]   90 45.00000 25.00000 14.33572 #> [4,]   80 40.00000 23.17697 12.82918 #> [5,]   70 37.26249 20.72155 11.46862"},{"path":"https://baselinenowcast.epinowcast.org/reference/fill_triangles.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate retrospective nowcasts — fill_triangles","title":"Generate retrospective nowcasts — fill_triangles","text":"function ingests list incomplete reporting triangles generates list point nowcast matrices, based delay estimated triangle corresponding delay passed . uses specified n number reference times estimate delay retrospective reporting triangle.","code":""},{"path":"https://baselinenowcast.epinowcast.org/reference/fill_triangles.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate retrospective nowcasts — fill_triangles","text":"","code":"fill_triangles(   retro_reporting_triangles,   max_delay = min(sapply(retro_reporting_triangles, ncol)) - 1,   n = min(sapply(retro_reporting_triangles, nrow)),   delay_pmf = NULL )"},{"path":"https://baselinenowcast.epinowcast.org/reference/fill_triangles.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate retrospective nowcasts — fill_triangles","text":"retro_reporting_triangles List n truncated reporting triangle matrices many rows available given truncation. max_delay Integer indicating maximum delay estimate, units delay. default use whole reporting triangle, ncol(reporting_triangle) -1. n Integer indicating number reference times (number rows) use estimate delay distribution reporting triangle. Default minimum number rows matrices list_of_rts. delay_pmf Vector list vectors delays assumed indexed starting first delay column matrices retro_reporting_triangles. list, must length retro_reporting_triangles, elements aligning. Default NULL","code":""},{"path":"https://baselinenowcast.epinowcast.org/reference/fill_triangles.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate retrospective nowcasts — fill_triangles","text":"point_nowcast_matrices List number elements input retro_reporting_trianglesbut reporting triangle filled based delay estimated reporting triangle.","code":""},{"path":"https://baselinenowcast.epinowcast.org/reference/fill_triangles.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate retrospective nowcasts — fill_triangles","text":"","code":"triangle <- matrix(   c(     65, 46, 21, 7,     70, 40, 20, 5,     80, 50, 10, 10,     100, 40, 31, 20,     95, 45, 21, NA,     82, 42, NA, NA,     70, NA, NA, NA   ),   nrow = 7,   byrow = TRUE )  trunc_rts <- truncate_triangles(triangle) retro_rts <- construct_triangles(trunc_rts) retro_pt_nowcast_mat_list <- fill_triangles(retro_rts) retro_pt_nowcast_mat_list[1:3] #> [[1]] #>      [,1]     [,2]     [,3]     [,4] #> [1,]   65 46.00000 21.00000  7.00000 #> [2,]   70 40.00000 20.00000  5.00000 #> [3,]   80 50.00000 10.00000 10.00000 #> [4,]  100 40.00000 31.00000 12.21905 #> [5,]   95 45.00000 21.28807 11.52534 #> [6,]   82 40.47865 18.62742 10.08377 #>  #> [[2]] #>      [,1]     [,2]    [,3]     [,4] #> [1,]   65 46.00000 21.0000 7.000000 #> [2,]   70 40.00000 20.0000 5.000000 #> [3,]   80 50.00000 10.0000 5.386040 #> [4,]  100 40.00000 17.5180 6.059809 #> [5,]   95 49.62717 18.0964 6.260023 #>  #> [[3]] #>      [,1]   [,2]     [,3]      [,4] #> [1,]   65 46.000 21.00000  7.000000 #> [2,]   70 40.000 20.00000  6.896610 #> [3,]   80 50.000 24.15456  8.177534 #> [4,]  100 63.578 30.38396 10.288532 #>"},{"path":"https://baselinenowcast.epinowcast.org/reference/fit_by_horizon.html","id":null,"dir":"Reference","previous_headings":"","what":"Helper function that fits its each column of the matrix (horizon) to an observation model. — fit_by_horizon","title":"Helper function that fits its each column of the matrix (horizon) to an observation model. — fit_by_horizon","text":"Helper function fits column matrix (horizon) observation model.","code":""},{"path":"https://baselinenowcast.epinowcast.org/reference/fit_by_horizon.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Helper function that fits its each column of the matrix (horizon) to an observation model. — fit_by_horizon","text":"","code":"fit_by_horizon(obs, pred, fit_model = fit_nb)"},{"path":"https://baselinenowcast.epinowcast.org/reference/fit_by_horizon.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Helper function that fits its each column of the matrix (horizon) to an observation model. — fit_by_horizon","text":"obs Matrix vector observations. pred Matrix vector predictions. fit_model Function ingests observations expectations returns uncertainty parameters, default fit_nb.","code":""},{"path":"https://baselinenowcast.epinowcast.org/reference/fit_by_horizon.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Helper function that fits its each column of the matrix (horizon) to an observation model. — fit_by_horizon","text":"Vector uncertainty parameters length number columns obs matrix.","code":""},{"path":"https://baselinenowcast.epinowcast.org/reference/fit_by_horizon.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Helper function that fits its each column of the matrix (horizon) to an observation model. — fit_by_horizon","text":"","code":"obs <- matrix(   c(     5, 6, 2,     1, 4, 2,     8, 4, 2   ),   nrow = 3,   byrow = TRUE ) pred <- matrix(   c(     4.2, 5.2, 1.8,     0.7, 3.5, 3.4,     7.3, 4.1, 1.2   ),   nrow = 3,   byrow = TRUE ) disp <- fit_by_horizon(obs = obs, pred = pred) disp #> [1] 999.9999 999.9999 999.9999"},{"path":"https://baselinenowcast.epinowcast.org/reference/fit_nb.html","id":null,"dir":"Reference","previous_headings":"","what":"Fit a negative binomial to a vector of observations and expectations — fit_nb","title":"Fit a negative binomial to a vector of observations and expectations — fit_nb","text":"Takes vector observations vector expectations performs MLE estimator estimate dispersion parameter negative binomial. code adapted code written (MIT license) Karlsruhe Institute Technology RESPINOW German Hospitalization Nowcasting Hub. Modified : https://github.com/KITmetricslab/RESPINOW-Hub/blob/7fab4dce7b559c3076ab643cf22048cb5fb84cc2/code/baseline/functions.R#L404 #nolint","code":""},{"path":"https://baselinenowcast.epinowcast.org/reference/fit_nb.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fit a negative binomial to a vector of observations and expectations — fit_nb","text":"","code":"fit_nb(x, mu)"},{"path":"https://baselinenowcast.epinowcast.org/reference/fit_nb.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fit a negative binomial to a vector of observations and expectations — fit_nb","text":"x Vector observed values. mu Vector expected values.","code":""},{"path":"https://baselinenowcast.epinowcast.org/reference/fit_nb.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fit a negative binomial to a vector of observations and expectations — fit_nb","text":"maximum likelihood estimate dispersion","code":""},{"path":"https://baselinenowcast.epinowcast.org/reference/fit_nb.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fit a negative binomial to a vector of observations and expectations — fit_nb","text":"","code":"obs <- c(4, 8, 10) pred <- c(3.1, 7.2, 11) disp <- fit_nb(obs, pred) disp #> [1] 999.9999"},{"path":"https://baselinenowcast.epinowcast.org/reference/sample_nb.html","id":null,"dir":"Reference","previous_headings":"","what":"Sample from negative binomial model given a set of predictions — sample_nb","title":"Sample from negative binomial model given a set of predictions — sample_nb","text":"Sample negative binomial model given set predictions","code":""},{"path":"https://baselinenowcast.epinowcast.org/reference/sample_nb.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sample from negative binomial model given a set of predictions — sample_nb","text":"","code":"sample_nb(pred, uncertainty_params)"},{"path":"https://baselinenowcast.epinowcast.org/reference/sample_nb.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Sample from negative binomial model given a set of predictions — sample_nb","text":"pred Vector predictions. uncertainty_params Vector uncertainty parameters.","code":""},{"path":"https://baselinenowcast.epinowcast.org/reference/sample_nb.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Sample from negative binomial model given a set of predictions — sample_nb","text":"sampled_pred Object dimensions pred representing single draw negative binomial distribution specified uncertainty params.","code":""},{"path":"https://baselinenowcast.epinowcast.org/reference/sample_nb.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Sample from negative binomial model given a set of predictions — sample_nb","text":"","code":"pred <- c(3.2, 4.6) sampled_preds <- sample_nb(pred,   uncertainty_params = c(50, 100) ) sampled_preds #> [1] 8 5"},{"path":"https://baselinenowcast.epinowcast.org/reference/sample_nowcast.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate a single draw of a nowcast combining observed and predicted values — sample_nowcast","title":"Generate a single draw of a nowcast combining observed and predicted values — sample_nowcast","text":"Generate single draw nowcast combining observed predicted values","code":""},{"path":"https://baselinenowcast.epinowcast.org/reference/sample_nowcast.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate a single draw of a nowcast combining observed and predicted values — sample_nowcast","text":"","code":"sample_nowcast(   point_nowcast_matrix,   reporting_triangle,   uncertainty_params,   uncertainty_sampler = sample_nb,   ref_time_aggregator = identity,   delay_aggregator = function(x) rowSums(x, na.rm = TRUE) )"},{"path":"https://baselinenowcast.epinowcast.org/reference/sample_nowcast.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate a single draw of a nowcast combining observed and predicted values — sample_nowcast","text":"point_nowcast_matrix Matrix point nowcast predictions observations, rows representing reference times columns representing delays. reporting_triangle Matrix reporting triangle, rows representing time points reference columns representing delays. Can reporting matrix incomplete reporting matrix. Can also ragged reporting triangle, multiple columns reported row. (e.g. weekly reporting daily data). uncertainty_params Vector uncertainty parameters ordered horizon 1 maximum horizon. Note reversed internally match ordering point_nowcast_matrix (horizon 1 last entry). uncertainty_sampler Function ingests vector matrix predictions vector uncertainty parameters generates draws observation model. Default sample_nb expects arguments pred vector predictions uncertainty parameters corresponding vector uncertainty parameters, draws negative binomial element vector. ref_time_aggregator Function operates along rows (reference times) retrospective point nowcast matrix aggregated across columns (delays). Default identity aggregate across reference times. delay_aggregator Function operates along columns (delays) retrospective point nowcast matrix aggregated across reference times. Default function(x) rowSums(x, na.rm = TRUE).","code":""},{"path":"https://baselinenowcast.epinowcast.org/reference/sample_nowcast.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate a single draw of a nowcast combining observed and predicted values — sample_nowcast","text":"Vector predicted counts reference time based combining observed counts predicted counts unobserved elements.","code":""},{"path":"https://baselinenowcast.epinowcast.org/reference/sample_nowcast.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate a single draw of a nowcast combining observed and predicted values — sample_nowcast","text":"","code":"point_nowcast_matrix <- matrix(   c(     80, 50, 25, 10,     100, 50, 30, 20,     90, 45, 25, 16.8,     80, 40, 21.2, 19.5,     70, 34.5, 15.4, 9.1   ),   nrow = 5,   byrow = TRUE ) reporting_triangle <- construct_triangle(point_nowcast_matrix) disp <- c(0.8, 12.4, 9.1) nowcast_draw <- sample_nowcast(   point_nowcast_matrix,   reporting_triangle,   disp ) nowcast_draw #>      [,1] #> [1,]  165 #> [2,]  200 #> [3,]  168 #> [4,]  168 #> [5,]   85"},{"path":"https://baselinenowcast.epinowcast.org/reference/sample_nowcasts.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate multiple draws of a nowcast combining observed and predicted values — sample_nowcasts","title":"Generate multiple draws of a nowcast combining observed and predicted values — sample_nowcasts","text":"Generate multiple draws nowcast combining observed predicted values","code":""},{"path":"https://baselinenowcast.epinowcast.org/reference/sample_nowcasts.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate multiple draws of a nowcast combining observed and predicted values — sample_nowcasts","text":"","code":"sample_nowcasts(   point_nowcast_matrix,   reporting_triangle,   uncertainty_params,   draws = 1000,   ... )"},{"path":"https://baselinenowcast.epinowcast.org/reference/sample_nowcasts.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate multiple draws of a nowcast combining observed and predicted values — sample_nowcasts","text":"point_nowcast_matrix Matrix point nowcast predictions observations, rows representing reference times columns representing delays. reporting_triangle Matrix reporting triangle, rows representing time points reference columns representing delays. Can reporting matrix incomplete reporting matrix. Can also ragged reporting triangle, multiple columns reported row. (e.g. weekly reporting daily data). uncertainty_params Vector uncertainty parameters ordered horizon 1 maximum horizon. Note reversed internally match ordering point_nowcast_matrix (horizon 1 last entry). draws Integer indicating number draws predicted nowcast vector generate. Default 1000. ... Additional arguments passed sample_nowcast.","code":""},{"path":"https://baselinenowcast.epinowcast.org/reference/sample_nowcasts.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate multiple draws of a nowcast combining observed and predicted values — sample_nowcasts","text":"Dataframe containing information multiple draws columns reference time (time), predicted counts (pred_count), draw number (draw).","code":""},{"path":"https://baselinenowcast.epinowcast.org/reference/sample_nowcasts.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate multiple draws of a nowcast combining observed and predicted values — sample_nowcasts","text":"","code":"point_nowcast_matrix <- matrix(   c(     80, 50, 25, 10,     100, 50, 30, 20,     90, 45, 25, 16.8,     80, 40, 21.2, 19.5,     70, 34.5, 15.4, 9.1   ),   nrow = 5,   byrow = TRUE ) reporting_triangle <- construct_triangle(point_nowcast_matrix) disp <- c(0.8, 12.4, 9.1) nowcast_draws <- sample_nowcasts(   point_nowcast_matrix,   reporting_triangle,   disp,   draws = 5 ) nowcast_draws #>    pred_count time draw #> 1         165    1    1 #> 2         200    2    1 #> 3         190    3    1 #> 4         150    4    1 #> 5         150    5    1 #> 6         165    1    2 #> 7         200    2    2 #> 8         174    3    2 #> 9         172    4    2 #> 10        116    5    2 #> 11        165    1    3 #> 12        200    2    3 #> 13        162    3    3 #> 14        153    4    3 #> 15         88    5    3 #> 16        165    1    4 #> 17        200    2    4 #> 18        179    3    4 #> 19        148    4    4 #> 20        151    5    4 #> 21        165    1    5 #> 22        200    2    5 #> 23        176    3    5 #> 24        150    4    5 #> 25        117    5    5"},{"path":"https://baselinenowcast.epinowcast.org/reference/sample_prediction.html","id":null,"dir":"Reference","previous_headings":"","what":"Get a draw of only the predicted elements of the nowcast vector — sample_prediction","title":"Get a draw of only the predicted elements of the nowcast vector — sample_prediction","text":"Get draw predicted elements nowcast vector","code":""},{"path":"https://baselinenowcast.epinowcast.org/reference/sample_prediction.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get a draw of only the predicted elements of the nowcast vector — sample_prediction","text":"","code":"sample_prediction(   point_nowcast_matrix,   reporting_triangle,   uncertainty_params,   uncertainty_sampler = sample_nb,   ref_time_aggregator = identity,   delay_aggregator = function(x) rowSums(x, na.rm = TRUE) )"},{"path":"https://baselinenowcast.epinowcast.org/reference/sample_prediction.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get a draw of only the predicted elements of the nowcast vector — sample_prediction","text":"point_nowcast_matrix Matrix point nowcast predictions observations, rows representing reference times columns representing delays. reporting_triangle Matrix reporting triangle, rows representing time points reference columns representing delays. Can reporting matrix incomplete reporting matrix. Can also ragged reporting triangle, multiple columns reported row. (e.g. weekly reporting daily data). uncertainty_params Vector uncertainty parameters ordered horizon 1 maximum horizon. Note reversed internally match ordering point_nowcast_matrix (horizon 1 last entry). uncertainty_sampler Function ingests vector matrix predictions vector uncertainty parameters generates draws observation model. Default sample_nb expects arguments pred vector predictions uncertainty parameters corresponding vector uncertainty parameters, draws negative binomial element vector. ref_time_aggregator Function operates along rows (reference times) retrospective point nowcast matrix aggregated across columns (delays). Default identity aggregate across reference times. delay_aggregator Function operates along columns (delays) retrospective point nowcast matrix aggregated across reference times. Default function(x) rowSums(x, na.rm = TRUE).","code":""},{"path":"https://baselinenowcast.epinowcast.org/reference/sample_prediction.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get a draw of only the predicted elements of the nowcast vector — sample_prediction","text":"Vector predicted draws reference time, reference times input point_nowcast_matrix.","code":""},{"path":"https://baselinenowcast.epinowcast.org/reference/sample_prediction.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get a draw of only the predicted elements of the nowcast vector — sample_prediction","text":"","code":"point_nowcast_matrix <- matrix(   c(     80, 50, 25, 10,     100, 50, 30, 20,     90, 45, 25, 16.8,     80, 40, 21.2, 19.5,     70, 34.5, 15.4, 9.1   ),   nrow = 5,   byrow = TRUE ) reporting_triangle <- construct_triangle(point_nowcast_matrix) disp <- c(0.8, 12.4, 9.1) nowcast_pred_draw <- sample_prediction(   point_nowcast_matrix,   reporting_triangle,   disp ) nowcast_pred_draw #>      [,1] #> [1,]    0 #> [2,]    0 #> [3,]   22 #> [4,]   25 #> [5,]   23  # Get draws on the rolling sum if (requireNamespace(\"zoo\", quietly = TRUE)) {   nowcast_pred_draw_agg <- sample_prediction(     point_nowcast_matrix,     reporting_triangle,     disp,     ref_time_aggregator = function(x) zoo::rollsum(x, k = 2, align = \"right\")   )   nowcast_pred_draw_agg } #>      [,1] #> [1,]    0 #> [2,]   66 #> [3,]   96 #> [4,]  152"},{"path":"https://baselinenowcast.epinowcast.org/reference/sample_predictions.html","id":null,"dir":"Reference","previous_headings":"","what":"Get a dataframe of multiple draws of only the predicted elements of the nowcast vector — sample_predictions","title":"Get a dataframe of multiple draws of only the predicted elements of the nowcast vector — sample_predictions","text":"Get dataframe multiple draws predicted elements nowcast vector","code":""},{"path":"https://baselinenowcast.epinowcast.org/reference/sample_predictions.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get a dataframe of multiple draws of only the predicted elements of the nowcast vector — sample_predictions","text":"","code":"sample_predictions(   point_nowcast_matrix,   reporting_triangle,   uncertainty_params,   draws = 1000,   ... )"},{"path":"https://baselinenowcast.epinowcast.org/reference/sample_predictions.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get a dataframe of multiple draws of only the predicted elements of the nowcast vector — sample_predictions","text":"point_nowcast_matrix Matrix point nowcast predictions observations, rows representing reference times columns representing delays. reporting_triangle Matrix reporting triangle, rows representing time points reference columns representing delays. Can reporting matrix incomplete reporting matrix. Can also ragged reporting triangle, multiple columns reported row. (e.g. weekly reporting daily data). uncertainty_params Vector uncertainty parameters ordered horizon 1 maximum horizon. Note reversed internally match ordering point_nowcast_matrix (horizon 1 last entry). draws Integer indicating number draws predicted nowcast vector generate. Default 1000. ... Additional arguments passed sample_prediction.","code":""},{"path":"https://baselinenowcast.epinowcast.org/reference/sample_predictions.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get a dataframe of multiple draws of only the predicted elements of the nowcast vector — sample_predictions","text":"Dataframe containing predicted point nowcast vectors indexed reference time (pred_count), reference time (time), draw index (draw).","code":""},{"path":"https://baselinenowcast.epinowcast.org/reference/sample_predictions.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get a dataframe of multiple draws of only the predicted elements of the nowcast vector — sample_predictions","text":"","code":"point_nowcast_matrix <- matrix(   c(     80, 50, 25, 10,     100, 50, 30, 20,     90, 45, 25, 16.8,     80, 40, 21.2, 19.5,     70, 34.5, 15.4, 9.1   ),   nrow = 5,   byrow = TRUE ) reporting_triangle <- construct_triangle(point_nowcast_matrix) disp <- c(0.8, 12.4, 9.1) nowcast_pred_draws <- sample_predictions(   point_nowcast_matrix,   reporting_triangle,   disp,   draws = 5 ) nowcast_pred_draws #>    pred_count time draw #> 1           0    1    1 #> 2           0    2    1 #> 3          28    3    1 #> 4          58    4    1 #> 5          17    5    1 #> 6           0    1    2 #> 7           0    2    2 #> 8          11    3    2 #> 9          41    4    2 #> 10         11    5    2 #> 11          0    1    3 #> 12          0    2    3 #> 13         16    3    3 #> 14         53    4    3 #> 15        195    5    3 #> 16          0    1    4 #> 17          0    2    4 #> 18          9    3    4 #> 19         68    4    4 #> 20         63    5    4 #> 21          0    1    5 #> 22          0    2    5 #> 23         15    3    5 #> 24         47    4    5 #> 25          2    5    5 # Get nowcast pred draws over rolling sum if (requireNamespace(\"zoo\", quietly = TRUE)) {   nowcast_pred_draws_rolling_df <- sample_predictions(     point_nowcast_matrix,     reporting_triangle,     disp,     500,     ref_time_aggregator = function(x) zoo::rollsum(x, k = 2, align = \"right\")   )   nowcast_pred_draws_rolling_df } #>      pred_count time draw #> 1            NA    1    1 #> 2             0    2    1 #> 3            43    3    1 #> 4           103    4    1 #> 5           118    5    1 #> 6            NA    1    2 #> 7             0    2    2 #> 8            22    3    2 #> 9            60    4    2 #> 10          110    5    2 #> 11           NA    1    3 #> 12            0    2    3 #> 13           34    3    3 #> 14           74    4    3 #> 15           39    5    3 #> 16           NA    1    4 #> 17            0    2    4 #> 18           46    3    4 #> 19           42    4    4 #> 20          101    5    4 #> 21           NA    1    5 #> 22            0    2    5 #> 23           16    3    5 #> 24           76    4    5 #> 25            1    5    5 #> 26           NA    1    6 #> 27            0    2    6 #> 28           23    3    6 #> 29           45    4    6 #> 30            2    5    6 #> 31           NA    1    7 #> 32            0    2    7 #> 33           37    3    7 #> 34          118    4    7 #> 35           18    5    7 #> 36           NA    1    8 #> 37            0    2    8 #> 38           13    3    8 #> 39          114    4    8 #> 40          866    5    8 #> 41           NA    1    9 #> 42            0    2    9 #> 43           57    3    9 #> 44           83    4    9 #> 45           39    5    9 #> 46           NA    1   10 #> 47            0    2   10 #> 48           34    3   10 #> 49           62    4   10 #> 50           75    5   10 #> 51           NA    1   11 #> 52            0    2   11 #> 53           22    3   11 #> 54           42    4   11 #> 55           93    5   11 #> 56           NA    1   12 #> 57            0    2   12 #> 58           56    3   12 #> 59           68    4   12 #> 60            8    5   12 #> 61           NA    1   13 #> 62            0    2   13 #> 63           27    3   13 #> 64           73    4   13 #> 65           41    5   13 #> 66           NA    1   14 #> 67            0    2   14 #> 68           16    3   14 #> 69           81    4   14 #> 70           48    5   14 #> 71           NA    1   15 #> 72            0    2   15 #> 73           35    3   15 #> 74           54    4   15 #> 75           77    5   15 #> 76           NA    1   16 #> 77            0    2   16 #> 78           49    3   16 #> 79          106    4   16 #> 80           30    5   16 #> 81           NA    1   17 #> 82            0    2   17 #> 83           34    3   17 #> 84           60    4   17 #> 85           15    5   17 #> 86           NA    1   18 #> 87            0    2   18 #> 88            9    3   18 #> 89           79    4   18 #> 90            8    5   18 #> 91           NA    1   19 #> 92            0    2   19 #> 93           22    3   19 #> 94          130    4   19 #> 95          576    5   19 #> 96           NA    1   20 #> 97            0    2   20 #> 98           48    3   20 #> 99           71    4   20 #> 100         463    5   20 #> 101          NA    1   21 #> 102           0    2   21 #> 103          46    3   21 #> 104          67    4   21 #> 105         118    5   21 #> 106          NA    1   22 #> 107           0    2   22 #> 108          22    3   22 #> 109         103    4   22 #> 110          20    5   22 #> 111          NA    1   23 #> 112           0    2   23 #> 113          28    3   23 #> 114          99    4   23 #> 115         327    5   23 #> 116          NA    1   24 #> 117           0    2   24 #> 118          39    3   24 #> 119          48    4   24 #> 120         135    5   24 #> 121          NA    1   25 #> 122           0    2   25 #> 123          40    3   25 #> 124          72    4   25 #> 125           9    5   25 #> 126          NA    1   26 #> 127           0    2   26 #> 128          48    3   26 #> 129          99    4   26 #> 130          10    5   26 #> 131          NA    1   27 #> 132           0    2   27 #> 133          29    3   27 #> 134         105    4   27 #> 135           4    5   27 #> 136          NA    1   28 #> 137           0    2   28 #> 138          46    3   28 #> 139          65    4   28 #> 140          51    5   28 #> 141          NA    1   29 #> 142           0    2   29 #> 143          32    3   29 #> 144          54    4   29 #> 145         149    5   29 #> 146          NA    1   30 #> 147           0    2   30 #> 148          42    3   30 #> 149          62    4   30 #> 150         430    5   30 #> 151          NA    1   31 #> 152           0    2   31 #> 153          33    3   31 #> 154          71    4   31 #> 155         520    5   31 #> 156          NA    1   32 #> 157           0    2   32 #> 158          29    3   32 #> 159          62    4   32 #> 160          23    5   32 #> 161          NA    1   33 #> 162           0    2   33 #> 163          25    3   33 #> 164          80    4   33 #> 165          91    5   33 #> 166          NA    1   34 #> 167           0    2   34 #> 168          39    3   34 #> 169          87    4   34 #> 170          44    5   34 #> 171          NA    1   35 #> 172           0    2   35 #> 173          24    3   35 #> 174          58    4   35 #> 175          15    5   35 #> 176          NA    1   36 #> 177           0    2   36 #> 178          28    3   36 #> 179          55    4   36 #> 180          10    5   36 #> 181          NA    1   37 #> 182           0    2   37 #> 183          52    3   37 #> 184          78    4   37 #> 185          39    5   37 #> 186          NA    1   38 #> 187           0    2   38 #> 188          23    3   38 #> 189          45    4   38 #> 190         312    5   38 #> 191          NA    1   39 #> 192           0    2   39 #> 193          45    3   39 #> 194         106    4   39 #> 195          96    5   39 #> 196          NA    1   40 #> 197           0    2   40 #> 198          23    3   40 #> 199          99    4   40 #> 200          98    5   40 #> 201          NA    1   41 #> 202           0    2   41 #> 203          37    3   41 #> 204          87    4   41 #> 205         172    5   41 #> 206          NA    1   42 #> 207           0    2   42 #> 208          50    3   42 #> 209          79    4   42 #> 210         124    5   42 #> 211          NA    1   43 #> 212           0    2   43 #> 213          29    3   43 #> 214          84    4   43 #> 215           3    5   43 #> 216          NA    1   44 #> 217           0    2   44 #> 218          31    3   44 #> 219          65    4   44 #> 220          40    5   44 #> 221          NA    1   45 #> 222           0    2   45 #> 223          54    3   45 #> 224          39    4   45 #> 225         220    5   45 #> 226          NA    1   46 #> 227           0    2   46 #> 228          39    3   46 #> 229         106    4   46 #> 230          48    5   46 #> 231          NA    1   47 #> 232           0    2   47 #> 233          44    3   47 #> 234          78    4   47 #> 235          52    5   47 #> 236          NA    1   48 #> 237           0    2   48 #> 238          29    3   48 #> 239         110    4   48 #> 240         117    5   48 #> 241          NA    1   49 #> 242           0    2   49 #> 243          37    3   49 #> 244          70    4   49 #> 245          25    5   49 #> 246          NA    1   50 #> 247           0    2   50 #> 248          28    3   50 #> 249          65    4   50 #> 250         499    5   50 #> 251          NA    1   51 #> 252           0    2   51 #> 253          47    3   51 #> 254          64    4   51 #> 255         148    5   51 #> 256          NA    1   52 #> 257           0    2   52 #> 258          38    3   52 #> 259          65    4   52 #> 260         230    5   52 #> 261          NA    1   53 #> 262           0    2   53 #> 263          42    3   53 #> 264          87    4   53 #> 265         315    5   53 #> 266          NA    1   54 #> 267           0    2   54 #> 268          18    3   54 #> 269          50    4   54 #> 270         370    5   54 #> 271          NA    1   55 #> 272           0    2   55 #> 273          47    3   55 #> 274          51    4   55 #> 275         450    5   55 #> 276          NA    1   56 #> 277           0    2   56 #> 278          41    3   56 #> 279          89    4   56 #> 280          23    5   56 #> 281          NA    1   57 #> 282           0    2   57 #> 283          28    3   57 #> 284          74    4   57 #> 285         224    5   57 #> 286          NA    1   58 #> 287           0    2   58 #> 288          23    3   58 #> 289         106    4   58 #> 290         397    5   58 #> 291          NA    1   59 #> 292           0    2   59 #> 293          48    3   59 #> 294         109    4   59 #> 295          82    5   59 #> 296          NA    1   60 #> 297           0    2   60 #> 298          41    3   60 #> 299          89    4   60 #> 300          89    5   60 #> 301          NA    1   61 #> 302           0    2   61 #> 303          55    3   61 #> 304         125    4   61 #> 305          14    5   61 #> 306          NA    1   62 #> 307           0    2   62 #> 308          50    3   62 #> 309          77    4   62 #> 310           7    5   62 #> 311          NA    1   63 #> 312           0    2   63 #> 313          33    3   63 #> 314         103    4   63 #> 315         143    5   63 #> 316          NA    1   64 #> 317           0    2   64 #> 318          48    3   64 #> 319          81    4   64 #> 320          23    5   64 #> 321          NA    1   65 #> 322           0    2   65 #> 323          25    3   65 #> 324          66    4   65 #> 325          66    5   65 #> 326          NA    1   66 #> 327           0    2   66 #> 328          38    3   66 #> 329          73    4   66 #> 330         193    5   66 #> 331          NA    1   67 #> 332           0    2   67 #> 333          17    3   67 #> 334          77    4   67 #> 335         203    5   67 #> 336          NA    1   68 #> 337           0    2   68 #> 338          44    3   68 #> 339          72    4   68 #> 340         496    5   68 #> 341          NA    1   69 #> 342           0    2   69 #> 343          42    3   69 #> 344          71    4   69 #> 345          79    5   69 #> 346          NA    1   70 #> 347           0    2   70 #> 348          26    3   70 #> 349         119    4   70 #> 350          97    5   70 #> 351          NA    1   71 #> 352           0    2   71 #> 353          48    3   71 #> 354          77    4   71 #> 355          85    5   71 #> 356          NA    1   72 #> 357           0    2   72 #> 358          83    3   72 #> 359          56    4   72 #> 360          11    5   72 #> 361          NA    1   73 #> 362           0    2   73 #> 363          26    3   73 #> 364          44    4   73 #> 365          34    5   73 #> 366          NA    1   74 #> 367           0    2   74 #> 368          53    3   74 #> 369          58    4   74 #> 370           4    5   74 #> 371          NA    1   75 #> 372           0    2   75 #> 373          68    3   75 #> 374          33    4   75 #> 375         273    5   75 #> 376          NA    1   76 #> 377           0    2   76 #> 378          34    3   76 #> 379          86    4   76 #> 380         220    5   76 #> 381          NA    1   77 #> 382           0    2   77 #> 383          23    3   77 #> 384          61    4   77 #> 385          36    5   77 #> 386          NA    1   78 #> 387           0    2   78 #> 388          63    3   78 #> 389         105    4   78 #> 390          15    5   78 #> 391          NA    1   79 #> 392           0    2   79 #> 393          30    3   79 #> 394         111    4   79 #> 395         188    5   79 #> 396          NA    1   80 #> 397           0    2   80 #> 398          36    3   80 #> 399          52    4   80 #> 400         169    5   80 #> 401          NA    1   81 #> 402           0    2   81 #> 403          27    3   81 #> 404          75    4   81 #> 405         325    5   81 #> 406          NA    1   82 #> 407           0    2   82 #> 408          49    3   82 #> 409          76    4   82 #> 410          75    5   82 #> 411          NA    1   83 #> 412           0    2   83 #> 413          31    3   83 #> 414          92    4   83 #> 415          22    5   83 #> 416          NA    1   84 #> 417           0    2   84 #> 418          54    3   84 #> 419          79    4   84 #> 420          10    5   84 #> 421          NA    1   85 #> 422           0    2   85 #> 423          26    3   85 #> 424         101    4   85 #> 425         263    5   85 #> 426          NA    1   86 #> 427           0    2   86 #> 428          58    3   86 #> 429         108    4   86 #> 430         392    5   86 #> 431          NA    1   87 #> 432           0    2   87 #> 433          39    3   87 #> 434          58    4   87 #> 435         305    5   87 #> 436          NA    1   88 #> 437           0    2   88 #> 438          37    3   88 #> 439         105    4   88 #> 440         261    5   88 #> 441          NA    1   89 #> 442           0    2   89 #> 443          26    3   89 #> 444         128    4   89 #> 445          27    5   89 #> 446          NA    1   90 #> 447           0    2   90 #> 448          22    3   90 #> 449          50    4   90 #> 450         141    5   90 #> 451          NA    1   91 #> 452           0    2   91 #> 453          27    3   91 #> 454          51    4   91 #> 455          64    5   91 #> 456          NA    1   92 #> 457           0    2   92 #> 458         107    3   92 #> 459          92    4   92 #> 460           2    5   92 #> 461          NA    1   93 #> 462           0    2   93 #> 463          42    3   93 #> 464          77    4   93 #> 465          69    5   93 #> 466          NA    1   94 #> 467           0    2   94 #> 468          56    3   94 #> 469          96    4   94 #> 470          18    5   94 #> 471          NA    1   95 #> 472           0    2   95 #> 473          20    3   95 #> 474          68    4   95 #> 475         265    5   95 #> 476          NA    1   96 #> 477           0    2   96 #> 478          43    3   96 #> 479          74    4   96 #> 480          15    5   96 #> 481          NA    1   97 #> 482           0    2   97 #> 483          35    3   97 #> 484          91    4   97 #> 485         367    5   97 #> 486          NA    1   98 #> 487           0    2   98 #> 488          50    3   98 #> 489          71    4   98 #> 490          71    5   98 #> 491          NA    1   99 #> 492           0    2   99 #> 493          29    3   99 #> 494          60    4   99 #> 495          79    5   99 #> 496          NA    1  100 #> 497           0    2  100 #> 498          39    3  100 #> 499          81    4  100 #> 500         317    5  100 #> 501          NA    1  101 #> 502           0    2  101 #> 503          32    3  101 #> 504          57    4  101 #> 505          32    5  101 #> 506          NA    1  102 #> 507           0    2  102 #> 508          29    3  102 #> 509          90    4  102 #> 510          45    5  102 #> 511          NA    1  103 #> 512           0    2  103 #> 513          89    3  103 #> 514          59    4  103 #> 515         577    5  103 #> 516          NA    1  104 #> 517           0    2  104 #> 518          25    3  104 #> 519          60    4  104 #> 520          75    5  104 #> 521          NA    1  105 #> 522           0    2  105 #> 523          50    3  105 #> 524          76    4  105 #> 525          66    5  105 #> 526          NA    1  106 #> 527           0    2  106 #> 528          21    3  106 #> 529          96    4  106 #> 530         609    5  106 #> 531          NA    1  107 #> 532           0    2  107 #> 533          31    3  107 #> 534          66    4  107 #> 535          42    5  107 #> 536          NA    1  108 #> 537           0    2  108 #> 538          33    3  108 #> 539          60    4  108 #> 540         777    5  108 #> 541          NA    1  109 #> 542           0    2  109 #> 543          12    3  109 #> 544         111    4  109 #> 545         150    5  109 #> 546          NA    1  110 #> 547           0    2  110 #> 548          45    3  110 #> 549          68    4  110 #> 550          33    5  110 #> 551          NA    1  111 #> 552           0    2  111 #> 553          33    3  111 #> 554          85    4  111 #> 555          85    5  111 #> 556          NA    1  112 #> 557           0    2  112 #> 558          46    3  112 #> 559          79    4  112 #> 560         121    5  112 #> 561          NA    1  113 #> 562           0    2  113 #> 563          12    3  113 #> 564          75    4  113 #> 565           6    5  113 #> 566          NA    1  114 #> 567           0    2  114 #> 568          16    3  114 #> 569         127    4  114 #> 570          15    5  114 #> 571          NA    1  115 #> 572           0    2  115 #> 573          11    3  115 #> 574          72    4  115 #> 575          75    5  115 #> 576          NA    1  116 #> 577           0    2  116 #> 578          53    3  116 #> 579          49    4  116 #> 580         232    5  116 #> 581          NA    1  117 #> 582           0    2  117 #> 583          29    3  117 #> 584         129    4  117 #> 585         147    5  117 #> 586          NA    1  118 #> 587           0    2  118 #> 588          41    3  118 #> 589          84    4  118 #> 590         147    5  118 #> 591          NA    1  119 #> 592           0    2  119 #> 593          40    3  119 #> 594         110    4  119 #> 595          43    5  119 #> 596          NA    1  120 #> 597           0    2  120 #> 598          47    3  120 #> 599          83    4  120 #> 600          12    5  120 #> 601          NA    1  121 #> 602           0    2  121 #> 603          40    3  121 #> 604          86    4  121 #> 605          24    5  121 #> 606          NA    1  122 #> 607           0    2  122 #> 608          54    3  122 #> 609         160    4  122 #> 610          43    5  122 #> 611          NA    1  123 #> 612           0    2  123 #> 613          34    3  123 #> 614         173    4  123 #> 615         171    5  123 #> 616          NA    1  124 #> 617           0    2  124 #> 618          53    3  124 #> 619          50    4  124 #> 620         144    5  124 #> 621          NA    1  125 #> 622           0    2  125 #> 623          23    3  125 #> 624         103    4  125 #> 625          67    5  125 #> 626          NA    1  126 #> 627           0    2  126 #> 628          31    3  126 #> 629         120    4  126 #> 630           3    5  126 #> 631          NA    1  127 #> 632           0    2  127 #> 633          23    3  127 #> 634          54    4  127 #> 635          12    5  127 #> 636          NA    1  128 #> 637           0    2  128 #> 638          27    3  128 #> 639          47    4  128 #> 640           9    5  128 #> 641          NA    1  129 #> 642           0    2  129 #> 643          33    3  129 #> 644         116    4  129 #> 645          58    5  129 #> 646          NA    1  130 #> 647           0    2  130 #> 648          27    3  130 #> 649         100    4  130 #> 650          39    5  130 #> 651          NA    1  131 #> 652           0    2  131 #> 653          32    3  131 #> 654         100    4  131 #> 655         178    5  131 #> 656          NA    1  132 #> 657           0    2  132 #> 658          28    3  132 #> 659          53    4  132 #> 660         229    5  132 #> 661          NA    1  133 #> 662           0    2  133 #> 663          28    3  133 #> 664          81    4  133 #> 665          52    5  133 #> 666          NA    1  134 #> 667           0    2  134 #> 668          50    3  134 #> 669          54    4  134 #> 670          13    5  134 #> 671          NA    1  135 #> 672           0    2  135 #> 673          42    3  135 #> 674          73    4  135 #> 675          10    5  135 #> 676          NA    1  136 #> 677           0    2  136 #> 678          45    3  136 #> 679          39    4  136 #> 680         467    5  136 #> 681          NA    1  137 #> 682           0    2  137 #> 683          34    3  137 #> 684         118    4  137 #> 685         152    5  137 #> 686          NA    1  138 #> 687           0    2  138 #> 688          43    3  138 #> 689          75    4  138 #> 690         111    5  138 #> 691          NA    1  139 #> 692           0    2  139 #> 693          54    3  139 #> 694         115    4  139 #> 695           9    5  139 #> 696          NA    1  140 #> 697           0    2  140 #> 698          46    3  140 #> 699          52    4  140 #> 700          91    5  140 #> 701          NA    1  141 #> 702           0    2  141 #> 703          18    3  141 #> 704          43    4  141 #> 705          18    5  141 #> 706          NA    1  142 #> 707           0    2  142 #> 708          29    3  142 #> 709         118    4  142 #> 710           7    5  142 #> 711          NA    1  143 #> 712           0    2  143 #> 713          36    3  143 #> 714          82    4  143 #> 715          13    5  143 #> 716          NA    1  144 #> 717           0    2  144 #> 718          49    3  144 #> 719          53    4  144 #> 720          34    5  144 #> 721          NA    1  145 #> 722           0    2  145 #> 723          46    3  145 #> 724          72    4  145 #> 725          68    5  145 #> 726          NA    1  146 #> 727           0    2  146 #> 728          35    3  146 #> 729          56    4  146 #> 730         326    5  146 #> 731          NA    1  147 #> 732           0    2  147 #> 733          41    3  147 #> 734          40    4  147 #> 735         141    5  147 #> 736          NA    1  148 #> 737           0    2  148 #> 738          39    3  148 #> 739          59    4  148 #> 740         201    5  148 #> 741          NA    1  149 #> 742           0    2  149 #> 743          35    3  149 #> 744         104    4  149 #> 745         219    5  149 #> 746          NA    1  150 #> 747           0    2  150 #> 748          48    3  150 #> 749          63    4  150 #> 750         201    5  150 #> 751          NA    1  151 #> 752           0    2  151 #> 753          39    3  151 #> 754          81    4  151 #> 755          30    5  151 #> 756          NA    1  152 #> 757           0    2  152 #> 758          32    3  152 #> 759          48    4  152 #> 760           9    5  152 #> 761          NA    1  153 #> 762           0    2  153 #> 763          34    3  153 #> 764          76    4  153 #> 765         339    5  153 #> 766          NA    1  154 #> 767           0    2  154 #> 768          43    3  154 #> 769         101    4  154 #> 770         809    5  154 #> 771          NA    1  155 #> 772           0    2  155 #> 773          28    3  155 #> 774          80    4  155 #> 775          38    5  155 #> 776          NA    1  156 #> 777           0    2  156 #> 778          19    3  156 #> 779         109    4  156 #> 780          30    5  156 #> 781          NA    1  157 #> 782           0    2  157 #> 783          20    3  157 #> 784          78    4  157 #> 785         251    5  157 #> 786          NA    1  158 #> 787           0    2  158 #> 788          17    3  158 #> 789          88    4  158 #> 790          52    5  158 #> 791          NA    1  159 #> 792           0    2  159 #> 793          51    3  159 #> 794          61    4  159 #> 795          40    5  159 #> 796          NA    1  160 #> 797           0    2  160 #> 798          34    3  160 #> 799          87    4  160 #> 800         271    5  160 #> 801          NA    1  161 #> 802           0    2  161 #> 803          44    3  161 #> 804          74    4  161 #> 805         249    5  161 #> 806          NA    1  162 #> 807           0    2  162 #> 808          26    3  162 #> 809         111    4  162 #> 810         334    5  162 #> 811          NA    1  163 #> 812           0    2  163 #> 813          34    3  163 #> 814          95    4  163 #> 815         733    5  163 #> 816          NA    1  164 #> 817           0    2  164 #> 818          40    3  164 #> 819         108    4  164 #> 820         477    5  164 #> 821          NA    1  165 #> 822           0    2  165 #> 823          31    3  165 #> 824         100    4  165 #> 825          49    5  165 #> 826          NA    1  166 #> 827           0    2  166 #> 828          46    3  166 #> 829          67    4  166 #> 830         150    5  166 #> 831          NA    1  167 #> 832           0    2  167 #> 833          35    3  167 #> 834          67    4  167 #> 835         201    5  167 #> 836          NA    1  168 #> 837           0    2  168 #> 838          41    3  168 #> 839          77    4  168 #> 840         279    5  168 #> 841          NA    1  169 #> 842           0    2  169 #> 843          14    3  169 #> 844          84    4  169 #> 845          77    5  169 #> 846          NA    1  170 #> 847           0    2  170 #> 848          28    3  170 #> 849         117    4  170 #> 850          12    5  170 #> 851          NA    1  171 #> 852           0    2  171 #> 853          29    3  171 #> 854          46    4  171 #> 855         254    5  171 #> 856          NA    1  172 #> 857           0    2  172 #> 858          34    3  172 #> 859          75    4  172 #> 860         171    5  172 #> 861          NA    1  173 #> 862           0    2  173 #> 863          39    3  173 #> 864          54    4  173 #> 865          62    5  173 #> 866          NA    1  174 #> 867           0    2  174 #> 868          64    3  174 #> 869          98    4  174 #> 870          86    5  174 #> 871          NA    1  175 #> 872           0    2  175 #> 873          29    3  175 #> 874          94    4  175 #> 875         177    5  175 #> 876          NA    1  176 #> 877           0    2  176 #> 878          39    3  176 #> 879          96    4  176 #> 880         807    5  176 #> 881          NA    1  177 #> 882           0    2  177 #> 883          43    3  177 #> 884          49    4  177 #> 885           7    5  177 #> 886          NA    1  178 #> 887           0    2  178 #> 888          38    3  178 #> 889          45    4  178 #> 890          75    5  178 #> 891          NA    1  179 #> 892           0    2  179 #> 893          21    3  179 #> 894         108    4  179 #> 895          66    5  179 #> 896          NA    1  180 #> 897           0    2  180 #> 898          39    3  180 #> 899         104    4  180 #> 900         290    5  180 #> 901          NA    1  181 #> 902           0    2  181 #> 903          41    3  181 #> 904         110    4  181 #> 905         154    5  181 #> 906          NA    1  182 #> 907           0    2  182 #> 908          58    3  182 #> 909          69    4  182 #> 910         106    5  182 #> 911          NA    1  183 #> 912           0    2  183 #> 913          44    3  183 #> 914         116    4  183 #> 915         303    5  183 #> 916          NA    1  184 #> 917           0    2  184 #> 918          34    3  184 #> 919         108    4  184 #> 920          95    5  184 #> 921          NA    1  185 #> 922           0    2  185 #> 923          40    3  185 #> 924          74    4  185 #> 925          70    5  185 #> 926          NA    1  186 #> 927           0    2  186 #> 928          44    3  186 #> 929          88    4  186 #> 930           9    5  186 #> 931          NA    1  187 #> 932           0    2  187 #> 933          30    3  187 #> 934          70    4  187 #> 935         301    5  187 #> 936          NA    1  188 #> 937           0    2  188 #> 938          24    3  188 #> 939          71    4  188 #> 940          42    5  188 #> 941          NA    1  189 #> 942           0    2  189 #> 943          38    3  189 #> 944         132    4  189 #> 945           9    5  189 #> 946          NA    1  190 #> 947           0    2  190 #> 948          42    3  190 #> 949          89    4  190 #> 950         105    5  190 #> 951          NA    1  191 #> 952           0    2  191 #> 953          21    3  191 #> 954          65    4  191 #> 955         100    5  191 #> 956          NA    1  192 #> 957           0    2  192 #> 958          36    3  192 #> 959          67    4  192 #> 960          68    5  192 #> 961          NA    1  193 #> 962           0    2  193 #> 963          57    3  193 #> 964         105    4  193 #> 965           1    5  193 #> 966          NA    1  194 #> 967           0    2  194 #> 968          52    3  194 #> 969         108    4  194 #> 970          62    5  194 #> 971          NA    1  195 #> 972           0    2  195 #> 973          19    3  195 #> 974          80    4  195 #> 975         103    5  195 #> 976          NA    1  196 #> 977           0    2  196 #> 978          37    3  196 #> 979         150    4  196 #> 980          59    5  196 #> 981          NA    1  197 #> 982           0    2  197 #> 983          64    3  197 #> 984          66    4  197 #> 985          74    5  197 #> 986          NA    1  198 #> 987           0    2  198 #> 988          35    3  198 #> 989          68    4  198 #> 990         199    5  198 #> 991          NA    1  199 #> 992           0    2  199 #> 993          38    3  199 #> 994          80    4  199 #> 995         189    5  199 #> 996          NA    1  200 #> 997           0    2  200 #> 998          20    3  200 #> 999         169    4  200 #> 1000         25    5  200 #> 1001         NA    1  201 #> 1002          0    2  201 #> 1003         35    3  201 #> 1004         78    4  201 #> 1005         68    5  201 #> 1006         NA    1  202 #> 1007          0    2  202 #> 1008         61    3  202 #> 1009         84    4  202 #> 1010        196    5  202 #> 1011         NA    1  203 #> 1012          0    2  203 #> 1013         25    3  203 #> 1014        104    4  203 #> 1015         97    5  203 #> 1016         NA    1  204 #> 1017          0    2  204 #> 1018         48    3  204 #> 1019         77    4  204 #> 1020        123    5  204 #> 1021         NA    1  205 #> 1022          0    2  205 #> 1023         66    3  205 #> 1024         62    4  205 #> 1025          1    5  205 #> 1026         NA    1  206 #> 1027          0    2  206 #> 1028         38    3  206 #> 1029         68    4  206 #> 1030        555    5  206 #> 1031         NA    1  207 #> 1032          0    2  207 #> 1033         51    3  207 #> 1034         91    4  207 #> 1035        212    5  207 #> 1036         NA    1  208 #> 1037          0    2  208 #> 1038         25    3  208 #> 1039         97    4  208 #> 1040        285    5  208 #> 1041         NA    1  209 #> 1042          0    2  209 #> 1043         35    3  209 #> 1044         85    4  209 #> 1045        120    5  209 #> 1046         NA    1  210 #> 1047          0    2  210 #> 1048         52    3  210 #> 1049         82    4  210 #> 1050        265    5  210 #> 1051         NA    1  211 #> 1052          0    2  211 #> 1053         28    3  211 #> 1054        106    4  211 #> 1055          8    5  211 #> 1056         NA    1  212 #> 1057          0    2  212 #> 1058         22    3  212 #> 1059         54    4  212 #> 1060        179    5  212 #> 1061         NA    1  213 #> 1062          0    2  213 #> 1063         28    3  213 #> 1064         89    4  213 #> 1065         19    5  213 #> 1066         NA    1  214 #> 1067          0    2  214 #> 1068         32    3  214 #> 1069         65    4  214 #> 1070        143    5  214 #> 1071         NA    1  215 #> 1072          0    2  215 #> 1073         42    3  215 #> 1074         74    4  215 #> 1075        422    5  215 #> 1076         NA    1  216 #> 1077          0    2  216 #> 1078         26    3  216 #> 1079         86    4  216 #> 1080        162    5  216 #> 1081         NA    1  217 #> 1082          0    2  217 #> 1083         34    3  217 #> 1084        116    4  217 #> 1085         62    5  217 #> 1086         NA    1  218 #> 1087          0    2  218 #> 1088         39    3  218 #> 1089         83    4  218 #> 1090         24    5  218 #> 1091         NA    1  219 #> 1092          0    2  219 #> 1093         35    3  219 #> 1094        117    4  219 #> 1095         17    5  219 #> 1096         NA    1  220 #> 1097          0    2  220 #> 1098         24    3  220 #> 1099         81    4  220 #> 1100          5    5  220 #> 1101         NA    1  221 #> 1102          0    2  221 #> 1103         30    3  221 #> 1104        104    4  221 #> 1105         48    5  221 #> 1106         NA    1  222 #> 1107          0    2  222 #> 1108         41    3  222 #> 1109         75    4  222 #> 1110        136    5  222 #> 1111         NA    1  223 #> 1112          0    2  223 #> 1113         54    3  223 #> 1114         68    4  223 #> 1115          9    5  223 #> 1116         NA    1  224 #> 1117          0    2  224 #> 1118         32    3  224 #> 1119         46    4  224 #> 1120        100    5  224 #> 1121         NA    1  225 #> 1122          0    2  225 #> 1123         18    3  225 #> 1124         81    4  225 #> 1125        187    5  225 #> 1126         NA    1  226 #> 1127          0    2  226 #> 1128         48    3  226 #> 1129        143    4  226 #> 1130        120    5  226 #> 1131         NA    1  227 #> 1132          0    2  227 #> 1133         13    3  227 #> 1134         59    4  227 #> 1135        241    5  227 #> 1136         NA    1  228 #> 1137          0    2  228 #> 1138         52    3  228 #> 1139        109    4  228 #> 1140         25    5  228 #> 1141         NA    1  229 #> 1142          0    2  229 #> 1143         45    3  229 #> 1144         88    4  229 #> 1145        189    5  229 #> 1146         NA    1  230 #> 1147          0    2  230 #> 1148         29    3  230 #> 1149         70    4  230 #> 1150        258    5  230 #> 1151         NA    1  231 #> 1152          0    2  231 #> 1153         41    3  231 #> 1154         87    4  231 #> 1155         23    5  231 #> 1156         NA    1  232 #> 1157          0    2  232 #> 1158         54    3  232 #> 1159         41    4  232 #> 1160         67    5  232 #> 1161         NA    1  233 #> 1162          0    2  233 #> 1163         36    3  233 #> 1164        127    4  233 #> 1165         83    5  233 #> 1166         NA    1  234 #> 1167          0    2  234 #> 1168         31    3  234 #> 1169         61    4  234 #> 1170          0    5  234 #> 1171         NA    1  235 #> 1172          0    2  235 #> 1173         43    3  235 #> 1174        100    4  235 #> 1175         19    5  235 #> 1176         NA    1  236 #> 1177          0    2  236 #> 1178         33    3  236 #> 1179         54    4  236 #> 1180         85    5  236 #> 1181         NA    1  237 #> 1182          0    2  237 #> 1183         14    3  237 #> 1184         83    4  237 #> 1185         60    5  237 #> 1186         NA    1  238 #> 1187          0    2  238 #> 1188         34    3  238 #> 1189        108    4  238 #> 1190         22    5  238 #> 1191         NA    1  239 #> 1192          0    2  239 #> 1193         56    3  239 #> 1194         78    4  239 #> 1195         65    5  239 #> 1196         NA    1  240 #> 1197          0    2  240 #> 1198         37    3  240 #> 1199        115    4  240 #> 1200         90    5  240 #> 1201         NA    1  241 #> 1202          0    2  241 #> 1203         47    3  241 #> 1204         50    4  241 #> 1205        163    5  241 #> 1206         NA    1  242 #> 1207          0    2  242 #> 1208         28    3  242 #> 1209        110    4  242 #> 1210         62    5  242 #> 1211         NA    1  243 #> 1212          0    2  243 #> 1213         63    3  243 #> 1214         68    4  243 #> 1215         90    5  243 #> 1216         NA    1  244 #> 1217          0    2  244 #> 1218         34    3  244 #> 1219         93    4  244 #> 1220        184    5  244 #> 1221         NA    1  245 #> 1222          0    2  245 #> 1223         33    3  245 #> 1224         99    4  245 #> 1225        415    5  245 #> 1226         NA    1  246 #> 1227          0    2  246 #> 1228         34    3  246 #> 1229         73    4  246 #> 1230         20    5  246 #> 1231         NA    1  247 #> 1232          0    2  247 #> 1233         24    3  247 #> 1234         53    4  247 #> 1235         27    5  247 #> 1236         NA    1  248 #> 1237          0    2  248 #> 1238         22    3  248 #> 1239         68    4  248 #> 1240         77    5  248 #> 1241         NA    1  249 #> 1242          0    2  249 #> 1243         53    3  249 #> 1244        115    4  249 #> 1245         38    5  249 #> 1246         NA    1  250 #> 1247          0    2  250 #> 1248         60    3  250 #> 1249         39    4  250 #> 1250        368    5  250 #> 1251         NA    1  251 #> 1252          0    2  251 #> 1253         44    3  251 #> 1254         70    4  251 #> 1255        513    5  251 #> 1256         NA    1  252 #> 1257          0    2  252 #> 1258         62    3  252 #> 1259         72    4  252 #> 1260          5    5  252 #> 1261         NA    1  253 #> 1262          0    2  253 #> 1263         26    3  253 #> 1264         74    4  253 #> 1265          0    5  253 #> 1266         NA    1  254 #> 1267          0    2  254 #> 1268         47    3  254 #> 1269        117    4  254 #> 1270         87    5  254 #> 1271         NA    1  255 #> 1272          0    2  255 #> 1273         42    3  255 #> 1274         90    4  255 #> 1275         17    5  255 #> 1276         NA    1  256 #> 1277          0    2  256 #> 1278         23    3  256 #> 1279        110    4  256 #> 1280          5    5  256 #> 1281         NA    1  257 #> 1282          0    2  257 #> 1283         41    3  257 #> 1284         69    4  257 #> 1285         46    5  257 #> 1286         NA    1  258 #> 1287          0    2  258 #> 1288         54    3  258 #> 1289         91    4  258 #> 1290         21    5  258 #> 1291         NA    1  259 #> 1292          0    2  259 #> 1293         21    3  259 #> 1294         69    4  259 #> 1295        336    5  259 #> 1296         NA    1  260 #> 1297          0    2  260 #> 1298         39    3  260 #> 1299         62    4  260 #> 1300        344    5  260 #> 1301         NA    1  261 #> 1302          0    2  261 #> 1303         44    3  261 #> 1304         55    4  261 #> 1305        316    5  261 #> 1306         NA    1  262 #> 1307          0    2  262 #> 1308         16    3  262 #> 1309         64    4  262 #> 1310         57    5  262 #> 1311         NA    1  263 #> 1312          0    2  263 #> 1313         43    3  263 #> 1314         55    4  263 #> 1315         99    5  263 #> 1316         NA    1  264 #> 1317          0    2  264 #> 1318         18    3  264 #> 1319         58    4  264 #> 1320        546    5  264 #> 1321         NA    1  265 #> 1322          0    2  265 #> 1323         16    3  265 #> 1324        115    4  265 #> 1325        126    5  265 #> 1326         NA    1  266 #> 1327          0    2  266 #> 1328         49    3  266 #> 1329         69    4  266 #> 1330        122    5  266 #> 1331         NA    1  267 #> 1332          0    2  267 #> 1333         44    3  267 #> 1334         72    4  267 #> 1335        187    5  267 #> 1336         NA    1  268 #> 1337          0    2  268 #> 1338         25    3  268 #> 1339         81    4  268 #> 1340        431    5  268 #> 1341         NA    1  269 #> 1342          0    2  269 #> 1343         36    3  269 #> 1344        103    4  269 #> 1345          6    5  269 #> 1346         NA    1  270 #> 1347          0    2  270 #> 1348         47    3  270 #> 1349         53    4  270 #> 1350        393    5  270 #> 1351         NA    1  271 #> 1352          0    2  271 #> 1353         23    3  271 #> 1354         54    4  271 #> 1355         56    5  271 #> 1356         NA    1  272 #> 1357          0    2  272 #> 1358         35    3  272 #> 1359         84    4  272 #> 1360         22    5  272 #> 1361         NA    1  273 #> 1362          0    2  273 #> 1363         26    3  273 #> 1364         58    4  273 #> 1365         95    5  273 #> 1366         NA    1  274 #> 1367          0    2  274 #> 1368         45    3  274 #> 1369         96    4  274 #> 1370          0    5  274 #> 1371         NA    1  275 #> 1372          0    2  275 #> 1373         33    3  275 #> 1374        101    4  275 #> 1375         16    5  275 #> 1376         NA    1  276 #> 1377          0    2  276 #> 1378         39    3  276 #> 1379         70    4  276 #> 1380        320    5  276 #> 1381         NA    1  277 #> 1382          0    2  277 #> 1383         41    3  277 #> 1384         80    4  277 #> 1385        192    5  277 #> 1386         NA    1  278 #> 1387          0    2  278 #> 1388         41    3  278 #> 1389        102    4  278 #> 1390        144    5  278 #> 1391         NA    1  279 #> 1392          0    2  279 #> 1393         48    3  279 #> 1394         80    4  279 #> 1395         70    5  279 #> 1396         NA    1  280 #> 1397          0    2  280 #> 1398         33    3  280 #> 1399         70    4  280 #> 1400        256    5  280 #> 1401         NA    1  281 #> 1402          0    2  281 #> 1403         38    3  281 #> 1404         87    4  281 #> 1405        237    5  281 #> 1406         NA    1  282 #> 1407          0    2  282 #> 1408         36    3  282 #> 1409        112    4  282 #> 1410        216    5  282 #> 1411         NA    1  283 #> 1412          0    2  283 #> 1413         59    3  283 #> 1414         48    4  283 #> 1415         60    5  283 #> 1416         NA    1  284 #> 1417          0    2  284 #> 1418         62    3  284 #> 1419         94    4  284 #> 1420         51    5  284 #> 1421         NA    1  285 #> 1422          0    2  285 #> 1423         61    3  285 #> 1424         42    4  285 #> 1425         38    5  285 #> 1426         NA    1  286 #> 1427          0    2  286 #> 1428         28    3  286 #> 1429         43    4  286 #> 1430        140    5  286 #> 1431         NA    1  287 #> 1432          0    2  287 #> 1433         29    3  287 #> 1434         80    4  287 #> 1435         37    5  287 #> 1436         NA    1  288 #> 1437          0    2  288 #> 1438         22    3  288 #> 1439         61    4  288 #> 1440         16    5  288 #> 1441         NA    1  289 #> 1442          0    2  289 #> 1443         15    3  289 #> 1444         88    4  289 #> 1445         66    5  289 #> 1446         NA    1  290 #> 1447          0    2  290 #> 1448         59    3  290 #> 1449         73    4  290 #> 1450        122    5  290 #> 1451         NA    1  291 #> 1452          0    2  291 #> 1453         31    3  291 #> 1454         96    4  291 #> 1455         15    5  291 #> 1456         NA    1  292 #> 1457          0    2  292 #> 1458         15    3  292 #> 1459         87    4  292 #> 1460         80    5  292 #> 1461         NA    1  293 #> 1462          0    2  293 #> 1463         28    3  293 #> 1464        151    4  293 #> 1465        227    5  293 #> 1466         NA    1  294 #> 1467          0    2  294 #> 1468         14    3  294 #> 1469        102    4  294 #> 1470        131    5  294 #> 1471         NA    1  295 #> 1472          0    2  295 #> 1473         29    3  295 #> 1474         90    4  295 #> 1475       1171    5  295 #> 1476         NA    1  296 #> 1477          0    2  296 #> 1478         70    3  296 #> 1479         70    4  296 #> 1480        518    5  296 #> 1481         NA    1  297 #> 1482          0    2  297 #> 1483         25    3  297 #> 1484         59    4  297 #> 1485        476    5  297 #> 1486         NA    1  298 #> 1487          0    2  298 #> 1488         45    3  298 #> 1489         89    4  298 #> 1490        243    5  298 #> 1491         NA    1  299 #> 1492          0    2  299 #> 1493         34    3  299 #> 1494         49    4  299 #> 1495         65    5  299 #> 1496         NA    1  300 #> 1497          0    2  300 #> 1498         24    3  300 #> 1499         44    4  300 #> 1500        121    5  300 #> 1501         NA    1  301 #> 1502          0    2  301 #> 1503         28    3  301 #> 1504         78    4  301 #> 1505         17    5  301 #> 1506         NA    1  302 #> 1507          0    2  302 #> 1508         39    3  302 #> 1509         81    4  302 #> 1510        280    5  302 #> 1511         NA    1  303 #> 1512          0    2  303 #> 1513         48    3  303 #> 1514         91    4  303 #> 1515         68    5  303 #> 1516         NA    1  304 #> 1517          0    2  304 #> 1518         29    3  304 #> 1519         86    4  304 #> 1520         61    5  304 #> 1521         NA    1  305 #> 1522          0    2  305 #> 1523         43    3  305 #> 1524         87    4  305 #> 1525        107    5  305 #> 1526         NA    1  306 #> 1527          0    2  306 #> 1528         36    3  306 #> 1529         84    4  306 #> 1530        250    5  306 #> 1531         NA    1  307 #> 1532          0    2  307 #> 1533         18    3  307 #> 1534        138    4  307 #> 1535        115    5  307 #> 1536         NA    1  308 #> 1537          0    2  308 #> 1538         31    3  308 #> 1539         69    4  308 #> 1540        521    5  308 #> 1541         NA    1  309 #> 1542          0    2  309 #> 1543         22    3  309 #> 1544         49    4  309 #> 1545        106    5  309 #> 1546         NA    1  310 #> 1547          0    2  310 #> 1548         36    3  310 #> 1549         50    4  310 #> 1550        158    5  310 #> 1551         NA    1  311 #> 1552          0    2  311 #> 1553         42    3  311 #> 1554         78    4  311 #> 1555        199    5  311 #> 1556         NA    1  312 #> 1557          0    2  312 #> 1558         20    3  312 #> 1559        108    4  312 #> 1560          1    5  312 #> 1561         NA    1  313 #> 1562          0    2  313 #> 1563         26    3  313 #> 1564         84    4  313 #> 1565        126    5  313 #> 1566         NA    1  314 #> 1567          0    2  314 #> 1568         53    3  314 #> 1569         68    4  314 #> 1570         20    5  314 #> 1571         NA    1  315 #> 1572          0    2  315 #> 1573         28    3  315 #> 1574         79    4  315 #> 1575         92    5  315 #> 1576         NA    1  316 #> 1577          0    2  316 #> 1578         27    3  316 #> 1579         69    4  316 #> 1580        270    5  316 #> 1581         NA    1  317 #> 1582          0    2  317 #> 1583         23    3  317 #> 1584        126    4  317 #> 1585          6    5  317 #> 1586         NA    1  318 #> 1587          0    2  318 #> 1588         19    3  318 #> 1589         71    4  318 #> 1590        705    5  318 #> 1591         NA    1  319 #> 1592          0    2  319 #> 1593         50    3  319 #> 1594        110    4  319 #> 1595        300    5  319 #> 1596         NA    1  320 #> 1597          0    2  320 #> 1598         33    3  320 #> 1599        112    4  320 #> 1600         88    5  320 #> 1601         NA    1  321 #> 1602          0    2  321 #> 1603         19    3  321 #> 1604         83    4  321 #> 1605         80    5  321 #> 1606         NA    1  322 #> 1607          0    2  322 #> 1608         25    3  322 #> 1609        108    4  322 #> 1610        106    5  322 #> 1611         NA    1  323 #> 1612          0    2  323 #> 1613         43    3  323 #> 1614         86    4  323 #> 1615        349    5  323 #> 1616         NA    1  324 #> 1617          0    2  324 #> 1618         55    3  324 #> 1619         57    4  324 #> 1620         56    5  324 #> 1621         NA    1  325 #> 1622          0    2  325 #> 1623         27    3  325 #> 1624         79    4  325 #> 1625         30    5  325 #> 1626         NA    1  326 #> 1627          0    2  326 #> 1628         46    3  326 #> 1629         88    4  326 #> 1630        125    5  326 #> 1631         NA    1  327 #> 1632          0    2  327 #> 1633         38    3  327 #> 1634         92    4  327 #> 1635          6    5  327 #> 1636         NA    1  328 #> 1637          0    2  328 #> 1638         41    3  328 #> 1639         86    4  328 #> 1640        151    5  328 #> 1641         NA    1  329 #> 1642          0    2  329 #> 1643         10    3  329 #> 1644        199    4  329 #> 1645         67    5  329 #> 1646         NA    1  330 #> 1647          0    2  330 #> 1648         38    3  330 #> 1649         67    4  330 #> 1650          9    5  330 #> 1651         NA    1  331 #> 1652          0    2  331 #> 1653         44    3  331 #> 1654        113    4  331 #> 1655        212    5  331 #> 1656         NA    1  332 #> 1657          0    2  332 #> 1658         25    3  332 #> 1659        108    4  332 #> 1660        163    5  332 #> 1661         NA    1  333 #> 1662          0    2  333 #> 1663         33    3  333 #> 1664        123    4  333 #> 1665        115    5  333 #> 1666         NA    1  334 #> 1667          0    2  334 #> 1668         16    3  334 #> 1669         60    4  334 #> 1670         10    5  334 #> 1671         NA    1  335 #> 1672          0    2  335 #> 1673         46    3  335 #> 1674         68    4  335 #> 1675         79    5  335 #> 1676         NA    1  336 #> 1677          0    2  336 #> 1678         75    3  336 #> 1679         61    4  336 #> 1680        203    5  336 #> 1681         NA    1  337 #> 1682          0    2  337 #> 1683         43    3  337 #> 1684         49    4  337 #> 1685        188    5  337 #> 1686         NA    1  338 #> 1687          0    2  338 #> 1688         25    3  338 #> 1689        160    4  338 #> 1690        558    5  338 #> 1691         NA    1  339 #> 1692          0    2  339 #> 1693         37    3  339 #> 1694         82    4  339 #> 1695          0    5  339 #> 1696         NA    1  340 #> 1697          0    2  340 #> 1698         36    3  340 #> 1699         81    4  340 #> 1700        192    5  340 #> 1701         NA    1  341 #> 1702          0    2  341 #> 1703         55    3  341 #> 1704         60    4  341 #> 1705          8    5  341 #> 1706         NA    1  342 #> 1707          0    2  342 #> 1708         24    3  342 #> 1709         55    4  342 #> 1710        120    5  342 #> 1711         NA    1  343 #> 1712          0    2  343 #> 1713         68    3  343 #> 1714         56    4  343 #> 1715        311    5  343 #> 1716         NA    1  344 #> 1717          0    2  344 #> 1718         28    3  344 #> 1719        155    4  344 #> 1720         81    5  344 #> 1721         NA    1  345 #> 1722          0    2  345 #> 1723         41    3  345 #> 1724         53    4  345 #> 1725         38    5  345 #> 1726         NA    1  346 #> 1727          0    2  346 #> 1728         36    3  346 #> 1729         75    4  346 #> 1730        720    5  346 #> 1731         NA    1  347 #> 1732          0    2  347 #> 1733         43    3  347 #> 1734        136    4  347 #> 1735          5    5  347 #> 1736         NA    1  348 #> 1737          0    2  348 #> 1738         31    3  348 #> 1739        100    4  348 #> 1740        109    5  348 #> 1741         NA    1  349 #> 1742          0    2  349 #> 1743         33    3  349 #> 1744         45    4  349 #> 1745         71    5  349 #> 1746         NA    1  350 #> 1747          0    2  350 #> 1748         48    3  350 #> 1749         93    4  350 #> 1750         63    5  350 #> 1751         NA    1  351 #> 1752          0    2  351 #> 1753         30    3  351 #> 1754         86    4  351 #> 1755         55    5  351 #> 1756         NA    1  352 #> 1757          0    2  352 #> 1758         42    3  352 #> 1759        138    4  352 #> 1760        142    5  352 #> 1761         NA    1  353 #> 1762          0    2  353 #> 1763         36    3  353 #> 1764        113    4  353 #> 1765          3    5  353 #> 1766         NA    1  354 #> 1767          0    2  354 #> 1768         38    3  354 #> 1769         98    4  354 #> 1770        378    5  354 #> 1771         NA    1  355 #> 1772          0    2  355 #> 1773         41    3  355 #> 1774         95    4  355 #> 1775         47    5  355 #> 1776         NA    1  356 #> 1777          0    2  356 #> 1778         28    3  356 #> 1779        169    4  356 #> 1780         13    5  356 #> 1781         NA    1  357 #> 1782          0    2  357 #> 1783         40    3  357 #> 1784        145    4  357 #> 1785        179    5  357 #> 1786         NA    1  358 #> 1787          0    2  358 #> 1788         48    3  358 #> 1789         79    4  358 #> 1790         26    5  358 #> 1791         NA    1  359 #> 1792          0    2  359 #> 1793         31    3  359 #> 1794         45    4  359 #> 1795         42    5  359 #> 1796         NA    1  360 #> 1797          0    2  360 #> 1798         21    3  360 #> 1799        112    4  360 #> 1800         21    5  360 #> 1801         NA    1  361 #> 1802          0    2  361 #> 1803         32    3  361 #> 1804         77    4  361 #> 1805         96    5  361 #> 1806         NA    1  362 #> 1807          0    2  362 #> 1808         36    3  362 #> 1809         70    4  362 #> 1810         73    5  362 #> 1811         NA    1  363 #> 1812          0    2  363 #> 1813         30    3  363 #> 1814         67    4  363 #> 1815        172    5  363 #> 1816         NA    1  364 #> 1817          0    2  364 #> 1818         52    3  364 #> 1819         58    4  364 #> 1820         15    5  364 #> 1821         NA    1  365 #> 1822          0    2  365 #> 1823         26    3  365 #> 1824         43    4  365 #> 1825         93    5  365 #> 1826         NA    1  366 #> 1827          0    2  366 #> 1828         43    3  366 #> 1829         73    4  366 #> 1830        119    5  366 #> 1831         NA    1  367 #> 1832          0    2  367 #> 1833         34    3  367 #> 1834         98    4  367 #> 1835          8    5  367 #> 1836         NA    1  368 #> 1837          0    2  368 #> 1838         27    3  368 #> 1839         64    4  368 #> 1840        156    5  368 #> 1841         NA    1  369 #> 1842          0    2  369 #> 1843         41    3  369 #> 1844         53    4  369 #> 1845         35    5  369 #> 1846         NA    1  370 #> 1847          0    2  370 #> 1848         28    3  370 #> 1849         73    4  370 #> 1850        317    5  370 #> 1851         NA    1  371 #> 1852          0    2  371 #> 1853         28    3  371 #> 1854        120    4  371 #> 1855         91    5  371 #> 1856         NA    1  372 #> 1857          0    2  372 #> 1858         48    3  372 #> 1859         75    4  372 #> 1860        307    5  372 #> 1861         NA    1  373 #> 1862          0    2  373 #> 1863         20    3  373 #> 1864        124    4  373 #> 1865         90    5  373 #> 1866         NA    1  374 #> 1867          0    2  374 #> 1868         28    3  374 #> 1869        125    4  374 #> 1870         18    5  374 #> 1871         NA    1  375 #> 1872          0    2  375 #> 1873         36    3  375 #> 1874        102    4  375 #> 1875        100    5  375 #> 1876         NA    1  376 #> 1877          0    2  376 #> 1878         30    3  376 #> 1879         71    4  376 #> 1880        147    5  376 #> 1881         NA    1  377 #> 1882          0    2  377 #> 1883         23    3  377 #> 1884         38    4  377 #> 1885        134    5  377 #> 1886         NA    1  378 #> 1887          0    2  378 #> 1888         17    3  378 #> 1889         68    4  378 #> 1890         53    5  378 #> 1891         NA    1  379 #> 1892          0    2  379 #> 1893         47    3  379 #> 1894         72    4  379 #> 1895         20    5  379 #> 1896         NA    1  380 #> 1897          0    2  380 #> 1898         48    3  380 #> 1899         95    4  380 #> 1900          2    5  380 #> 1901         NA    1  381 #> 1902          0    2  381 #> 1903         22    3  381 #> 1904        103    4  381 #> 1905        145    5  381 #> 1906         NA    1  382 #> 1907          0    2  382 #> 1908         48    3  382 #> 1909         43    4  382 #> 1910         74    5  382 #> 1911         NA    1  383 #> 1912          0    2  383 #> 1913         32    3  383 #> 1914         96    4  383 #> 1915         61    5  383 #> 1916         NA    1  384 #> 1917          0    2  384 #> 1918         34    3  384 #> 1919         81    4  384 #> 1920        413    5  384 #> 1921         NA    1  385 #> 1922          0    2  385 #> 1923         33    3  385 #> 1924        104    4  385 #> 1925        565    5  385 #> 1926         NA    1  386 #> 1927          0    2  386 #> 1928         40    3  386 #> 1929         94    4  386 #> 1930         27    5  386 #> 1931         NA    1  387 #> 1932          0    2  387 #> 1933         29    3  387 #> 1934         85    4  387 #> 1935         95    5  387 #> 1936         NA    1  388 #> 1937          0    2  388 #> 1938         66    3  388 #> 1939         79    4  388 #> 1940         53    5  388 #> 1941         NA    1  389 #> 1942          0    2  389 #> 1943         18    3  389 #> 1944         74    4  389 #> 1945        125    5  389 #> 1946         NA    1  390 #> 1947          0    2  390 #> 1948         55    3  390 #> 1949         87    4  390 #> 1950        146    5  390 #> 1951         NA    1  391 #> 1952          0    2  391 #> 1953         66    3  391 #> 1954         79    4  391 #> 1955         68    5  391 #> 1956         NA    1  392 #> 1957          0    2  392 #> 1958         34    3  392 #> 1959         96    4  392 #> 1960         28    5  392 #> 1961         NA    1  393 #> 1962          0    2  393 #> 1963         24    3  393 #> 1964         77    4  393 #> 1965          7    5  393 #> 1966         NA    1  394 #> 1967          0    2  394 #> 1968         47    3  394 #> 1969         80    4  394 #> 1970         57    5  394 #> 1971         NA    1  395 #> 1972          0    2  395 #> 1973         43    3  395 #> 1974         56    4  395 #> 1975         30    5  395 #> 1976         NA    1  396 #> 1977          0    2  396 #> 1978         68    3  396 #> 1979         80    4  396 #> 1980         60    5  396 #> 1981         NA    1  397 #> 1982          0    2  397 #> 1983         19    3  397 #> 1984         73    4  397 #> 1985        187    5  397 #> 1986         NA    1  398 #> 1987          0    2  398 #> 1988         34    3  398 #> 1989         81    4  398 #> 1990        191    5  398 #> 1991         NA    1  399 #> 1992          0    2  399 #> 1993         25    3  399 #> 1994         67    4  399 #> 1995         68    5  399 #> 1996         NA    1  400 #> 1997          0    2  400 #> 1998         50    3  400 #> 1999         87    4  400 #> 2000        136    5  400 #> 2001         NA    1  401 #> 2002          0    2  401 #> 2003         21    3  401 #> 2004         96    4  401 #> 2005         11    5  401 #> 2006         NA    1  402 #> 2007          0    2  402 #> 2008         43    3  402 #> 2009         86    4  402 #> 2010         78    5  402 #> 2011         NA    1  403 #> 2012          0    2  403 #> 2013         65    3  403 #> 2014         77    4  403 #> 2015        139    5  403 #> 2016         NA    1  404 #> 2017          0    2  404 #> 2018         51    3  404 #> 2019         74    4  404 #> 2020         50    5  404 #> 2021         NA    1  405 #> 2022          0    2  405 #> 2023         22    3  405 #> 2024        129    4  405 #> 2025        153    5  405 #> 2026         NA    1  406 #> 2027          0    2  406 #> 2028         30    3  406 #> 2029         75    4  406 #> 2030        191    5  406 #> 2031         NA    1  407 #> 2032          0    2  407 #> 2033         48    3  407 #> 2034         51    4  407 #> 2035         74    5  407 #> 2036         NA    1  408 #> 2037          0    2  408 #> 2038         46    3  408 #> 2039         44    4  408 #> 2040        142    5  408 #> 2041         NA    1  409 #> 2042          0    2  409 #> 2043         52    3  409 #> 2044        139    4  409 #> 2045          1    5  409 #> 2046         NA    1  410 #> 2047          0    2  410 #> 2048         24    3  410 #> 2049         88    4  410 #> 2050         51    5  410 #> 2051         NA    1  411 #> 2052          0    2  411 #> 2053         36    3  411 #> 2054         89    4  411 #> 2055        189    5  411 #> 2056         NA    1  412 #> 2057          0    2  412 #> 2058         23    3  412 #> 2059         86    4  412 #> 2060          3    5  412 #> 2061         NA    1  413 #> 2062          0    2  413 #> 2063         31    3  413 #> 2064         76    4  413 #> 2065         11    5  413 #> 2066         NA    1  414 #> 2067          0    2  414 #> 2068         27    3  414 #> 2069         71    4  414 #> 2070        256    5  414 #> 2071         NA    1  415 #> 2072          0    2  415 #> 2073         31    3  415 #> 2074         54    4  415 #> 2075          3    5  415 #> 2076         NA    1  416 #> 2077          0    2  416 #> 2078         29    3  416 #> 2079         93    4  416 #> 2080        451    5  416 #> 2081         NA    1  417 #> 2082          0    2  417 #> 2083         43    3  417 #> 2084         85    4  417 #> 2085        155    5  417 #> 2086         NA    1  418 #> 2087          0    2  418 #> 2088         88    3  418 #> 2089         52    4  418 #> 2090         76    5  418 #> 2091         NA    1  419 #> 2092          0    2  419 #> 2093         22    3  419 #> 2094         56    4  419 #> 2095        357    5  419 #> 2096         NA    1  420 #> 2097          0    2  420 #> 2098         50    3  420 #> 2099         99    4  420 #> 2100         61    5  420 #> 2101         NA    1  421 #> 2102          0    2  421 #> 2103         35    3  421 #> 2104         60    4  421 #> 2105        210    5  421 #> 2106         NA    1  422 #> 2107          0    2  422 #> 2108         36    3  422 #> 2109         88    4  422 #> 2110         63    5  422 #> 2111         NA    1  423 #> 2112          0    2  423 #> 2113         16    3  423 #> 2114         56    4  423 #> 2115        145    5  423 #> 2116         NA    1  424 #> 2117          0    2  424 #> 2118         43    3  424 #> 2119        109    4  424 #> 2120         49    5  424 #> 2121         NA    1  425 #> 2122          0    2  425 #> 2123         50    3  425 #> 2124         57    4  425 #> 2125        278    5  425 #> 2126         NA    1  426 #> 2127          0    2  426 #> 2128         21    3  426 #> 2129         87    4  426 #> 2130        131    5  426 #> 2131         NA    1  427 #> 2132          0    2  427 #> 2133         33    3  427 #> 2134         91    4  427 #> 2135         45    5  427 #> 2136         NA    1  428 #> 2137          0    2  428 #> 2138         48    3  428 #> 2139         75    4  428 #> 2140        723    5  428 #> 2141         NA    1  429 #> 2142          0    2  429 #> 2143         49    3  429 #> 2144         65    4  429 #> 2145        260    5  429 #> 2146         NA    1  430 #> 2147          0    2  430 #> 2148         33    3  430 #> 2149         90    4  430 #> 2150         74    5  430 #> 2151         NA    1  431 #> 2152          0    2  431 #> 2153         27    3  431 #> 2154        106    4  431 #> 2155        329    5  431 #> 2156         NA    1  432 #> 2157          0    2  432 #> 2158         71    3  432 #> 2159         85    4  432 #> 2160         75    5  432 #> 2161         NA    1  433 #> 2162          0    2  433 #> 2163         55    3  433 #> 2164         97    4  433 #> 2165        230    5  433 #> 2166         NA    1  434 #> 2167          0    2  434 #> 2168         28    3  434 #> 2169         74    4  434 #> 2170         53    5  434 #> 2171         NA    1  435 #> 2172          0    2  435 #> 2173         37    3  435 #> 2174         74    4  435 #> 2175        235    5  435 #> 2176         NA    1  436 #> 2177          0    2  436 #> 2178         44    3  436 #> 2179         58    4  436 #> 2180        569    5  436 #> 2181         NA    1  437 #> 2182          0    2  437 #> 2183         27    3  437 #> 2184         45    4  437 #> 2185         78    5  437 #> 2186         NA    1  438 #> 2187          0    2  438 #> 2188         21    3  438 #> 2189         82    4  438 #> 2190         15    5  438 #> 2191         NA    1  439 #> 2192          0    2  439 #> 2193         19    3  439 #> 2194         48    4  439 #> 2195        124    5  439 #> 2196         NA    1  440 #> 2197          0    2  440 #> 2198         46    3  440 #> 2199         60    4  440 #> 2200         16    5  440 #> 2201         NA    1  441 #> 2202          0    2  441 #> 2203         66    3  441 #> 2204         56    4  441 #> 2205         20    5  441 #> 2206         NA    1  442 #> 2207          0    2  442 #> 2208         53    3  442 #> 2209        130    4  442 #> 2210        188    5  442 #> 2211         NA    1  443 #> 2212          0    2  443 #> 2213         47    3  443 #> 2214         95    4  443 #> 2215        138    5  443 #> 2216         NA    1  444 #> 2217          0    2  444 #> 2218         22    3  444 #> 2219         78    4  444 #> 2220        146    5  444 #> 2221         NA    1  445 #> 2222          0    2  445 #> 2223         35    3  445 #> 2224         76    4  445 #> 2225        259    5  445 #> 2226         NA    1  446 #> 2227          0    2  446 #> 2228         35    3  446 #> 2229        113    4  446 #> 2230        222    5  446 #> 2231         NA    1  447 #> 2232          0    2  447 #> 2233         43    3  447 #> 2234         93    4  447 #> 2235        176    5  447 #> 2236         NA    1  448 #> 2237          0    2  448 #> 2238         40    3  448 #> 2239         81    4  448 #> 2240        256    5  448 #> 2241         NA    1  449 #> 2242          0    2  449 #> 2243         33    3  449 #> 2244         90    4  449 #> 2245          6    5  449 #> 2246         NA    1  450 #> 2247          0    2  450 #> 2248         40    3  450 #> 2249        132    4  450 #> 2250        112    5  450 #> 2251         NA    1  451 #> 2252          0    2  451 #> 2253         18    3  451 #> 2254        110    4  451 #> 2255          5    5  451 #> 2256         NA    1  452 #> 2257          0    2  452 #> 2258         35    3  452 #> 2259         85    4  452 #> 2260         28    5  452 #> 2261         NA    1  453 #> 2262          0    2  453 #> 2263         41    3  453 #> 2264         78    4  453 #> 2265          3    5  453 #> 2266         NA    1  454 #> 2267          0    2  454 #> 2268         48    3  454 #> 2269         87    4  454 #> 2270        939    5  454 #> 2271         NA    1  455 #> 2272          0    2  455 #> 2273         29    3  455 #> 2274        119    4  455 #> 2275        212    5  455 #> 2276         NA    1  456 #> 2277          0    2  456 #> 2278         49    3  456 #> 2279         61    4  456 #> 2280          9    5  456 #> 2281         NA    1  457 #> 2282          0    2  457 #> 2283         28    3  457 #> 2284         73    4  457 #> 2285         60    5  457 #> 2286         NA    1  458 #> 2287          0    2  458 #> 2288         22    3  458 #> 2289         67    4  458 #> 2290          1    5  458 #> 2291         NA    1  459 #> 2292          0    2  459 #> 2293         31    3  459 #> 2294         76    4  459 #> 2295          2    5  459 #> 2296         NA    1  460 #> 2297          0    2  460 #> 2298         33    3  460 #> 2299        131    4  460 #> 2300         39    5  460 #> 2301         NA    1  461 #> 2302          0    2  461 #> 2303         38    3  461 #> 2304         76    4  461 #> 2305         27    5  461 #> 2306         NA    1  462 #> 2307          0    2  462 #> 2308         27    3  462 #> 2309        108    4  462 #> 2310        522    5  462 #> 2311         NA    1  463 #> 2312          0    2  463 #> 2313         40    3  463 #> 2314         63    4  463 #> 2315         84    5  463 #> 2316         NA    1  464 #> 2317          0    2  464 #> 2318         30    3  464 #> 2319         87    4  464 #> 2320         69    5  464 #> 2321         NA    1  465 #> 2322          0    2  465 #> 2323         30    3  465 #> 2324        114    4  465 #> 2325         12    5  465 #> 2326         NA    1  466 #> 2327          0    2  466 #> 2328         45    3  466 #> 2329         48    4  466 #> 2330        170    5  466 #> 2331         NA    1  467 #> 2332          0    2  467 #> 2333         45    3  467 #> 2334         50    4  467 #> 2335         22    5  467 #> 2336         NA    1  468 #> 2337          0    2  468 #> 2338         38    3  468 #> 2339         94    4  468 #> 2340        358    5  468 #> 2341         NA    1  469 #> 2342          0    2  469 #> 2343         18    3  469 #> 2344         46    4  469 #> 2345        111    5  469 #> 2346         NA    1  470 #> 2347          0    2  470 #> 2348         26    3  470 #> 2349         83    4  470 #> 2350         38    5  470 #> 2351         NA    1  471 #> 2352          0    2  471 #> 2353         27    3  471 #> 2354        114    4  471 #> 2355        167    5  471 #> 2356         NA    1  472 #> 2357          0    2  472 #> 2358         67    3  472 #> 2359         90    4  472 #> 2360        210    5  472 #> 2361         NA    1  473 #> 2362          0    2  473 #> 2363         27    3  473 #> 2364         82    4  473 #> 2365         25    5  473 #> 2366         NA    1  474 #> 2367          0    2  474 #> 2368         67    3  474 #> 2369         80    4  474 #> 2370        137    5  474 #> 2371         NA    1  475 #> 2372          0    2  475 #> 2373         30    3  475 #> 2374         70    4  475 #> 2375         51    5  475 #> 2376         NA    1  476 #> 2377          0    2  476 #> 2378         17    3  476 #> 2379         90    4  476 #> 2380        347    5  476 #> 2381         NA    1  477 #> 2382          0    2  477 #> 2383         44    3  477 #> 2384         72    4  477 #> 2385        139    5  477 #> 2386         NA    1  478 #> 2387          0    2  478 #> 2388         41    3  478 #> 2389        163    4  478 #> 2390         81    5  478 #> 2391         NA    1  479 #> 2392          0    2  479 #> 2393         37    3  479 #> 2394         79    4  479 #> 2395          1    5  479 #> 2396         NA    1  480 #> 2397          0    2  480 #> 2398         54    3  480 #> 2399         76    4  480 #> 2400         48    5  480 #> 2401         NA    1  481 #> 2402          0    2  481 #> 2403         37    3  481 #> 2404        170    4  481 #> 2405        552    5  481 #> 2406         NA    1  482 #> 2407          0    2  482 #> 2408         62    3  482 #> 2409        152    4  482 #> 2410         19    5  482 #> 2411         NA    1  483 #> 2412          0    2  483 #> 2413         37    3  483 #> 2414         77    4  483 #> 2415        390    5  483 #> 2416         NA    1  484 #> 2417          0    2  484 #> 2418         26    3  484 #> 2419         91    4  484 #> 2420          3    5  484 #> 2421         NA    1  485 #> 2422          0    2  485 #> 2423         29    3  485 #> 2424         77    4  485 #> 2425          4    5  485 #> 2426         NA    1  486 #> 2427          0    2  486 #> 2428         29    3  486 #> 2429         84    4  486 #> 2430         29    5  486 #> 2431         NA    1  487 #> 2432          0    2  487 #> 2433         32    3  487 #> 2434        134    4  487 #> 2435         16    5  487 #> 2436         NA    1  488 #> 2437          0    2  488 #> 2438         29    3  488 #> 2439         82    4  488 #> 2440        327    5  488 #> 2441         NA    1  489 #> 2442          0    2  489 #> 2443         34    3  489 #> 2444        120    4  489 #> 2445        244    5  489 #> 2446         NA    1  490 #> 2447          0    2  490 #> 2448         30    3  490 #> 2449         89    4  490 #> 2450        110    5  490 #> 2451         NA    1  491 #> 2452          0    2  491 #> 2453         18    3  491 #> 2454         47    4  491 #> 2455         19    5  491 #> 2456         NA    1  492 #> 2457          0    2  492 #> 2458         26    3  492 #> 2459         80    4  492 #> 2460         46    5  492 #> 2461         NA    1  493 #> 2462          0    2  493 #> 2463         35    3  493 #> 2464         94    4  493 #> 2465        120    5  493 #> 2466         NA    1  494 #> 2467          0    2  494 #> 2468         54    3  494 #> 2469         55    4  494 #> 2470        154    5  494 #> 2471         NA    1  495 #> 2472          0    2  495 #> 2473         32    3  495 #> 2474        108    4  495 #> 2475        172    5  495 #> 2476         NA    1  496 #> 2477          0    2  496 #> 2478         41    3  496 #> 2479         56    4  496 #> 2480        115    5  496 #> 2481         NA    1  497 #> 2482          0    2  497 #> 2483         57    3  497 #> 2484         64    4  497 #> 2485         12    5  497 #> 2486         NA    1  498 #> 2487          0    2  498 #> 2488         44    3  498 #> 2489         67    4  498 #> 2490        185    5  498 #> 2491         NA    1  499 #> 2492          0    2  499 #> 2493         28    3  499 #> 2494        118    4  499 #> 2495        285    5  499 #> 2496         NA    1  500 #> 2497          0    2  500 #> 2498         30    3  500 #> 2499        111    4  500 #> 2500        221    5  500"},{"path":"https://baselinenowcast.epinowcast.org/reference/truncate_triangle.html","id":null,"dir":"Reference","previous_headings":"","what":"Get a single truncated triangle — truncate_triangle","title":"Get a single truncated triangle — truncate_triangle","text":"function takes integer t reporting triangle generates truncated reporting triangle, remove last t observations.","code":""},{"path":"https://baselinenowcast.epinowcast.org/reference/truncate_triangle.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get a single truncated triangle — truncate_triangle","text":"","code":"truncate_triangle(t, reporting_triangle)"},{"path":"https://baselinenowcast.epinowcast.org/reference/truncate_triangle.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get a single truncated triangle — truncate_triangle","text":"t Integer indicating number timepoints truncate bottom original reporting triangle. reporting_triangle Matrix reporting triangle, rows representing time points reference columns representing delays. Can reporting matrix incomplete reporting matrix. Can also ragged reporting triangle, multiple columns reported row. (e.g. weekly reporting daily data).","code":""},{"path":"https://baselinenowcast.epinowcast.org/reference/truncate_triangle.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get a single truncated triangle — truncate_triangle","text":"trunc_rep_tri Matrix t fewer rows reporting_triangle.","code":""},{"path":"https://baselinenowcast.epinowcast.org/reference/truncate_triangle.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get a single truncated triangle — truncate_triangle","text":"","code":"# example code triangle <- matrix(   c(     65, 46, 21, 7,     70, 40, 20, 5,     80, 50, 10, 10,     100, 40, 31, 20,     95, 45, 21, NA,     82, 42, NA, NA,     70, NA, NA, NA   ),   nrow = 7,   byrow = TRUE )  trunc_rep_tri <- truncate_triangle(t = 1, reporting_triangle = triangle) trunc_rep_tri #>      [,1] [,2] [,3] [,4] #> [1,]   65   46   21    7 #> [2,]   70   40   20    5 #> [3,]   80   50   10   10 #> [4,]  100   40   31   20 #> [5,]   95   45   21   NA #> [6,]   82   42   NA   NA"},{"path":"https://baselinenowcast.epinowcast.org/reference/truncate_triangles.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate truncated reporting triangles — truncate_triangles","title":"Generate truncated reporting triangles — truncate_triangles","text":"function ingests reporting triangle/matrix number truncated reporting triangles want create, n, iteratively truncates reporting triangle, working latest reference time (bottom) older reference times (top) n snapshots.","code":""},{"path":"https://baselinenowcast.epinowcast.org/reference/truncate_triangles.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate truncated reporting triangles — truncate_triangles","text":"","code":"truncate_triangles(   reporting_triangle,   n = nrow(reporting_triangle) - sum(is.na(rowSums(reporting_triangle))) - 1 )"},{"path":"https://baselinenowcast.epinowcast.org/reference/truncate_triangles.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate truncated reporting triangles — truncate_triangles","text":"reporting_triangle Matrix reporting triangle, rows representing time points reference columns representing delays. Can reporting matrix incomplete reporting matrix. Can also ragged reporting triangle, multiple columns reported row. (e.g. weekly reporting daily data). n Integer indicating number retrospective truncated triangles generated, always starting recent reference time. Default generate truncated matrices row insufficient rows generate nowcasts , minimum requirement one  number horizon rows (rows containing NAs).","code":""},{"path":"https://baselinenowcast.epinowcast.org/reference/truncate_triangles.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate truncated reporting triangles — truncate_triangles","text":"trunc_rep_tri_list List n truncated reporting triangle matrices many rows available given truncation, number columns reporting_triangle.","code":""},{"path":"https://baselinenowcast.epinowcast.org/reference/truncate_triangles.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate truncated reporting triangles — truncate_triangles","text":"","code":"triangle <- matrix(   c(     65, 46, 21, 7,     70, 40, 20, 5,     80, 50, 10, 10,     100, 40, 31, 20,     95, 45, 21, NA,     82, 42, NA, NA,     70, NA, NA, NA   ),   nrow = 7,   byrow = TRUE )  truncated_rts <- truncate_triangles(triangle, n = 2) truncated_rts[1:2] #> [[1]] #>      [,1] [,2] [,3] [,4] #> [1,]   65   46   21    7 #> [2,]   70   40   20    5 #> [3,]   80   50   10   10 #> [4,]  100   40   31   20 #> [5,]   95   45   21   NA #> [6,]   82   42   NA   NA #>  #> [[2]] #>      [,1] [,2] [,3] [,4] #> [1,]   65   46   21    7 #> [2,]   70   40   20    5 #> [3,]   80   50   10   10 #> [4,]  100   40   31   20 #> [5,]   95   45   21   NA #>"},{"path":"https://baselinenowcast.epinowcast.org/news/index.html","id":"baselinenowcast-0001000","dir":"Changelog","previous_headings":"","what":"baselinenowcast 0.0.0.1000","title":"baselinenowcast 0.0.0.1000","text":"Refactor estimate_uncertainty take error model function, aggregator function aggregating across reference times, aggregator function aggregating across delays. Fix internal checks ensure sufficient data specified target choice, using number NA rows rather number columns proxy number horizons. Replace argument names complete versions possible. Replace function names action-oriented function naming. Add new logo. Add check ensure sufficient non-zero values reporting triangle. Add check ensure sufficient n specified delay estimate. Change requirement number rows used delay estimation need greater equal number columns, instead least one row contains full set observations. Bug fix change requirement sum elements structure vector must greater number columns. Add support passing restricted set functions estimate_dispersion() function transform “target” dataset across reference dates. Implements safe iterator step retrospective point nowcasts generated list retrospective reporting triangles, ensuring iterations continue even retrospective point nowcasts can generated. Modify vignette consistent decided upon defaults number reference times used delay estimation uncertainty. Replace function named replace_lower_right_with_NA() generate_triangle(). Removes requirement elements reporting triangle integers. Modify method used estimate dispersion. Instead estimating dispersion individual elements nowcast matrix, now estimate dispersion predicted nowcasts summed across reporting dates function forecast horizon. Standardises naming objects matrices vs vectors objects contain observations, point estimates, probabilistic draws. Modifies functions estimate delay generate point nowcast ensure throw error/warning first element delay PMF 0. Adjusts function estimate delay distribution able handle complete partially complete reporting triangles. Add function convert list expected observed reporting squares long tidy dataframe indexed reference time, delay, sample index. Implement zero-handling bottom left reporting triangle applying delay generate point nowcast. Add function generate list expected observed reporting squares. Add function generate expected observed reporting square point nowcast vector dispersion parameters. Add function estimate dispersion parameters match list nowcasts observed reporting triangles. Add functions generate retrospective nowcasts single reporting triangle. Refactor uncertainty estimation use user-facing function generate retrospective reporting triangles. Methods write-separate vignette. Introduced function estimate uncertainty triangle nowcasted delay distribution. Introduced functions get delay estimate apply delay, used Getting Started vignette. Added package skeleton.","code":""}]
