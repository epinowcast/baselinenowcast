[{"path":"https://baselinenowcast.epinowcast.org/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2025 baselinenowcast authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://baselinenowcast.epinowcast.org/articles/baselinenowcast.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Getting Started with baselinenowcast","text":"Incomplete reporting epidemiological data recent times can result case count data right-truncated. Right-truncated case counts can misleading interpret face-value, typically show decline number reported observations recent time points. time points highest proportion data yet observed dataset. imputation cases eventually observed current time referred nowcast. number methods developed nowcast epidemiological case count data. purpose baselinenowcast provide nowcast computed directly recent observations estimate delay distribution empirically, apply partially observed data generate nowcast. section, describe example nowcasting problem, demonstrate use baselinenowcast estimate delay distribution data apply estimate generate probabilistic nowcast. example walk low-level functionality “default” model permutation. future vignettes, demonstrate examples create complex model permutations. details mathematical methods provided mathematical model vignette.","code":""},{"path":"https://baselinenowcast.epinowcast.org/articles/baselinenowcast.html","id":"packages","dir":"Articles","previous_headings":"","what":"Packages","title":"Getting Started with baselinenowcast","text":"well baselinenowcast package vignette also uses epinowcast,ggplot2, tidyr, dplyr. installation epinowcast required using package. however, pre post-processing functions provide lot data wrangling needed set nowcasting problem. note just using components epinowcast, can installed using following:","code":"# nolint start # Installing epinowcast # install.packages( #  \"epinowcast\", repos = \"https://epinowcast.r-universe.dev\" # ) #nolint # nolint end # Load packages library(baselinenowcast) library(epinowcast) library(ggplot2) library(dplyr) library(tidyr) # Set seed for reproducibility set.seed(123)"},{"path":"https://baselinenowcast.epinowcast.org/articles/baselinenowcast.html","id":"data","dir":"Articles","previous_headings":"","what":"Data","title":"Getting Started with baselinenowcast","text":"Nowcasting right-truncated case counts involves estimation reporting delays recently reported data. , need case counts indexed diagnosed (often called “reference date”) reported (.e. administratively recorded via public health surveillance; often called “report date”). difference reference date report date reporting delay. quick start, use daily level data Robert Koch Institute via Germany Nowcasting hub. data represent hospital admission counts date positive test date test report Germany October 1, 2021. filter data just look national-level data, age groups. pretend making nowcast August 1, 2021, therefore exclude reference dates report dates date. germany_covid19_hosp provided package data epinowcast. Let’s start plotting sum reports reference date, compare eventually observe latest date complete dataset (data available October 1, 2021). epinowcast function enw_latest_data() used filter observations latest available reported total counts reference date. epinowcast function enw_filter_report_dates() used create truncated dataset generating retrospective nowcast, using data available nowcast date. Using observed data nowcast date (observed_data) enw_latest_data() function, make plot latest total number confirmed cases reference date. plot chunk plot-data red line shows total number confirmed admissions reference date, across delays, using data available August 1, 2021. demonstrates characteristic behaviour right-truncation. yet observed data longer delays recent time points. black line shows total number confirmed admissions reference date October 1, 2021. task estimate, data available August 1, 2021, “final” total number cases reference date.","code":"nowcast_date <- \"2021-08-01\" eval_date <- \"2021-10-01\"  target_data <- germany_covid19_hosp[location == \"DE\"][age_group == \"00+\"] |>   enw_filter_report_dates(latest_date = eval_date) |>   enw_filter_reference_dates(     latest_date = nowcast_date   ) latest_data <- enw_latest_data(target_data) observed_data <- enw_filter_report_dates(   target_data,   latest_date = nowcast_date )  head(observed_data) #>    reference_date location age_group confirm report_date #>            <IDat>   <fctr>    <fctr>   <int>      <IDat> #> 1:     2021-04-06       DE       00+     149  2021-04-06 #> 2:     2021-04-07       DE       00+     312  2021-04-07 #> 3:     2021-04-08       DE       00+     424  2021-04-08 #> 4:     2021-04-09       DE       00+     288  2021-04-09 #> 5:     2021-04-10       DE       00+     273  2021-04-10 #> 6:     2021-04-11       DE       00+     107  2021-04-11 obs_data_by_reference_date <- enw_latest_data(observed_data) ggplot() +   geom_line(     data = obs_data_by_reference_date,     aes(x = reference_date, y = confirm), color = \"darkred\"   ) +   geom_line(     data = latest_data,     aes(x = reference_date, y = confirm), color = \"black\"   ) +   theme_bw() +   xlab(\"Reference date\") +   ylab(\"Confirmed admissions\") +   scale_y_continuous(trans = \"log10\") +   ggtitle(\"Comparing real-time and later observed cases\")"},{"path":"https://baselinenowcast.epinowcast.org/articles/baselinenowcast.html","id":"pre-processing","dir":"Articles","previous_headings":"","what":"Pre-processing","title":"Getting Started with baselinenowcast","text":"order compute nowcast data, need start creating call reporting triangle. See nomenclature vignette details structure naming different components used package. entries reporting triangle represent number new cases assigned reference time point particular delay, entries bottom right triangle missing data reported longer delays yet observed recent reference times. reporting triangle used estimate delay distribution, proportion final number cases reported particular delay. example, fit delay distribution, apply generate nowcast matrix using data, national level data Germany age groups. recommend choosing maximum delay number historical observations based exploratory data analysis, specifications change significantly depending dataset. Empirical data outside delay window used training. use 3 times maximum delay total training volume. ’ll use recent 50% reference times delay estimation. uncertainty estimation, generate retrospective nowcast datasets recent 50% reference times. means order estimate delay using amount data, oldest retrospective nowcast dataset use first 50% reference times. Note uses recent observations. Next use epinowcast function, enw_filter_reference_dates() filter include n_training_volume days historical data. epinowcast function enw_latest_data() used filter latest available reported total counts reference date. obtain data want evaluate forecasts , use enw_filter_reference_dates() applied target_data, filter n_training_volume days historical data. Next obtain reporting triangle, adding additional day max_delay want max_delay + 1 entries since 0 valid delay. also validates data correct format runs preprocessing see enw_preprocess_data() details. Extract components pobs, epinowcast object. one group need reference_date, delay, new_confirm. now pivot wide format, dropping reference_date column, convert matrix format low-level functions baselinenowcast expect. plot chunk make-heatmap-reporting-triangle , grey indicates matrix elements NA, expect case bottom right portion reporting triangle counts yet observed.","code":"max_delay <- 30 n_training_volume <- 3 * max_delay n_history_delay <- as.integer(0.5 * n_training_volume) n_retrospective_nowcasts <- as.integer(0.5 * n_training_volume) training_data <- enw_filter_reference_dates(   observed_data,   include_days = n_training_volume - 1 ) latest_training_data <- enw_latest_data(training_data) eval_data <- enw_filter_reference_dates(   latest_data,   include_days = n_training_volume - 1 ) pobs <- enw_preprocess_data(   obs = training_data,   max_delay = max_delay + 1 ) reporting_triangle_df <- select(   pobs$new_confirm[[1]],   reference_date,   delay,   new_confirm ) reporting_triangle <- reporting_triangle_df |>   pivot_wider(names_from = delay, values_from = new_confirm) |>   select(-reference_date) |>   as.matrix() triangle_df <- as.data.frame(reporting_triangle) |>   mutate(time = row_number()) |>   pivot_longer(!time,     values_to = \"count\",     names_prefix = \"V\",     names_to = \"delay\"   ) |>   mutate(delay = as.numeric(delay))  ggplot(   triangle_df,   aes(x = delay, y = time, fill = count) ) +   geom_tile() +   scale_fill_gradient(low = \"white\", high = \"blue\") +   labs(title = \"Reporting triangle\", x = \"Delay\", y = \"Time\") +   theme_bw() +   scale_y_reverse()"},{"path":"https://baselinenowcast.epinowcast.org/articles/baselinenowcast.html","id":"estimate-delay","dir":"Articles","previous_headings":"","what":"Estimate delay","title":"Getting Started with baselinenowcast","text":"Now reporting triangle, now ready pass baselinenowcast package estimate delay distribution. tell function maximum delay number observations want use estimation. want pass reporting triangle (single group!) function. See documentation estimate_delay() full description function inputs. plot chunk plot-delay plot chunk plot-delay","code":"delay_pmf <- estimate_delay(   reporting_triangle = reporting_triangle,   max_delay = max_delay,   n = n_history_delay ) delay_df <- data.frame(   delay = 0:(length(delay_pmf) - 1),   pmf = delay_pmf )  ggplot(delay_df) +   geom_line(aes(x = delay, y = cumsum(pmf))) +   xlab(\"Delay\") +   ylab(\"Cumulative proportion reported\") +   ggtitle(\"Empirical point estimate of cumulative proportion reported by delay\") + # nolint   theme_bw() ggplot(delay_df) +   geom_line(aes(x = delay, y = pmf)) +   xlab(\"Delay\") +   ylab(\"Proportion reported\") +   ggtitle(\"Empirical point estimate of proportion reported by delay\") +   theme_bw()"},{"path":"https://baselinenowcast.epinowcast.org/articles/baselinenowcast.html","id":"apply-the-delay-to-generate-a-point-nowcast","dir":"Articles","previous_headings":"","what":"Apply the delay to generate a point nowcast","title":"Getting Started with baselinenowcast","text":"next step workflow take estimated delay distribution apply partially observed reporting triangle, generating estimate number new cases confirmed reference date delay. generate point estimate complete reporting matrix. case, applying delay reporting triangle used generate estimate, doesn’t always case. See documentation apply_delay() full description input requirements. worth noting also estimated delay applied one single step calling generate_pt_nowcast_mat(). subsequent steps estimate uncertainty, delay estimation generating point nowcast matrix happen single step. ’ll make quick plot compare point estimate nowcasted confirmed cases August 1, 2021, “final” observations October 1, 2021 right-truncated data available August 1, 2021. plot chunk unnamed-chunk-1 can see point nowcast (blue) slightly underestimates eventually reported (black), decent overall job correcting right-truncation observed data nowcast date (red).","code":"point_nowcast_matrix <- apply_delay(   rep_tri_to_nowcast = reporting_triangle,   delay_pmf = delay_pmf ) point_nowcast_df <- eval_data |>   mutate(nowcast = rowSums(point_nowcast_matrix))  prep_latest_data <- latest_training_data |>   mutate(type = \"Real-time data\") |>   select(type, reference_date, count = confirm) # Combine data into a single dataframe for plotting plot_data <- point_nowcast_df |>   pivot_longer(     cols = c(confirm, nowcast),     names_to = \"type\",     values_to = \"count\"   ) |>   mutate(type = case_when(     type == \"confirm\" ~ \"Final observed data\",     type == \"nowcast\" ~ \"Point nowcast\",     TRUE ~ type   )) |>   bind_rows(prep_latest_data)  # Create plot with data type as a variable ggplot(plot_data, aes(x = reference_date, y = count, color = type)) +   geom_line() +   scale_color_manual(values = c(     \"Real-time data\" = \"darkred\",     \"Final observed data\" = \"black\",     \"Point nowcast\" = \"darkblue\"   )) +   theme_bw() +   xlab(\"Reference date\") +   ylab(\"Confirmed admissions\") +   scale_y_continuous(trans = \"log10\") +   ggtitle(\"Comparing real-time, nowcasted, and later observed cases\") +   theme(legend.position = \"bottom\") +   labs(color = \"Type\")"},{"path":"https://baselinenowcast.epinowcast.org/articles/baselinenowcast.html","id":"estimate-uncertainty","dir":"Articles","previous_headings":"","what":"Estimate uncertainty","title":"Getting Started with baselinenowcast","text":"far, ’ve demonstrated generate point estimate nowcast. like generate probabilistic nowcasts. method used estimate uncertainty works generating retrospective reporting triangles using available retrospective nowcast time estimate delay distribution, generate point nowcast matrix, compare estimated counts reference time observed nowcast horizon. assumes observations follow negative binomial observation model, independently estimates dispersion negative binomial forecast horizon. repeat process n_retrospective_nowcasts reference times current reporting triangle, starting latest reference time working backwards, ultimately using n_retrospective_nowcasts n_history_delay reference times. results list retrospective reporting triangles. See documentation truncate_triangles() construct_triangles() information inputs outputs functions. Next pass list reporting triangles fill_triangles() specify n, number reference times used estimate delay nowcast, set n_history_delay previous specified. Next, use retrospective reporting triangles, point nowcast matrices, truncated reporting triangles estimate uncertainty horizon, starting horizon 0 using estimate_uncertainty() function.","code":"trunc_rep_tri_list <- truncate_triangles(reporting_triangle,   n = n_retrospective_nowcasts ) retro_rep_tri_list <- construct_triangles(trunc_rep_tri_list) retro_pt_nowcast_mat_list <- fill_triangles(   reporting_triangle_list = retro_rep_tri_list,   n = n_history_delay ) disp_params <- estimate_uncertainty(   pt_nowcast_mat_list = retro_pt_nowcast_mat_list,   trunc_rep_tri_list = trunc_rep_tri_list,   reporting_triangle_list = retro_rep_tri_list,   n = n_retrospective_nowcasts )"},{"path":"https://baselinenowcast.epinowcast.org/articles/baselinenowcast.html","id":"generate-probabilistic-nowcast","dir":"Articles","previous_headings":"","what":"Generate probabilistic nowcast","title":"Getting Started with baselinenowcast","text":"Now estimated dispersion, can generate probabilistic nowcast using sample_nowcasts() function : generates draws nowcast distribution combines draws observed data form single draw nowcast repeats process draws draws See documentation sample_nowcasts()details.","code":"nowcast_draws_df <- sample_nowcasts(   point_nowcast_matrix, reporting_triangle,   dispersion = disp_params,   draws = 100 )  head(nowcast_draws_df) #>   pred_count time draw #> 1        736    1    1 #> 2        897    2    1 #> 3        893    3    1 #> 4        804    4    1 #> 5        722    5    1 #> 6        492    6    1"},{"path":"https://baselinenowcast.epinowcast.org/articles/baselinenowcast.html","id":"visualizing-the-nowcast","dir":"Articles","previous_headings":"","what":"Visualizing the nowcast","title":"Getting Started with baselinenowcast","text":"Let’s visualize nowcast compared final observed data. first need join nowcast original data can see nowcast reference date. Prepare data nowcast date, latest_training_data can map nowcast draws onto . Prepare final evaluation data can combine datasets. Join nowcasts, data nowcast date, final data. Create separate dataframe observed final data, make plotting easier. plot chunk plot-probablistic-nowcasts Gray lines indicate probabilistic nowcast draws, combination already observed data reference date predicted nowcast draws reference date. Black lines show “final” data October 1, 2021.","code":"latest_data_prepped <- latest_training_data |>   mutate(time = row_number()) |>   rename(obs_confirm = confirm) |>   mutate(reference_date = as.Date(reference_date)) final_data_prepped <- eval_data |>   select(reference_date, final_confirm = confirm) |>   mutate(reference_date = as.Date(reference_date)) obs_with_nowcast_draws_df <- nowcast_draws_df |>   left_join(latest_data_prepped, by = \"time\") |>   left_join(final_data_prepped, by = \"reference_date\") head(obs_with_nowcast_draws_df) #>   pred_count time draw reference_date location age_group obs_confirm #> 1        736    1    1     2021-05-04       DE       00+         823 #> 2        897    2    1     2021-05-05       DE       00+        1028 #> 3        893    3    1     2021-05-06       DE       00+        1016 #> 4        804    4    1     2021-05-07       DE       00+         892 #> 5        722    5    1     2021-05-08       DE       00+         822 #> 6        492    6    1     2021-05-09       DE       00+         561 #>   report_date final_confirm #> 1  2021-07-24           823 #> 2  2021-07-25          1028 #> 3  2021-07-26          1016 #> 4  2021-07-27           892 #> 5  2021-07-28           822 #> 6  2021-07-29           561 combined_data <- obs_with_nowcast_draws_df |>   select(reference_date, obs_confirm, final_confirm) |>   distinct() |>   pivot_longer(     cols = c(obs_confirm, final_confirm),     names_to = \"type\",     values_to = \"count\"   ) |>   mutate(type = case_when(     type == \"obs_confirm\" ~ \"Observed data\",     type == \"final_confirm\" ~ \"Final observed data\"   )) # Plot with draws for nowcast only ggplot() +   # Add nowcast draws as thin gray lines   geom_line(     data = obs_with_nowcast_draws_df,     aes(       x = reference_date, y = pred_count, group = draw,       color = \"Nowcast draw\", linewidth = \"Nowcast draw\"     )   ) +   # Add observed data and final data once   geom_line(     data = combined_data,     aes(       x = reference_date,       y = count,       color = type,       linewidth = type     )   ) +   theme_bw() +   scale_color_manual(     values = c(       \"Nowcast draw\" = \"gray\",       \"Observed data\" = \"darkred\",       \"Final observed data\" = \"black\"     ),     name = \"\"   ) +   scale_linewidth_manual(     values = c(       \"Nowcast draw\" = 0.2,       \"Observed data\" = 1,       \"Final observed data\" = 1     ),     name = \"\"   ) +   scale_y_continuous(trans = \"log10\") +   xlab(\"Reference date\") +   ylab(\"Hospital admissions\") +   theme(legend.position = \"bottom\") +   ggtitle(\"Comparison of admissions as of the nowcast date, later observed counts, \\n and probabilistic nowcasted counts\") # nolint"},{"path":"https://baselinenowcast.epinowcast.org/articles/model_definition.html","id":"overview","dir":"Articles","previous_headings":"","what":"Overview","title":"Mathematical methods for baselinenowcast","text":"baselinenowcast model based reference model COVID-19 hospital admissions nowcasting challenge Germany 2021 2022[1]. Using slight variation chain ladder method[2], method uses preliminary case counts empirical delay distributions estimate yet---observed cases. Probabilistic nowcasts generated using observation model means point nowcast uncertainty estimated past nowcast errors. Users can flexibly specify data like use delay estimation uncertainty quantification, well specify parametric form observation model used uncertainty quantification. Time steps can correspond time unit. See Default Settings section full description default behaviour baselinenowcast() method.","code":""},{"path":"https://baselinenowcast.epinowcast.org/articles/model_definition.html","id":"notation","dir":"Articles","previous_headings":"Overview","what":"Notation","title":"Mathematical methods for baselinenowcast","text":"denote \\(X_{t,d}, d = 0, \\dots, D\\) number cases occurring time \\(t\\) appear dataset delay \\(d\\). example, delay \\(d = 0\\) means case occurring day \\(t\\) arrived dataset day \\(t\\). consider cases reporting within maximum delay \\(D\\). number cases reporting time \\(t\\) delay \\(d\\) can written : \\[ X_{t, \\le d} = \\sum_{=0}^d X_{t,} \\] special case “final” number reported cases time \\(t\\), denoted \\[ X_t = X_{t, \\le D} = \\sum_{=0}^D X_{t,} \\]{#eq:Xltd} delays \\(d < D\\) define notation \\[X_{t,>d} = \\sum_{= d+1} ^{D} X_{t,}\\] representing number cases still missing \\(d\\) delay. following use uppercase letters (\\(X_t\\)) random variables, lower case (\\(x_t\\)) corresponding observations, hats (\\(\\hat{x}_t\\)) estimated/imputed values. refer \\(X_t\\) describe random variable, \\(x_t\\) corresponding observation, \\(\\hat{x}_t\\) estimated/imputed value. matrix \\(\\mathbf{x}\\) entries \\(x_{t,d}, t = 1, \\dots, t^*, d = 1, \\dots, D\\) referred reporting matrix. description nowcasting terms used document (e.g. reporting triangle) corresponding abbreviations package, please consult nowcasting nomenclature vignette. case \\(t^*\\) corresponds present date, entries \\(t+d>t^*\\) yet observed thus still missing. available entries bottom form triangle, incomplete reporting matrix referred reporting triangle.","code":""},{"path":"https://baselinenowcast.epinowcast.org/articles/model_definition.html","id":"preprocessing","dir":"Articles","previous_headings":"Overview","what":"Pre-processing of the reporting triangle","title":"Mathematical methods for baselinenowcast","text":"following steps require reporting triangle non-negative entries. practice necessarily case. instance, reporting triangle computed increments subsequent data snapshots, occasional downward corrections due data entrance issues can cause negative entries. therefore apply pre-processing step re-distribute negative entries across neighbouring cells positive entries.","code":""},{"path":[]},{"path":"https://baselinenowcast.epinowcast.org/articles/model_definition.html","id":"estimating-the-delay-distribution-from-a-reporting-matrix","dir":"Articles","previous_headings":"Overview > Delay distribution estimation","what":"Estimating the delay distribution from a reporting matrix","title":"Mathematical methods for baselinenowcast","text":"complete reporting matrix available, estimating discrete-time delay distribution \\(\\pi_d, d = 0, \\dots, D\\) straightforward. Using last \\(N\\) rows reporting matrix \\(\\mathbf{x}\\), compute \\[ \\hat{\\pi}_d= \\frac{\\sum_{t=t^*-N+1}^{t=t^*} x_{t,d}}{\\sum_{t=t^*-N+1}^{t=t^*} x_{t}}, \\]{#eq-pi_d} simply relative frequency delay \\(d\\) days among cases reporting matrix.","code":""},{"path":"https://baselinenowcast.epinowcast.org/articles/model_definition.html","id":"estimating-the-delay-distribution-from-a-reporting-triangle","dir":"Articles","previous_headings":"Overview > Delay distribution estimation","what":"Estimating the delay distribution from a reporting triangle","title":"Mathematical methods for baselinenowcast","text":"case \\(t^*\\) present day, reporting triangle missing entries available, estimator \\(\\hat{\\pi}_d\\) @eq-pi_d can evaluated discarding data last \\(D-1\\) time points. order use partial observations, use different representation delay distribution via terms form \\[ \\theta_d = \\frac{\\pi_d}{\\pi_{\\le d-1}} \\] {#eq:theta_d} \\(d = 1, \\dots, D\\). , analogy [eq-Xltd?] write \\[ \\pi_{\\le d-1} = \\sum_{d'=0}^{d-1} \\pi_d. \\] {#eq:pi_less_than_d} \\(\\theta_d\\) can estimated via \\[ \\hat{\\theta}_d = \\frac{\\sum_{t=t^* - N + 1}^{t^*-d} x_{t, d}}{\\sum_{t= t^* - N + 1}^{t^*-d} x_{t, \\leq d - 1}}, \\] translated estimates \\(\\hat{\\pi}_0,..., \\hat{\\pi}_D\\) via recursion \\[ \\hat{\\pi}_{\\leq d} = (1+\\hat{\\theta}_d)\\hat{\\pi}_{\\leq d-1} \\] subject constrain \\(\\sum_{d = 0}^D \\pi_d = 1\\). note method equivalent -called chain ladder method[2], adapted notation terms reporting triangles (rather development triangles used accounting). intuition behind method described Figure[fig-squares?], basic assumption ratio delays complete observations (navy orange elements matrix) equivalent ratio delays partially observed components matrix (blue yellow elements matrix). delay_estimate() function ingests either reporting matrix reporting triangle uses last n rows compute empirical delay probability mass function (PMF), returning simplex vector indexed starting delay 0.","code":""},{"path":"https://baselinenowcast.epinowcast.org/articles/model_definition.html","id":"point-nowcast-generation","dir":"Articles","previous_headings":"Overview","what":"Point nowcast generation","title":"Mathematical methods for baselinenowcast","text":"now address computation point nowcast, .e., expected final case numbers \\(\\hat{x}_t, t = t^* - D + 1, t^*\\). based reporting triangle, specifically preliminary totals \\(x_{t, \\leq t^* - t}\\), estimated delay distribution, \\(\\hat{\\pi}_d, d = 0, \\dots, D\\). following denote current time \\(t^*\\) nowcast time, time \\(t = t^* - D, \\dots, t^*\\) reference time. difference \\(j = t^* - t\\) called horizon. intuitive approach, used [1] standard chain ladder technique, simply inflate current total reference time \\(t\\) inverse respective probability observation time \\(t^*\\), \\[ \\hat{x}_t =\\frac{x_{t, \\leq t^*-t}}{\\pi_{\\leq t^*-t}}. \\] , however, well-behaved cases \\(t\\) observed yet, .e., \\(x_{t, \\leq t^* - t} = 0\\). \\(\\hat{x}_t\\) likewise zero, yields problems uncertainty quantification method (see next section). Motivated Bayesian argument (see Zero-handling ) therefore use expression \\[ \\hat{x}_t = \\frac{x_{t, \\leq t^*-t} + 1 - \\pi_{\\leq t^*-t}}{\\hat{\\pi}_{t, \\leq t^*-t}} \\] {#eq-correction} instead. yields essentially identical results large \\(x_{t, \\leq t^* - t}\\), produces positive \\(\\hat{x}_t\\) even preliminary zero values \\(x_{t, \\leq t^* - t} = 0\\). uncertainty quantification scheme require estimated totals \\(\\hat{x}_t\\), entries \\(\\hat{x}_{t,d}\\) point nowcast matrix. \\(t = t^* - D + 1, \\dots, t^*, d > t^* - t\\) obtained \\[ \\hat{x}_{t,d} = \\hat{\\pi}_d \\times \\hat{x}_t. \\] apply_delay() function ingests reporting triangle delay PMF returns point nowcast matrix. generation point nowcast described schematic [fig-pt_nowcast?], describing missing elements reporting triangle estimated can used generate point estimate final counts reference time.","code":""},{"path":"https://baselinenowcast.epinowcast.org/articles/model_definition.html","id":"uncertainty-quantification","dir":"Articles","previous_headings":"Overview","what":"Uncertainty quantification","title":"Mathematical methods for baselinenowcast","text":"estimate uncertainty nowcasts, use nowcast errors \\(M\\) past nowcasting time points. See Default Settings details default settings used package define number \\(M\\) past nowcasting time points used.","code":""},{"path":"https://baselinenowcast.epinowcast.org/articles/model_definition.html","id":"generation-of-retrospective-reporting-triangles","dir":"Articles","previous_headings":"Overview > Uncertainty quantification","what":"Generation of retrospective reporting triangles","title":"Mathematical methods for baselinenowcast","text":"first obtain “vintage” reporting triangles raw reporting triangle (.e., pre-processing) replicate data available times \\(s^* = t^*-1, ..., t^*-M\\), .e., last \\(M\\) time points nowcasts generated. simply corresponds stepwise omission entries \\(t + d > s^*\\), \\(s^*\\) diagonal bottom left top right. pre-processing step Section Preprocessing reporting triangle applied vintage reporting triangle. can achieved stepwise manner using functions truncate_triangles() construct_triangles() return list n retrospective reporting triangles order recent oldest.","code":""},{"path":"https://baselinenowcast.epinowcast.org/articles/model_definition.html","id":"generation-of-retrospective-point-nowcast-matrices","dir":"Articles","previous_headings":"Overview > Uncertainty quantification","what":"Generation of retrospective point nowcast matrices","title":"Mathematical methods for baselinenowcast","text":"\\(M\\) vintage reporting triangles, .e., \\(s^* = t^*-1,, ..., t^*-M\\), apply method described estimate delay distribution generate point nowcast matrix using function fill_triangles(). indicate data version based, entries denoted : \\[ \\hat{x}_{t, d}(s^*) \\] \\(t = s^* - D + 1, \\dots, s^*\\) \\(d = s^* - t + 1, \\dots D\\). Note estimation based last \\(N\\) rows respective reporting triangle, must consequently contain least \\(M + N\\) rows total.","code":""},{"path":"https://baselinenowcast.epinowcast.org/articles/model_definition.html","id":"fit-an-observation-model-to-past-nowcast-errors","dir":"Articles","previous_headings":"Overview > Uncertainty quantification","what":"Fit an observation model to past nowcast errors","title":"Mathematical methods for baselinenowcast","text":"point nowcast based reporting triangle time \\(s^*\\) can also written \\[ \\hat{x}_{t}(s^*) = x_{t, \\leq s^* - t} + \\hat{x}_{t, > s^* - t}(s^*). \\] second term associated uncertainty, first already known time \\(s^*\\). quantify uncertainty given nowcast horizon \\(0 \\leq j \\leq D\\), assemble \\(\\hat{x}_{s^* - j, > j}(s^*)\\) \\(x_{s^* - j,> j}\\) \\(s^* = t^* - M, \\dots, t^* - 1\\). default, baselinenowcast() method assumes count data can fit negative binomial observation model, though choice observation model can selected user. Assuming negative binomial observation model, observations complete, estimate overdispersion parameter \\(\\phi_j\\) negative binomial distribution \\[ X_{s^* - j, > j} \\sim \\text{NegBin}[\\hat{x}_{s^* - j, > j}(s^*), \\phi_j], \\]{#eq-negbin} independence assumed across different \\(s^*\\). , however, directly feasible \\(x_{s^* - j, > j}\\) yet observed time \\(t^*\\). discard instances, considerably reduce number available observations. therefore use partial observations available time \\(t^*\\) assume \\[ \\left(\\sum_{d = j + 1}^{\\min(D, t^* - s^*)} X_{s^* - j, d} \\right) \\sim \\text{NegBin}\\left[\\sum_{d = j + 1}^{\\min(D, t^* - s^*)} \\hat{x}_{s^* - j, d}, \\phi_j \\right]. \\]{#eq-negbin2} quantify uncertainty target quantity level, assumed, default, final count reference time, summed across reporting delays. , use constant dispersion parameter \\(\\phi_j\\) despite values fitting procedure yet incomplete justified fact negative binomial distribution closed binomial subsampling, overdispersion parameter preserved. equation[eq-negbin?] holds combination \\[ \\left(\\sum_{d = j + 1}^{\\min(D, t^* - s^*)} X_{s^* - j, d} \\right) \\ | \\ X_{s^* - j, > j} \\sim \\text{Bin}\\left[X_{s^* - j, > j}, \\left(\\sum_{d = j + 1}^{\\min(D, t^* - s^*)} \\pi_{d}\\right) / \\pi_{> j} \\right], \\] thus obtain[eq-negbin2?]. Estimated dispersion parameters \\(\\hat{\\phi}_0, \\dots, \\hat{\\phi}_D\\) obtained maximum likelihood estimation. estimate_uncertainty() function ingests truncated reporting triangles, retrospective reporting triangles, retrospective point nowcasts returns set uncertainty parameters corresponding specified observation model. uncertainty quantification procedure described schematically Figure[fig-uncertainty_quantification?].","code":""},{"path":[]},{"path":"https://baselinenowcast.epinowcast.org/articles/model_definition.html","id":"predicted-probabilistic-nowcast-generation","dir":"Articles","previous_headings":"Overview > Probabilistic nowcast generation","what":"Predicted probabilistic nowcast generation","title":"Mathematical methods for baselinenowcast","text":"Predictive distributions \\(X_{t^*}, \\dots, X_{t^* - D + 1}\\) obtained generating draws observation model, case negative binomial, estimated dispersion parameters mean given predicted component point nowcasts. Specifically, set \\[ X_{t, > t^* - t} \\sim \\text{NegBin}(\\hat{x}_{t, > t^* - t}, \\phi_{t^* - t}). \\] described schematic Figure[fig-predicted_prob_nowcasts?] describes sampling observation model mean given sum predicted components point nowcast matrix (white squares).","code":""},{"path":"https://baselinenowcast.epinowcast.org/articles/model_definition.html","id":"combine-with-observations-to-obtain-probabilistic-nowcasts","dir":"Articles","previous_headings":"Overview > Probabilistic nowcast generation","what":"Combine with observations to obtain probabilistic nowcasts","title":"Mathematical methods for baselinenowcast","text":"predictive distribution \\(X_{t}\\) results shifting distribution already known value \\(x_{t, \\leq t^* - t}\\). described schematic Figure[fig-comb_w_obs?] describes combining right-truncated partial observed data summed across reference times predicted probabilistic nowcast components generate probabilistic nowcasts. sample_nowcasts() function ingests uncertainty parameters, reporting triangle, point nowcast matrix generates probabilistic nowcasts.","code":""},{"path":"https://baselinenowcast.epinowcast.org/articles/model_definition.html","id":"zero-handling-approximation","dir":"Articles","previous_headings":"Overview","what":"Zero-handling strategy","title":"Mathematical methods for baselinenowcast","text":"mentioned Point nowcast generation, use modified point nowcasts deal zero values preliminary counts. motivate approach Bayesian perspective, based work [Morgenstern2025?]. end assume \\[ X_{t, \\leq d} \\ \\mid X_t \\sim \\text{Bin}\\left(X_t, \\sum_{d = 0}^d \\pi_t\\right). \\] now interested conditional expectation \\[ \\mathbb{E}(X_t \\ \\mid X_{t, \\leq d}) \\] binomial subsampling problem. derive improper prior distribution \\[ X_t \\sim \\text{DiscreteUniform}(0, 1, 2, \\dots). \\] notational simplicity readability following, substitute \\(N = X_{t}\\), \\(Y = X_{t, \\geq d}\\) \\(p = \\sum_{d = 0}^D \\pi_d\\) thus looking \\(\\mathbb{E}(N | Y = y)\\) \\(Y \\sim \\text{Bin}(N, p)\\) discrete uniform prior \\(N\\). expectation can written : \\[ \\mathbb{E}(N \\ | \\ Y = y) = \\sum_{n=0}^{\\infty}\\text{Pr}(N = n | Y = y) \\times n \\]{#eq-expectation} Applying Bayes Theorem \\[ \\text{Pr}(N = n \\ |\\ Y = y)  = \\frac{\\text{Pr}(Y = y \\ | \\ N = n) \\times \\text{Pr}(N=n)}{\\sum_{=0}^{\\infty}\\text{Pr}( Y = y \\ |\\ N= ) \\times \\text{Pr}(N = )}. \\] \\(\\text{Pr}(N=n)\\) constant simplifies \\[ \\text{Pr}(N = n \\ |\\ Y = y)  = \\frac{\\text{Pr}(Y = y \\ |\\ N = n)}{\\sum_{=0}^{\\infty}\\text{Pr}( Y = y \\ |\\ N= )}. \\] Now substituting probability mass function binomial distribution \\[ \\text{Pr}(Y = y\\ |\\ N = n) =\\binom{n}{y} p^y(1-p)^{n-y} \\] get \\[ \\text{Pr}(N = n \\ |\\ Y = y) = \\frac{\\binom{n}{y} p^y(1-p)^{n-y}}{\\sum_{=1}^\\infty \\binom{1}{y}p^y(1-p)^{-y}} \\] Plugging [eq-expectation?] get following (omitting terms \\(n<y\\), 0): \\[ \\mathbb{E}(N \\ |\\ Y = y) = \\sum_{n=y}^{\\infty}n \\frac{\\binom{n}{y} p^y(1-p)^{n-y}}{\\sum_{=y}^\\infty \\binom{}{y}p^y(1-p)^{-y}} \\] equivalent \\[ \\mathbb{E}(N \\ | \\ Y = y) =  \\frac{\\sum_{n=y}^{\\infty}n \\binom{n}{y} p^y(1-p)^{n-y}}{\\sum_{=y}^\\infty \\binom{}{y}p^y(1-p)^{-y}}. \\] numerator denominator known convergent series, solutions available standard libraries like Mathematica[Mathematica2024?]. get \\[ \\mathbb{E}(N \\ |\\ Y = y)  = \\frac{(y + 1 -p)/p^2}{1/p} = \\frac{y + 1 - p}{p}, \\] corresponds corrected point estimate provided equation[eq-correction?].","code":""},{"path":"https://baselinenowcast.epinowcast.org/articles/model_definition.html","id":"default-settings","dir":"Articles","previous_headings":"","what":"Default settings","title":"Mathematical methods for baselinenowcast","text":"guide practitioners, set default behaviours based maximum delay observed data. use partial reporting triangle delay estimation, derive delay estimates uncertainty estimates reporting triangle nowcasted, use three times maximum delay number (\\(V=3 \\times D\\)) reference times total training volume \\(V\\) used model (line [1]). Within step additional defaults: Delay distribution estimation: 50% reference times training volume \\(V\\) used delay estimation, \\(N\\), minimum requirement least one maximum delay. less data available, indicated user, producing error less data theoretically minimum available given modelling step. Point nowcast generation: Delay estimation occurs using reporting triangle nowcasted. Uncertainty Estimation: 50% reference times training volume \\(V\\) used retrospective point nowcast times, \\(M\\). insufficient data, method uses oldest retrospective nowcast date least amount historical data delay estimation used point nowcast current nowcast date, requires least two retrospective nowcasts containing sufficient data. default sum predicted components row across rows context specific (diverging [1]. sum week due target data rolling 7 day sum).","code":""},{"path":[]},{"path":"https://baselinenowcast.epinowcast.org/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Kaitlyn Johnson. Author, maintainer, copyright holder. Sam Abbott. Author. Johannes Bracher. Author. Sebastian Funk. Author.","code":""},{"path":"https://baselinenowcast.epinowcast.org/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Johnson K, Abbott S, Bracher J, Funk S (2025). baselinenowcast: Baseline nowcast. R package version 0.0.0.1000, https://baselinenowcast.epinowcast.org.","code":"@Manual{,   title = {baselinenowcast: Baseline nowcast},   author = {Kaitlyn Johnson and Sam Abbott and Johannes Bracher and Sebastian Funk},   year = {2025},   note = {R package version 0.0.0.1000},   url = {https://baselinenowcast.epinowcast.org}, }"},{"path":[]},{"path":"https://baselinenowcast.epinowcast.org/index.html","id":"summary","dir":"","previous_headings":"","what":"Summary","title":"Baseline nowcast for right-truncated epidemiological data","text":"Nowcasting right-truncated epidemiological data critical timely public health decision-making, reporting delays can create misleading impressions declining trends recent data. package provides simple nowcasting methods practical use based using empirical delay distributions uncertainty past performance. also designed used baseline method developers new nowcasting methods. supports standard data frame inputs reference date, report date, count columns, compatible ‘epinowcast’ objects, also supports direct use reporting triangles. Alongside opinionated default workflow, low-level pipe-friendly modular interface, allowing context-specific workflows. can accommodate wide spectrum reporting schedules, including mixed patterns reference reporting (daily-weekly, weekly-daily). also supports sharing delay distributions uncertainty estimates strata, well custom uncertainty models delay estimation methods.","code":""},{"path":"https://baselinenowcast.epinowcast.org/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Baseline nowcast for right-truncated epidemiological data","text":"install development version GitHub (warning! version may contain breaking changes /bugs), use pak package:","code":"pak::pak(file.path(\"epinowcast\", \"baselinenowcast\"))"},{"path":"https://baselinenowcast.epinowcast.org/index.html","id":"resources","dir":"","previous_headings":"","what":"Resources","title":"Baseline nowcast for right-truncated epidemiological data","text":"provide range documentation, case studies, community spaces ask (answer!) questions: organisation website includes links resources, guest posts, seminar schedule upcoming past recordings. community forum areas question answer considering new methods tools, among others. generally interested real-time analysis infectious disease, may find useful even use baselinenowcast.","code":""},{"path":"https://baselinenowcast.epinowcast.org/index.html","id":"contributing","dir":"","previous_headings":"","what":"Contributing","title":"Baseline nowcast for right-truncated epidemiological data","text":"welcome contributions new contributors! particularly appreciate help identifying identified issues. Please check add issues, /add pull request see contributing guide information.","code":""},{"path":"https://baselinenowcast.epinowcast.org/index.html","id":"how-to-make-a-bug-report-or-feature-request","dir":"","previous_headings":"Contributing","what":"How to make a bug report or feature request","title":"Baseline nowcast for right-truncated epidemiological data","text":"Please briefly describe problem output expect issue. See contributing guide information.","code":""},{"path":"https://baselinenowcast.epinowcast.org/index.html","id":"code-of-conduct","dir":"","previous_headings":"Contributing","what":"Code of Conduct","title":"Baseline nowcast for right-truncated epidemiological data","text":"Please note baselinenowcast project released Contributor Code Conduct. contributing project, agree abide terms.","code":""},{"path":"https://baselinenowcast.epinowcast.org/index.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Baseline nowcast for right-truncated epidemiological data","text":"use baselinenowcast work, please consider citing citation(\"baselinenowcast\").","code":""},{"path":"https://baselinenowcast.epinowcast.org/index.html","id":"contributors","dir":"","previous_headings":"","what":"Contributors","title":"Baseline nowcast for right-truncated epidemiological data","text":"contributions project gratefully acknowledged using allcontributors package following allcontributors specification. Contributions kind welcome!","code":""},{"path":"https://baselinenowcast.epinowcast.org/index.html","id":"code","dir":"","previous_headings":"Contributors","what":"Code","title":"Baseline nowcast for right-truncated epidemiological data","text":"kaitejohnson, seabbs, TimTaylor, sbfnk","code":""},{"path":"https://baselinenowcast.epinowcast.org/index.html","id":"issue-authors","dir":"","previous_headings":"Contributors","what":"Issue Authors","title":"Baseline nowcast for right-truncated epidemiological data","text":"jonathonmellor, swo","code":""},{"path":"https://baselinenowcast.epinowcast.org/index.html","id":"issue-contributors","dir":"","previous_headings":"Contributors","what":"Issue Contributors","title":"Baseline nowcast for right-truncated epidemiological data","text":"jamesmbaazam, jbracher","code":""},{"path":"https://baselinenowcast.epinowcast.org/reference/apply_delay.html","id":null,"dir":"Reference","previous_headings":"","what":"Apply the delay to generate a point nowcast — apply_delay","title":"Apply the delay to generate a point nowcast — apply_delay","text":"Generate point estimate completed reporting square (rectangle) reporting triangle want complete nowcast delay PMF. element computed taking product expected number total cases assigned reference time $t$ proportion cases reported delay $d$. formula obtain expected number total cases function reporting delay previous observations derived elsewhere. code adapted code written (MIT license) Karlsruhe Institute Technology RESPINOW German Hospitalization Nowcasting Hub. Modified : https://github.com/KITmetricslab/RESPINOW-Hub/blob/7cce3ae2728116e8c8cc0e4ab29074462c24650e/code/baseline/functions.R#L55 #nolint","code":""},{"path":"https://baselinenowcast.epinowcast.org/reference/apply_delay.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Apply the delay to generate a point nowcast — apply_delay","text":"","code":"apply_delay(rep_tri_to_nowcast, delay_pmf)"},{"path":"https://baselinenowcast.epinowcast.org/reference/apply_delay.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Apply the delay to generate a point nowcast — apply_delay","text":"rep_tri_to_nowcast Matrix reporting triangle nowcasted, rows representing time points reference columns representing delays delay_pmf Vector delays assumed indexed starting first delay column rep_mat_to_nowcast","code":""},{"path":"https://baselinenowcast.epinowcast.org/reference/apply_delay.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Apply the delay to generate a point nowcast — apply_delay","text":"point_nowcast_matrix Matrix number rows columns rep_mat_to_nowcast missing values filled point estimates","code":""},{"path":"https://baselinenowcast.epinowcast.org/reference/apply_delay.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Apply the delay to generate a point nowcast — apply_delay","text":"","code":"triangle <- matrix(   c(     80, 50, 25, 10,     100, 50, 30, 20,     90, 45, 25, NA,     80, 40, NA, NA,     70, NA, NA, NA   ),   nrow = 5,   byrow = TRUE ) delay_pmf <- estimate_delay(   reporting_triangle = triangle,   max_delay = 3,   n = 4 ) point_nowcast_matrix <- apply_delay(   rep_tri_to_nowcast = triangle,   delay_pmf = delay_pmf ) print(point_nowcast_matrix) #>      [,1]     [,2]     [,3]     [,4] #> [1,]   80 50.00000 25.00000 10.00000 #> [2,]  100 50.00000 30.00000 20.00000 #> [3,]   90 45.00000 25.00000 17.78889 #> [4,]   80 40.00000 23.20529 15.92281 #> [5,]   70 35.24853 20.35851 13.96745"},{"path":"https://baselinenowcast.epinowcast.org/reference/combine_obs_with_pred.html","id":null,"dir":"Reference","previous_headings":"","what":"Combine observed data with a single prediction draw — combine_obs_with_pred","title":"Combine observed data with a single prediction draw — combine_obs_with_pred","text":"Internally sums observed counts reporting triangle reference time adds predicted counts form single draw nowcast final counts reference time.","code":""},{"path":"https://baselinenowcast.epinowcast.org/reference/combine_obs_with_pred.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Combine observed data with a single prediction draw — combine_obs_with_pred","text":"","code":"combine_obs_with_pred(   predicted_counts,   reporting_triangle,   fun_to_aggregate = sum,   k = 1 )"},{"path":"https://baselinenowcast.epinowcast.org/reference/combine_obs_with_pred.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Combine observed data with a single prediction draw — combine_obs_with_pred","text":"predicted_counts Vector predicted counts reference time reporting_triangle Matrix reporting triangle, rows representing time points reference columns representing delays. Can reporting matrix incomplete reporting matrix. Can also ragged reporting triangle, multiple columns reported row. (e.g. weekly reporting daily data). fun_to_aggregate Function operate along nowcast vectors summing across delays. Eventually, can add things like mean, now since providing negative binomial observation model, can allow sum. Currently supported functions: sum. k Integer indicating number reference times apply fun_to_aggregate create target used compute nowcast errors.","code":""},{"path":"https://baselinenowcast.epinowcast.org/reference/combine_obs_with_pred.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Combine observed data with a single prediction draw — combine_obs_with_pred","text":"vector predicted counts reference time","code":""},{"path":"https://baselinenowcast.epinowcast.org/reference/combine_obs_with_pred.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Combine observed data with a single prediction draw — combine_obs_with_pred","text":"","code":"pred_counts <- c(10, 20, 30, 40) reporting_matrix <- matrix(   c(     7, 9, 4, 3,     1, 2, 3, 4,     5, 6, 7, 8,     9, 10, 11, 12   ),   nrow = 4,   byrow = TRUE ) reporting_triangle <- construct_triangle(reporting_matrix) combine_obs_with_pred(pred_counts, reporting_triangle) #> [1] 33 26 41 49  # Another example with rolling sum combine_obs_with_pred(pred_counts, reporting_triangle, k = 2) #> [1] NA 49 47 60"},{"path":"https://baselinenowcast.epinowcast.org/reference/construct_triangle.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate a single retrospective reporting triangle — construct_triangle","title":"Generate a single retrospective reporting triangle — construct_triangle","text":"function generates single reporting triangle removing bottom right observations truncated reporting triangle matrix. singular version construct_triangles().","code":""},{"path":"https://baselinenowcast.epinowcast.org/reference/construct_triangle.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate a single retrospective reporting triangle — construct_triangle","text":"","code":"construct_triangle(trunc_rep_tri, structure = 1)"},{"path":"https://baselinenowcast.epinowcast.org/reference/construct_triangle.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate a single retrospective reporting triangle — construct_triangle","text":"trunc_rep_tri single truncated reporting triangle. May may contain NAs. structure Integer vector specifying reporting structure. integer, divides columns evenly integer (last possibly truncated).  vector, sum must greater equal number columns. Default 1 (standard triangular structure).","code":""},{"path":"https://baselinenowcast.epinowcast.org/reference/construct_triangle.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate a single retrospective reporting triangle — construct_triangle","text":"single retrospective reporting triangle matrix NAs appropriate positions.","code":""},{"path":"https://baselinenowcast.epinowcast.org/reference/construct_triangle.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate a single retrospective reporting triangle — construct_triangle","text":"","code":"triangle <- matrix(   c(     65, 46, 21, 7,     70, 40, 20, 5,     80, 50, 10, 10,     100, 40, 31, 20,     95, 45, 21, 10,     82, 42, 6, NA,     70, 90, NA, NA   ),   nrow = 7,   byrow = TRUE )  # Standard triangular structure (default) rep_tri <- construct_triangle(triangle) rep_tri #>      [,1] [,2] [,3] [,4] #> [1,]   65   46   21    7 #> [2,]   70   40   20    5 #> [3,]   80   50   10   10 #> [4,]  100   40   31   20 #> [5,]   95   45   21   NA #> [6,]   82   42   NA   NA #> [7,]   70   NA   NA   NA  # Ragged structure with 2 columns per delay period rep_ragged <- construct_triangle(triangle, 2) rep_ragged #>      [,1] [,2] [,3] [,4] #> [1,]   65   46   21    7 #> [2,]   70   40   20    5 #> [3,]   80   50   10   10 #> [4,]  100   40   31   20 #> [5,]   95   45   21   10 #> [6,]   82   42    6   NA #> [7,]   70   90   NA   NA  # Custom structure with explicit column counts rep_custom <- construct_triangle(triangle, c(1, 2)) rep_custom #>      [,1] [,2] [,3] [,4] #> [1,]   65   46   21    7 #> [2,]   70   40   20    5 #> [3,]   80   50   10   10 #> [4,]  100   40   31   20 #> [5,]   95   45   21   10 #> [6,]   82   42    6   NA #> [7,]   70   NA   NA   NA"},{"path":"https://baselinenowcast.epinowcast.org/reference/construct_triangles.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate retrospective reporting triangles — construct_triangles","title":"Generate retrospective reporting triangles — construct_triangles","text":"function ingests list truncated reporting triangles iteratively generates reporting triangle available maximum reference time. operates element list order (recent retrospective nowcast time oldest retrospective nowcast time).","code":""},{"path":"https://baselinenowcast.epinowcast.org/reference/construct_triangles.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate retrospective reporting triangles — construct_triangles","text":"","code":"construct_triangles(trunc_rep_tri_list, structure = 1)"},{"path":"https://baselinenowcast.epinowcast.org/reference/construct_triangles.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate retrospective reporting triangles — construct_triangles","text":"trunc_rep_tri_list List n truncated reporting triangle matrices many rows available given truncation. structure Integer vector specifying reporting structure. integer, divides columns evenly integer (last possibly truncated).  vector, sum must greater equal number columns. Default 1 (standard triangular structure).","code":""},{"path":"https://baselinenowcast.epinowcast.org/reference/construct_triangles.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate retrospective reporting triangles — construct_triangles","text":"reporting_triangle_list List retrospective reporting triangles, generated removing bottom right observations truncated reporting triangle matrices.","code":""},{"path":"https://baselinenowcast.epinowcast.org/reference/construct_triangles.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate retrospective reporting triangles — construct_triangles","text":"","code":"triangle <- matrix(   c(     65, 46, 21, 7,     70, 40, 20, 5,     80, 50, 10, 10,     100, 40, 31, 20,     95, 45, 21, NA,     82, 42, NA, NA,     70, NA, NA, NA   ),   nrow = 7,   byrow = TRUE )  trunc_rts <- truncate_triangles(triangle, n = 2) retro_rts <- construct_triangles(trunc_rts)  # With custom structure retro_rts_custom <- construct_triangles(   retro_rts,   structure = 2 ) retro_rts_custom #> [[1]] #>      [,1] [,2] [,3] [,4] #> [1,]   65   46   21    7 #> [2,]   70   40   20    5 #> [3,]   80   50   10   10 #> [4,]  100   40   31   NA #> [5,]   95   45   NA   NA #> [6,]   82   NA   NA   NA #>  #> [[2]] #>      [,1] [,2] [,3] [,4] #> [1,]   65   46   21    7 #> [2,]   70   40   20    5 #> [3,]   80   50   10   NA #> [4,]  100   40   NA   NA #> [5,]   95   NA   NA   NA #>"},{"path":"https://baselinenowcast.epinowcast.org/reference/dot-calc_expectation.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate the updated rows of the expected nowcasted triangle — .calc_expectation","title":"Calculate the updated rows of the expected nowcasted triangle — .calc_expectation","text":"Calculate updated rows expected nowcasted triangle","code":""},{"path":"https://baselinenowcast.epinowcast.org/reference/dot-calc_expectation.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate the updated rows of the expected nowcasted triangle — .calc_expectation","text":"","code":".calc_expectation(index, expectation, delay_prob, delay_cdf_prev, n_rows)"},{"path":"https://baselinenowcast.epinowcast.org/reference/dot-calc_expectation.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate the updated rows of the expected nowcasted triangle — .calc_expectation","text":"index Integer indicating delay index expectation Matrix incomplete reporting matrix delay_prob Scalar probability current delay delay_cdf_prev Scalar cumulative probability previous delay n_rows Number rows expectation matrix","code":""},{"path":"https://baselinenowcast.epinowcast.org/reference/dot-calc_expectation.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate the updated rows of the expected nowcasted triangle — .calc_expectation","text":"Matrix another set entries corresponding updated values specified rows column","code":""},{"path":"https://baselinenowcast.epinowcast.org/reference/dot-check_lhs_not_only_zeros.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if there are non-zero-values on the LHS of NAs — .check_lhs_not_only_zeros","title":"Check if there are non-zero-values on the LHS of NAs — .check_lhs_not_only_zeros","text":"Check non-zero-values LHS NAs","code":""},{"path":"https://baselinenowcast.epinowcast.org/reference/dot-check_lhs_not_only_zeros.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if there are non-zero-values on the LHS of NAs — .check_lhs_not_only_zeros","text":"","code":".check_lhs_not_only_zeros(mat)"},{"path":"https://baselinenowcast.epinowcast.org/reference/dot-check_lhs_not_only_zeros.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if there are non-zero-values on the LHS of NAs — .check_lhs_not_only_zeros","text":"mat Matrix check","code":""},{"path":"https://baselinenowcast.epinowcast.org/reference/dot-check_lhs_not_only_zeros.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check if there are non-zero-values on the LHS of NAs — .check_lhs_not_only_zeros","text":"Boolean indicating whether non-zero values LHS first NA (TRUE = non-zeros, FALSE = zeros)","code":""},{"path":"https://baselinenowcast.epinowcast.org/reference/dot-check_na_bottom_right.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if matrix has valid NA pattern — .check_na_bottom_right","title":"Check if matrix has valid NA pattern — .check_na_bottom_right","text":"Check matrix valid NA pattern","code":""},{"path":"https://baselinenowcast.epinowcast.org/reference/dot-check_na_bottom_right.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if matrix has valid NA pattern — .check_na_bottom_right","text":"","code":".check_na_bottom_right(mat)"},{"path":"https://baselinenowcast.epinowcast.org/reference/dot-check_na_bottom_right.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if matrix has valid NA pattern — .check_na_bottom_right","text":"mat Matrix","code":""},{"path":"https://baselinenowcast.epinowcast.org/reference/dot-check_na_bottom_right.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check if matrix has valid NA pattern — .check_na_bottom_right","text":"Boolean indicating whether matrix contains NAs bottom right (TRUE bottom right, FALSE elsewhere).","code":""},{"path":"https://baselinenowcast.epinowcast.org/reference/dot-conditional_sum_cols.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute the sum of entries of a column in a matrix where both sets of matrices of booleans are TRUE — .conditional_sum_cols","title":"Compute the sum of entries of a column in a matrix where both sets of matrices of booleans are TRUE — .conditional_sum_cols","text":"Compute sum entries column matrix sets matrices booleans TRUE","code":""},{"path":"https://baselinenowcast.epinowcast.org/reference/dot-conditional_sum_cols.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute the sum of entries of a column in a matrix where both sets of matrices of booleans are TRUE — .conditional_sum_cols","text":"","code":".conditional_sum_cols(col, matrix_bool1, matrix_bool2, matrix_to_sum)"},{"path":"https://baselinenowcast.epinowcast.org/reference/dot-conditional_sum_cols.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute the sum of entries of a column in a matrix where both sets of matrices of booleans are TRUE — .conditional_sum_cols","text":"col Integer indicating column sum matrix_bool1 Matrix booleans first set indices matrix_bool2 Matrix booleans second set indices matrix_to_sum Matrix summed specific column","code":""},{"path":"https://baselinenowcast.epinowcast.org/reference/dot-conditional_sum_cols.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute the sum of entries of a column in a matrix where both sets of matrices of booleans are TRUE — .conditional_sum_cols","text":"Numeric summing values matrix_to_sum specified column entries true","code":""},{"path":"https://baselinenowcast.epinowcast.org/reference/dot-extract_predictions.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract from one matrix only elements that are missing in another — .extract_predictions","title":"Extract from one matrix only elements that are missing in another — .extract_predictions","text":"Extract one matrix elements missing another","code":""},{"path":"https://baselinenowcast.epinowcast.org/reference/dot-extract_predictions.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract from one matrix only elements that are missing in another — .extract_predictions","text":"","code":".extract_predictions(point_nowcast_matrix, reporting_triangle)"},{"path":"https://baselinenowcast.epinowcast.org/reference/dot-extract_predictions.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract from one matrix only elements that are missing in another — .extract_predictions","text":"point_nowcast_matrix Matrix point nowcast predictions observations, rows representing reference times columns representing delays. reporting_triangle Matrix reporting triangle, rows representing time points reference columns representing delays. Can reporting matrix incomplete reporting matrix. Can also ragged reporting triangle, multiple columns reported row. (e.g. weekly reporting daily data).","code":""},{"path":"https://baselinenowcast.epinowcast.org/reference/dot-extract_predictions.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract from one matrix only elements that are missing in another — .extract_predictions","text":"Matrix containing elements point_nowcast_matrix elements missing reporting_triangle","code":""},{"path":"https://baselinenowcast.epinowcast.org/reference/dot-fit_nb.html","id":null,"dir":"Reference","previous_headings":"","what":"Fit a negative binomial to a vector of observations and expectations — .fit_nb","title":"Fit a negative binomial to a vector of observations and expectations — .fit_nb","text":"Takes vector observations vector expectations performs MLE estimator estimate dispersion parameter negative binomial. code adapted code written (MIT license) Karlsruhe Institute Technology RESPINOW German Hospitalization Nowcasting Hub. Modified : https://github.com/KITmetricslab/RESPINOW-Hub/blob/7fab4dce7b559c3076ab643cf22048cb5fb84cc2/code/baseline/functions.R#L404 #nolint","code":""},{"path":"https://baselinenowcast.epinowcast.org/reference/dot-fit_nb.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fit a negative binomial to a vector of observations and expectations — .fit_nb","text":"","code":".fit_nb(x, mu)"},{"path":"https://baselinenowcast.epinowcast.org/reference/dot-fit_nb.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fit a negative binomial to a vector of observations and expectations — .fit_nb","text":"x observed values mu expected values","code":""},{"path":"https://baselinenowcast.epinowcast.org/reference/dot-fit_nb.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fit a negative binomial to a vector of observations and expectations — .fit_nb","text":"maximum likelihood estimate dispersion","code":""},{"path":"https://baselinenowcast.epinowcast.org/reference/dot-handle_neg_vals.html","id":null,"dir":"Reference","previous_headings":"","what":"Handle negative values in the reporting triangle Takes in a reporting triangle and returns a matrix in the same format as the input triangle, but with negative values of reporting handled via passing them to the subsequent days (from longer delay to shorter). This code was adapted from code written (under an MIT license) by the Karlsruhe Institute of Technology RESPINOW German Hospitalization Nowcasting Hub. Modified from https://github.com/KITmetricslab/RESPINOW-Hub/blob/main/code/baseline/functions.R #nolint — .handle_neg_vals","title":"Handle negative values in the reporting triangle Takes in a reporting triangle and returns a matrix in the same format as the input triangle, but with negative values of reporting handled via passing them to the subsequent days (from longer delay to shorter). This code was adapted from code written (under an MIT license) by the Karlsruhe Institute of Technology RESPINOW German Hospitalization Nowcasting Hub. Modified from https://github.com/KITmetricslab/RESPINOW-Hub/blob/main/code/baseline/functions.R #nolint — .handle_neg_vals","text":"Handle negative values reporting triangle Takes reporting triangle returns matrix format input triangle, negative values reporting handled via passing subsequent days (longer delay shorter). code adapted code written (MIT license) Karlsruhe Institute Technology RESPINOW German Hospitalization Nowcasting Hub. Modified https://github.com/KITmetricslab/RESPINOW-Hub/blob/main/code/baseline/functions.R #nolint","code":""},{"path":"https://baselinenowcast.epinowcast.org/reference/dot-handle_neg_vals.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Handle negative values in the reporting triangle Takes in a reporting triangle and returns a matrix in the same format as the input triangle, but with negative values of reporting handled via passing them to the subsequent days (from longer delay to shorter). This code was adapted from code written (under an MIT license) by the Karlsruhe Institute of Technology RESPINOW German Hospitalization Nowcasting Hub. Modified from https://github.com/KITmetricslab/RESPINOW-Hub/blob/main/code/baseline/functions.R #nolint — .handle_neg_vals","text":"","code":".handle_neg_vals(triangle)"},{"path":"https://baselinenowcast.epinowcast.org/reference/dot-handle_neg_vals.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Handle negative values in the reporting triangle Takes in a reporting triangle and returns a matrix in the same format as the input triangle, but with negative values of reporting handled via passing them to the subsequent days (from longer delay to shorter). This code was adapted from code written (under an MIT license) by the Karlsruhe Institute of Technology RESPINOW German Hospitalization Nowcasting Hub. Modified from https://github.com/KITmetricslab/RESPINOW-Hub/blob/main/code/baseline/functions.R #nolint — .handle_neg_vals","text":"triangle Matrix reporting triangle, rows representing time points reference columns representing delays.","code":""},{"path":"https://baselinenowcast.epinowcast.org/reference/dot-handle_neg_vals.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Handle negative values in the reporting triangle Takes in a reporting triangle and returns a matrix in the same format as the input triangle, but with negative values of reporting handled via passing them to the subsequent days (from longer delay to shorter). This code was adapted from code written (under an MIT license) by the Karlsruhe Institute of Technology RESPINOW German Hospitalization Nowcasting Hub. Modified from https://github.com/KITmetricslab/RESPINOW-Hub/blob/main/code/baseline/functions.R #nolint — .handle_neg_vals","text":"Matrix positive integers negative values reporting handled via passing subsequent days delay.","code":""},{"path":"https://baselinenowcast.epinowcast.org/reference/dot-safelydoesit.html","id":null,"dir":"Reference","previous_headings":"","what":"Safe iterator — .safelydoesit","title":"Safe iterator — .safelydoesit","text":"Safe iterator","code":""},{"path":"https://baselinenowcast.epinowcast.org/reference/dot-safelydoesit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Safe iterator — .safelydoesit","text":"","code":".safelydoesit(fun)"},{"path":"https://baselinenowcast.epinowcast.org/reference/dot-safelydoesit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Safe iterator — .safelydoesit","text":"fun Function wrap around","code":""},{"path":"https://baselinenowcast.epinowcast.org/reference/dot-safelydoesit.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Safe iterator — .safelydoesit","text":"Function return NULL error occurs","code":""},{"path":"https://baselinenowcast.epinowcast.org/reference/dot-validate_delay_and_triangle.html","id":null,"dir":"Reference","previous_headings":"","what":"Validate triangle to nowcast and delay PMF together Various checks to make sure that the reporting triangle and the delay PMF passed in to apply_delay() are formatted properly and compatible. — .validate_delay_and_triangle","title":"Validate triangle to nowcast and delay PMF together Various checks to make sure that the reporting triangle and the delay PMF passed in to apply_delay() are formatted properly and compatible. — .validate_delay_and_triangle","text":"Validate triangle nowcast delay PMF together Various checks make sure reporting triangle  delay PMF passed apply_delay() formatted properly compatible.","code":""},{"path":"https://baselinenowcast.epinowcast.org/reference/dot-validate_delay_and_triangle.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Validate triangle to nowcast and delay PMF together Various checks to make sure that the reporting triangle and the delay PMF passed in to apply_delay() are formatted properly and compatible. — .validate_delay_and_triangle","text":"","code":".validate_delay_and_triangle(triangle, delay_pmf)"},{"path":"https://baselinenowcast.epinowcast.org/reference/dot-validate_delay_and_triangle.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Validate triangle to nowcast and delay PMF together Various checks to make sure that the reporting triangle and the delay PMF passed in to apply_delay() are formatted properly and compatible. — .validate_delay_and_triangle","text":"triangle Matrix values rows indicating time points columns indicating delays. delay_pmf Vector length number delays indicating probability case reported given delay.","code":""},{"path":"https://baselinenowcast.epinowcast.org/reference/dot-validate_delay_and_triangle.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Validate triangle to nowcast and delay PMF together Various checks to make sure that the reporting triangle and the delay PMF passed in to apply_delay() are formatted properly and compatible. — .validate_delay_and_triangle","text":"NULL, invisibly","code":""},{"path":"https://baselinenowcast.epinowcast.org/reference/dot-validate_triangle.html","id":null,"dir":"Reference","previous_headings":"","what":"Validate triangle Various checks to make sure that the reporting triangle passed in to estimate_delay() is formatted properly. — .validate_triangle","title":"Validate triangle Various checks to make sure that the reporting triangle passed in to estimate_delay() is formatted properly. — .validate_triangle","text":"Validate triangle Various checks make sure reporting triangle passed estimate_delay() formatted properly.","code":""},{"path":"https://baselinenowcast.epinowcast.org/reference/dot-validate_triangle.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Validate triangle Various checks to make sure that the reporting triangle passed in to estimate_delay() is formatted properly. — .validate_triangle","text":"","code":".validate_triangle(   triangle,   max_delay = ncol(triangle) - 1,   n = nrow(triangle) )"},{"path":"https://baselinenowcast.epinowcast.org/reference/dot-validate_triangle.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Validate triangle Various checks to make sure that the reporting triangle passed in to estimate_delay() is formatted properly. — .validate_triangle","text":"max_delay Integer indicating maximum delay estimate, units delay. default use whole reporting triangle, ncol(reporting_triangle) -1. n Integer indicating number reference times (observations) used estimate reporting delay, always starting recent reporting delay. default use whole reporting triangle, nrow(reporting_triangle)","code":""},{"path":"https://baselinenowcast.epinowcast.org/reference/dot-validate_triangle.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Validate triangle Various checks to make sure that the reporting triangle passed in to estimate_delay() is formatted properly. — .validate_triangle","text":"NULL, invisibly","code":""},{"path":"https://baselinenowcast.epinowcast.org/reference/estimate_delay.html","id":null,"dir":"Reference","previous_headings":"","what":"Estimate a delay distribution from a reporting triangle — estimate_delay","title":"Estimate a delay distribution from a reporting triangle — estimate_delay","text":"Provides estimate reporting delay function delay, based reporting triangle specified maximum delay number reference date observations used estimation. point estimate delay computed empirically, using iterative algorithm starting recent observations. code adapted code written (MIT license) Karlsruhe Institute Technology RESPINOW German Hospitalization Nowcasting Hub. Modified : https://github.com/KITmetricslab/RESPINOW-Hub/blob/7cce3ae2728116e8c8cc0e4ab29074462c24650e/code/baseline/functions.R#L55 #nolint","code":""},{"path":"https://baselinenowcast.epinowcast.org/reference/estimate_delay.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Estimate a delay distribution from a reporting triangle — estimate_delay","text":"","code":"estimate_delay(   reporting_triangle,   max_delay = ncol(reporting_triangle) - 1,   n = nrow(reporting_triangle) )"},{"path":"https://baselinenowcast.epinowcast.org/reference/estimate_delay.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Estimate a delay distribution from a reporting triangle — estimate_delay","text":"reporting_triangle Matrix reporting triangle, rows representing time points reference columns representing delays. Can reporting matrix incomplete reporting matrix. Can also ragged reporting triangle, multiple columns reported row. (e.g. weekly reporting daily data). max_delay Integer indicating maximum delay estimate, units delay. default use whole reporting triangle, ncol(reporting_triangle) -1. n Integer indicating number reference times (observations) used estimate reporting delay, always starting recent reporting delay. default use whole reporting triangle, nrow(reporting_triangle)","code":""},{"path":"https://baselinenowcast.epinowcast.org/reference/estimate_delay.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Estimate a delay distribution from a reporting triangle — estimate_delay","text":"Vector indexed 0 length max_delay + 1 columns indicating point estimate empirical probability mass delay.","code":""},{"path":"https://baselinenowcast.epinowcast.org/reference/estimate_delay.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Estimate a delay distribution from a reporting triangle — estimate_delay","text":"","code":"triangle <- matrix(   c(     80, 50, 25, 10,     100, 50, 30, 20,     90, 45, 25, NA,     80, 40, NA, NA,     70, NA, NA, NA   ),   nrow = 5,   byrow = TRUE ) delay_pmf <- estimate_delay(   reporting_triangle = triangle,   max_delay = 3,   n = 4 ) delay_pmf #> [1] 0.5029412 0.2514706 0.1455882 0.1000000"},{"path":"https://baselinenowcast.epinowcast.org/reference/estimate_uncertainty.html","id":null,"dir":"Reference","previous_headings":"","what":"Estimate dispersion parameters — estimate_uncertainty","title":"Estimate dispersion parameters — estimate_uncertainty","text":"function ingests list point nowcast matrices corresponding list truncated reporting matrices uses estimate vector negative binomial dispersion parameters observations estimates horizon, starting 0 max delay number horizons.","code":""},{"path":"https://baselinenowcast.epinowcast.org/reference/estimate_uncertainty.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Estimate dispersion parameters — estimate_uncertainty","text":"","code":"estimate_uncertainty(   pt_nowcast_mat_list,   trunc_rep_tri_list,   reporting_triangle_list,   n = length(pt_nowcast_mat_list),   fun_to_aggregate = sum,   k = 1 )"},{"path":"https://baselinenowcast.epinowcast.org/reference/estimate_uncertainty.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Estimate dispersion parameters — estimate_uncertainty","text":"pt_nowcast_mat_list List point nowcast matrices rows represent reference time points columns represent delays. trunc_rep_tri_list List truncated reporting matrices, containing observations latest reference time. Elements list paired elements pt_nowcast_mat_list. reporting_triangle_list List n truncated reporting triangle matrices many rows available given truncation. n Integer indicating number reporting matrices use estimate dispersion parameters. fun_to_aggregate Function operate along nowcast vectors summing across delays. Eventually, can add things like mean, now since providing negative binomial observation model, can allow sum. Currently supported functions: sum. k Integer indicating number reference times apply fun_to_aggregate create target used compute nowcast errors.","code":""},{"path":"https://baselinenowcast.epinowcast.org/reference/estimate_uncertainty.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Estimate dispersion parameters — estimate_uncertainty","text":"Vector length one less number columns latest reporting triangle, element representing estimate dispersion parameter delay d, starting delay d=1.","code":""},{"path":"https://baselinenowcast.epinowcast.org/reference/estimate_uncertainty.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Estimate dispersion parameters — estimate_uncertainty","text":"","code":"triangle <- matrix(   c(     65, 46, 21, 7,     70, 40, 20, 5,     80, 50, 10, 10,     100, 40, 31, 20,     95, 45, 21, NA,     82, 42, NA, NA,     70, NA, NA, NA   ),   nrow = 7,   byrow = TRUE )  trunc_rts <- truncate_triangles(triangle, n = 2) retro_rts <- construct_triangles(trunc_rts)  retro_nowcasts <- fill_triangles(retro_rts, n = 5) disp_params <- estimate_uncertainty(   pt_nowcast_mat_list = retro_nowcasts,   trunc_rep_tri_list = trunc_rts,   reporting_triangle_list = retro_rts,   n = 2 ) disp_params #> [1] 999.999935   5.141440   3.181066  # Estimate dispersion parameters from rolling sum disp_params_agg <- estimate_uncertainty(   pt_nowcast_mat_list = retro_nowcasts,   trunc_rep_tri_list = trunc_rts,   reporting_triangle_list = retro_rts,   n = 2,   fun_to_aggregate = sum,   k = 2 ) disp_params_agg #> [1] 820.169701   5.032175   3.181066"},{"path":"https://baselinenowcast.epinowcast.org/reference/fill_triangle.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate point nowcast — fill_triangle","title":"Generate point nowcast — fill_triangle","text":"function ingests reporting triangle matrix optionally, delay distribution, returns completed reporting square represents point nowcast. delay distribution specified, used generate nowcast, otherwise, delay distribution estimated reporting_triangle.","code":""},{"path":"https://baselinenowcast.epinowcast.org/reference/fill_triangle.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate point nowcast — fill_triangle","text":"","code":"fill_triangle(   reporting_triangle,   max_delay = ncol(reporting_triangle) - 1,   n = nrow(reporting_triangle),   delay_pmf = NULL )"},{"path":"https://baselinenowcast.epinowcast.org/reference/fill_triangle.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate point nowcast — fill_triangle","text":"reporting_triangle Matrix reporting triangle, rows representing time points reference columns representing delays. Can reporting matrix incomplete reporting matrix. Can also ragged reporting triangle, multiple columns reported row. (e.g. weekly reporting daily data). max_delay Integer indicating maximum delay estimate, units delay. default use whole reporting triangle, ncol(reporting_triangle) -1. n Integer indicating number reference times (observations) used estimate reporting delay, always starting recent reporting delay. default use whole reporting triangle, nrow(reporting_triangle) delay_pmf Vector delays assumed indexed starting first delay column reporting_triangle. Default NULL, estimate delay reporting_triangle.","code":""},{"path":"https://baselinenowcast.epinowcast.org/reference/fill_triangle.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate point nowcast — fill_triangle","text":"point_nowcast_matrix Matrix number rows columns reporting_triangle missing values filled point estimates.","code":""},{"path":"https://baselinenowcast.epinowcast.org/reference/fill_triangle.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate point nowcast — fill_triangle","text":"","code":"triangle <- matrix(   c(     80, 50, 25, 10,     100, 50, 30, 20,     90, 45, 25, NA,     80, 40, NA, NA,     70, NA, NA, NA   ),   nrow = 5,   byrow = TRUE ) point_nowcast_matrix <- fill_triangle(   reporting_triangle = triangle ) point_nowcast_matrix #>      [,1]     [,2]     [,3]     [,4] #> [1,]   80 50.00000 25.00000 10.00000 #> [2,]  100 50.00000 30.00000 20.00000 #> [3,]   90 45.00000 25.00000 14.33572 #> [4,]   80 40.00000 23.17697 12.82918 #> [5,]   70 37.26249 20.72155 11.46862"},{"path":"https://baselinenowcast.epinowcast.org/reference/fill_triangles.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate retrospective nowcasts — fill_triangles","title":"Generate retrospective nowcasts — fill_triangles","text":"function ingests list incomplete reporting triangles generates list point nowcast matrices, based delay estimated triangle corresponding delay passed . uses specified n number reference times estimate delay retrospective reporting triangle.","code":""},{"path":"https://baselinenowcast.epinowcast.org/reference/fill_triangles.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate retrospective nowcasts — fill_triangles","text":"","code":"fill_triangles(   reporting_triangle_list,   max_delay = min(sapply(reporting_triangle_list, ncol)) - 1,   n = min(sapply(reporting_triangle_list, nrow)),   delay_pmf = NULL )"},{"path":"https://baselinenowcast.epinowcast.org/reference/fill_triangles.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate retrospective nowcasts — fill_triangles","text":"reporting_triangle_list List n truncated reporting triangle matrices many rows available given truncation. max_delay Integer indicating maximum delay estimate, units delay. default use whole reporting triangle, ncol(reporting_triangle) -1. n Integer indicating number reference times (number rows) use estimate delay distribution reporting triangle. Default minimum number rows matrices list_of_rts. delay_pmf Vector list vectors delays assumed indexed starting first delay column matrices reporting_triangle_list. list, must length reporting_triangle_list, elements aligning. Default NULL","code":""},{"path":"https://baselinenowcast.epinowcast.org/reference/fill_triangles.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate retrospective nowcasts — fill_triangles","text":"pt_nowcast_matr_list List number elements input reporting_triangle_listbut reporting triangle filled based delay estimated reporting triangle.","code":""},{"path":"https://baselinenowcast.epinowcast.org/reference/fill_triangles.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate retrospective nowcasts — fill_triangles","text":"","code":"triangle <- matrix(   c(     65, 46, 21, 7,     70, 40, 20, 5,     80, 50, 10, 10,     100, 40, 31, 20,     95, 45, 21, NA,     82, 42, NA, NA,     70, NA, NA, NA   ),   nrow = 7,   byrow = TRUE )  trunc_rts <- truncate_triangles(triangle) retro_rts <- construct_triangles(trunc_rts) retro_pt_nowcast_mat_list <- fill_triangles(retro_rts) retro_pt_nowcast_mat_list[1:3] #> [[1]] #>      [,1]     [,2]     [,3]      [,4] #> [1,]   65 46.00000 21.00000  7.000000 #> [2,]   70 40.00000 20.00000  5.000000 #> [3,]   80 50.00000 10.00000 10.000000 #> [4,]  100 40.00000 31.00000  9.502924 #> [5,]   95 45.00000 22.50317  9.030878 #> [6,]   82 41.82672 19.90693  7.988127 #>  #> [[2]] #>      [,1]     [,2]     [,3]     [,4] #> [1,]   65 46.00000 21.00000 7.000000 #> [2,]   70 40.00000 20.00000 5.000000 #> [3,]   80 50.00000 10.00000 6.414220 #> [4,]  100 40.00000 20.36587 7.347008 #> [5,]   95 53.33883 21.57749 7.784433 #>  #> [[3]] #> NULL #>"},{"path":"https://baselinenowcast.epinowcast.org/reference/sample_nowcast.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate a single draw of a nowcast combining observed and predicted values — sample_nowcast","title":"Generate a single draw of a nowcast combining observed and predicted values — sample_nowcast","text":"Generate single draw nowcast combining observed predicted values","code":""},{"path":"https://baselinenowcast.epinowcast.org/reference/sample_nowcast.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate a single draw of a nowcast combining observed and predicted values — sample_nowcast","text":"","code":"sample_nowcast(point_nowcast_matrix, reporting_triangle, dispersion, ...)"},{"path":"https://baselinenowcast.epinowcast.org/reference/sample_nowcast.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate a single draw of a nowcast combining observed and predicted values — sample_nowcast","text":"point_nowcast_matrix Matrix point nowcast predictions observations, rows representing reference times columns representing delays. reporting_triangle Matrix reporting triangle, rows representing time points reference columns representing delays. Can reporting matrix incomplete reporting matrix. Can also ragged reporting triangle, multiple columns reported row. (e.g. weekly reporting daily data). dispersion Vector dispersion parameters indexed horizon minus one maximum delay. ... Additional arguments passed sample_predictions()","code":""},{"path":"https://baselinenowcast.epinowcast.org/reference/sample_nowcast.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate a single draw of a nowcast combining observed and predicted values — sample_nowcast","text":"Vector predicted counts reference time based combining observed counts predicted counts unobserved elements.","code":""},{"path":"https://baselinenowcast.epinowcast.org/reference/sample_nowcast.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate a single draw of a nowcast combining observed and predicted values — sample_nowcast","text":"","code":"point_nowcast_matrix <- matrix(   c(     80, 50, 25, 10,     100, 50, 30, 20,     90, 45, 25, 16.8,     80, 40, 21.2, 19.5,     70, 34.5, 15.4, 9.1   ),   nrow = 5,   byrow = TRUE ) reporting_triangle <- construct_triangle(point_nowcast_matrix) disp <- c(0.8, 12.4, 9.1) nowcast_draw <- sample_nowcast(   point_nowcast_matrix,   reporting_triangle,   disp ) nowcast_draw #> [1] 165 200 176 141 138"},{"path":"https://baselinenowcast.epinowcast.org/reference/sample_nowcasts.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate multiple draws of a nowcast combining observed and predicted values — sample_nowcasts","title":"Generate multiple draws of a nowcast combining observed and predicted values — sample_nowcasts","text":"Generate multiple draws nowcast combining observed predicted values","code":""},{"path":"https://baselinenowcast.epinowcast.org/reference/sample_nowcasts.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate multiple draws of a nowcast combining observed and predicted values — sample_nowcasts","text":"","code":"sample_nowcasts(   point_nowcast_matrix,   reporting_triangle,   dispersion,   draws = 1000,   ... )"},{"path":"https://baselinenowcast.epinowcast.org/reference/sample_nowcasts.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate multiple draws of a nowcast combining observed and predicted values — sample_nowcasts","text":"point_nowcast_matrix Matrix point nowcast predictions observations, rows representing reference times columns representing delays. reporting_triangle Matrix reporting triangle, rows representing time points reference columns representing delays. Can reporting matrix incomplete reporting matrix. Can also ragged reporting triangle, multiple columns reported row. (e.g. weekly reporting daily data). dispersion Vector dispersion parameters indexed horizon minus one maximum delay. draws Integer indicating number draws predicted nowcast vector generate. Default 1000. ... Additional arguments pass sample_predictions()","code":""},{"path":"https://baselinenowcast.epinowcast.org/reference/sample_nowcasts.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate multiple draws of a nowcast combining observed and predicted values — sample_nowcasts","text":"Dataframe containing information multiple draws columns reference time (time), predicted counts (pred_count), draw number (draw).","code":""},{"path":"https://baselinenowcast.epinowcast.org/reference/sample_nowcasts.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate multiple draws of a nowcast combining observed and predicted values — sample_nowcasts","text":"","code":"point_nowcast_matrix <- matrix(   c(     80, 50, 25, 10,     100, 50, 30, 20,     90, 45, 25, 16.8,     80, 40, 21.2, 19.5,     70, 34.5, 15.4, 9.1   ),   nrow = 5,   byrow = TRUE ) reporting_triangle <- construct_triangle(point_nowcast_matrix) disp <- c(0.8, 12.4, 9.1) nowcast_draws <- sample_nowcasts(   point_nowcast_matrix,   reporting_triangle,   disp,   draws = 5 ) nowcast_draws #>    pred_count time draw #> 1         165    1    1 #> 2         200    2    1 #> 3         180    3    1 #> 4         157    4    1 #> 5         101    5    1 #> 6         165    1    2 #> 7         200    2    2 #> 8         182    3    2 #> 9         155    4    2 #> 10        135    5    2 #> 11        165    1    3 #> 12        200    2    3 #> 13        175    3    3 #> 14        131    4    3 #> 15        178    5    3 #> 16        165    1    4 #> 17        200    2    4 #> 18        177    3    4 #> 19        165    4    4 #> 20        118    5    4 #> 21        165    1    5 #> 22        200    2    5 #> 23        168    3    5 #> 24        164    4    5 #> 25        117    5    5"},{"path":"https://baselinenowcast.epinowcast.org/reference/sample_prediction.html","id":null,"dir":"Reference","previous_headings":"","what":"Get a draw of only the predicted elements of the nowcast vector — sample_prediction","title":"Get a draw of only the predicted elements of the nowcast vector — sample_prediction","text":"Get draw predicted elements nowcast vector","code":""},{"path":"https://baselinenowcast.epinowcast.org/reference/sample_prediction.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get a draw of only the predicted elements of the nowcast vector — sample_prediction","text":"","code":"sample_prediction(   point_nowcast_matrix,   reporting_triangle,   dispersion,   fun_to_aggregate = sum,   k = 1 )"},{"path":"https://baselinenowcast.epinowcast.org/reference/sample_prediction.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get a draw of only the predicted elements of the nowcast vector — sample_prediction","text":"point_nowcast_matrix Matrix point nowcast predictions observations, rows representing reference times columns representing delays. reporting_triangle Matrix reporting triangle, rows representing time points reference columns representing delays. Can reporting matrix incomplete reporting matrix. Can also ragged reporting triangle, multiple columns reported row. (e.g. weekly reporting daily data). dispersion Vector dispersion parameters indexed horizon minus one maximum delay. fun_to_aggregate Function operate along nowcast vectors summing across delays. Eventually, can add things like mean, now since providing negative binomial observation model, can allow sum. Currently supported functions: sum. k Integer indicating number reference times apply fun_to_aggregate create target used compute nowcast errors.","code":""},{"path":"https://baselinenowcast.epinowcast.org/reference/sample_prediction.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get a draw of only the predicted elements of the nowcast vector — sample_prediction","text":"Vector predicted draws reference time, reference times input point_nowcast_matrix.","code":""},{"path":"https://baselinenowcast.epinowcast.org/reference/sample_prediction.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get a draw of only the predicted elements of the nowcast vector — sample_prediction","text":"","code":"point_nowcast_matrix <- matrix(   c(     80, 50, 25, 10,     100, 50, 30, 20,     90, 45, 25, 16.8,     80, 40, 21.2, 19.5,     70, 34.5, 15.4, 9.1   ),   nrow = 5,   byrow = TRUE ) reporting_triangle <- construct_triangle(point_nowcast_matrix) disp <- c(0.8, 12.4, 9.1) nowcast_pred_draw <- sample_prediction(   point_nowcast_matrix,   reporting_triangle,   disp ) nowcast_pred_draw #> [1]   0   0  31  44 158  # Get draws on the rolling sum nowcast_pred_draw_agg <- sample_prediction(   point_nowcast_matrix,   reporting_triangle,   disp,   fun_to_aggregate = sum,   k = 2 ) nowcast_pred_draw_agg #> [1]  0  0 15 61  4"},{"path":"https://baselinenowcast.epinowcast.org/reference/sample_predictions.html","id":null,"dir":"Reference","previous_headings":"","what":"Get a dataframe of multiple draws of only the predicted elements of the nowcast vector — sample_predictions","title":"Get a dataframe of multiple draws of only the predicted elements of the nowcast vector — sample_predictions","text":"Get dataframe multiple draws predicted elements nowcast vector","code":""},{"path":"https://baselinenowcast.epinowcast.org/reference/sample_predictions.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get a dataframe of multiple draws of only the predicted elements of the nowcast vector — sample_predictions","text":"","code":"sample_predictions(   point_nowcast_matrix,   reporting_triangle,   dispersion,   draws = 1000,   fun_to_aggregate = sum,   k = 1 )"},{"path":"https://baselinenowcast.epinowcast.org/reference/sample_predictions.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get a dataframe of multiple draws of only the predicted elements of the nowcast vector — sample_predictions","text":"point_nowcast_matrix Matrix point nowcast predictions observations, rows representing reference times columns representing delays. reporting_triangle Matrix reporting triangle, rows representing time points reference columns representing delays. Can reporting matrix incomplete reporting matrix. Can also ragged reporting triangle, multiple columns reported row. (e.g. weekly reporting daily data). dispersion Vector dispersion parameters indexed horizon minus one maximum delay. draws Integer indicating number draws predicted nowcast vector generate. Default 1000. fun_to_aggregate Function operate along nowcast vectors summing across delays. Eventually, can add things like mean, now since providing negative binomial observation model, can allow sum. Currently supported functions: sum. k Integer indicating number reference times apply fun_to_aggregate create target used compute nowcast errors.","code":""},{"path":"https://baselinenowcast.epinowcast.org/reference/sample_predictions.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get a dataframe of multiple draws of only the predicted elements of the nowcast vector — sample_predictions","text":"Dataframe containing predicted point nowcast vectors indexed reference time (pred_count), reference time (time), draw index (draw).","code":""},{"path":"https://baselinenowcast.epinowcast.org/reference/sample_predictions.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get a dataframe of multiple draws of only the predicted elements of the nowcast vector — sample_predictions","text":"","code":"point_nowcast_matrix <- matrix(   c(     80, 50, 25, 10,     100, 50, 30, 20,     90, 45, 25, 16.8,     80, 40, 21.2, 19.5,     70, 34.5, 15.4, 9.1   ),   nrow = 5,   byrow = TRUE ) reporting_triangle <- construct_triangle(point_nowcast_matrix) disp <- c(0.8, 12.4, 9.1) nowcast_pred_draws <- sample_predictions(   point_nowcast_matrix,   reporting_triangle,   disp,   draws = 5 ) nowcast_pred_draws #>    pred_count time draw #> 1           0    1    1 #> 2           0    2    1 #> 3          11    3    1 #> 4          44    4    1 #> 5          39    5    1 #> 6           0    1    2 #> 7           0    2    2 #> 8          18    3    2 #> 9          58    4    2 #> 10         17    5    2 #> 11          0    1    3 #> 12          0    2    3 #> 13         11    3    3 #> 14         41    4    3 #> 15         11    5    3 #> 16          0    1    4 #> 17          0    2    4 #> 18         16    3    4 #> 19         53    4    4 #> 20        195    5    4 #> 21          0    1    5 #> 22          0    2    5 #> 23          9    3    5 #> 24         68    4    5 #> 25         63    5    5 # Get nowcast pred draws over rolling sum nowcast_pred_draws_rolling_df <- sample_predictions(   point_nowcast_matrix,   reporting_triangle,   disp,   500,   fun_to_aggregate = sum,   k = 2 ) nowcast_pred_draws_rolling_df #>      pred_count time draw #> 1             0    1    1 #> 2             0    2    1 #> 3            15    3    1 #> 4            47    4    1 #> 5             2    5    1 #> 6             0    1    2 #> 7             0    2    2 #> 8            22    3    2 #> 9            53    4    2 #> 10           51    5    2 #> 11            0    1    3 #> 12            0    2    3 #> 13            8    3    3 #> 14           30    4    3 #> 15           45    5    3 #> 16            0    1    4 #> 17            0    2    4 #> 18           14    3    4 #> 19           33    4    4 #> 20           18    5    4 #> 21            0    1    5 #> 22            0    2    5 #> 23           23    3    5 #> 24           20    4    5 #> 25           40    5    5 #> 26            0    1    6 #> 27            0    2    6 #> 28            8    3    6 #> 29           59    4    6 #> 30           13    5    6 #> 31            0    1    7 #> 32            0    2    7 #> 33           26    3    7 #> 34           37    4    7 #> 35          144    5    7 #> 36            0    1    8 #> 37            0    2    8 #> 38           24    3    8 #> 39           38    4    8 #> 40            1    5    8 #> 41            0    1    9 #> 42            0    2    9 #> 43           21    3    9 #> 44           59    4    9 #> 45          372    5    9 #> 46            0    1   10 #> 47            0    2   10 #> 48           28    3   10 #> 49           44    4   10 #> 50           17    5   10 #> 51            0    1   11 #> 52            0    2   11 #> 53           16    3   11 #> 54           29    4   11 #> 55           32    5   11 #> 56            0    1   12 #> 57            0    2   12 #> 58           10    3   12 #> 59           19    4   12 #> 60           39    5   12 #> 61            0    1   13 #> 62            0    2   13 #> 63           25    3   13 #> 64           34    4   13 #> 65            3    5   13 #> 66            0    1   14 #> 67            0    2   14 #> 68           11    3   14 #> 69           34    4   14 #> 70           17    5   14 #> 71            0    1   15 #> 72            0    2   15 #> 73           18    3   15 #> 74           36    4   15 #> 75           16    5   15 #> 76            0    1   16 #> 77            0    2   16 #> 78           31    3   16 #> 79           11    4   16 #> 80           52    5   16 #> 81            0    1   17 #> 82            0    2   17 #> 83           10    3   17 #> 84           38    4   17 #> 85           15    5   17 #> 86            0    1   18 #> 87            0    2   18 #> 88           14    3   18 #> 89           13    4   18 #> 90           18    5   18 #> 91            0    1   19 #> 92            0    2   19 #> 93           15    3   19 #> 94           30    4   19 #> 95           59    5   19 #> 96            0    1   20 #> 97            0    2   20 #> 98           21    3   20 #> 99           73    4   20 #> 100          72    5   20 #> 101           0    1   21 #> 102           0    2   21 #> 103          17    3   21 #> 104          45    4   21 #> 105         105    5   21 #> 106           0    1   22 #> 107           0    2   22 #> 108          24    3   22 #> 109          15    4   22 #> 110          11    5   22 #> 111           0    1   23 #> 112           0    2   23 #> 113          35    3   23 #> 114          32    4   23 #> 115         140    5   23 #> 116           0    1   24 #> 117           0    2   24 #> 118          16    3   24 #> 119          24    4   24 #> 120          58    5   24 #> 121           0    1   25 #> 122           0    2   25 #> 123          19    3   25 #> 124          35    4   25 #> 125           4    5   25 #> 126           0    1   26 #> 127           0    2   26 #> 128          24    3   26 #> 129          53    4   26 #> 130           4    5   26 #> 131           0    1   27 #> 132           0    2   27 #> 133          13    3   27 #> 134          54    4   27 #> 135           2    5   27 #> 136           0    1   28 #> 137           0    2   28 #> 138          23    3   28 #> 139          30    4   28 #> 140          24    5   28 #> 141           0    1   29 #> 142           0    2   29 #> 143          14    3   29 #> 144          24    4   29 #> 145          64    5   29 #> 146           0    1   30 #> 147           0    2   30 #> 148          17    3   30 #> 149          28    4   30 #> 150         190    5   30 #> 151           0    1   31 #> 152           0    2   31 #> 153          16    3   31 #> 154          36    4   31 #> 155         224    5   31 #> 156           0    1   32 #> 157           0    2   32 #> 158           4    3   32 #> 159          51    4   32 #> 160          13    5   32 #> 161           0    1   33 #> 162           0    2   33 #> 163          13    3   33 #> 164          40    4   33 #> 165         103    5   33 #> 166           0    1   34 #> 167           0    2   34 #> 168          12    3   34 #> 169          39    4   34 #> 170          86    5   34 #> 171           0    1   35 #> 172           0    2   35 #> 173          27    3   35 #> 174          24    4   35 #> 175         114    5   35 #> 176           0    1   36 #> 177           0    2   36 #> 178          10    3   36 #> 179          27    4   36 #> 180         134    5   36 #> 181           0    1   37 #> 182           0    2   37 #> 183           9    3   37 #> 184          46    4   37 #> 185           2    5   37 #> 186           0    1   38 #> 187           0    2   38 #> 188          30    3   38 #> 189          39    4   38 #> 190          70    5   38 #> 191           0    1   39 #> 192           0    2   39 #> 193          14    3   39 #> 194          36    4   39 #> 195          21    5   39 #> 196           0    1   40 #> 197           0    2   40 #> 198          27    3   40 #> 199          29    4   40 #> 200          53    5   40 #> 201           0    1   41 #> 202           0    2   41 #> 203          12    3   41 #> 204          36    4   41 #> 205           6    5   41 #> 206           0    1   42 #> 207           0    2   42 #> 208          28    3   42 #> 209          35    4   42 #> 210          39    5   42 #> 211           0    1   43 #> 212           0    2   43 #> 213          17    3   43 #> 214          32    4   43 #> 215           9    5   43 #> 216           0    1   44 #> 217           0    2   44 #> 218          16    3   44 #> 219          50    4   44 #> 220         141    5   44 #> 221           0    1   45 #> 222           0    2   45 #> 223          16    3   45 #> 224          52    4   45 #> 225          21    5   45 #> 226           0    1   46 #> 227           0    2   46 #> 228          11    3   46 #> 229          39    4   46 #> 230           0    5   46 #> 231           0    1   47 #> 232           0    2   47 #> 233          16    3   47 #> 234          36    4   47 #> 235          21    5   47 #> 236           0    1   48 #> 237           0    2   48 #> 238          12    3   48 #> 239          54    4   48 #> 240          17    5   48 #> 241           0    1   49 #> 242           0    2   49 #> 243          13    3   49 #> 244          44    4   49 #> 245          97    5   49 #> 246           0    1   50 #> 247           0    2   50 #> 248          13    3   50 #> 249          66    4   50 #> 250          52    5   50 #> 251           0    1   51 #> 252           0    2   51 #> 253          21    3   51 #> 254          35    4   51 #> 255          20    5   51 #> 256           0    1   52 #> 257           0    2   52 #> 258          11    3   52 #> 259          58    4   52 #> 260         109    5   52 #> 261           0    1   53 #> 262           0    2   53 #> 263          16    3   53 #> 264          52    4   53 #> 265          35    5   53 #> 266           0    1   54 #> 267           0    2   54 #> 268           8    3   54 #> 269          47    4   54 #> 270         152    5   54 #> 271           0    1   55 #> 272           0    2   55 #> 273          21    3   55 #> 274          49    4   55 #> 275           9    5   55 #> 276           0    1   56 #> 277           0    2   56 #> 278          22    3   56 #> 279          60    4   56 #> 280          53    5   56 #> 281           0    1   57 #> 282           0    2   57 #> 283          10    3   57 #> 284          25    4   57 #> 285          20    5   57 #> 286           0    1   58 #> 287           0    2   58 #> 288          22    3   58 #> 289          32    4   58 #> 290         165    5   58 #> 291           0    1   59 #> 292           0    2   59 #> 293          23    3   59 #> 294          56    4   59 #> 295          33    5   59 #> 296           0    1   60 #> 297           0    2   60 #> 298          19    3   60 #> 299          45    4   60 #> 300          39    5   60 #> 301           0    1   61 #> 302           0    2   61 #> 303          25    3   61 #> 304          60    4   61 #> 305           6    5   61 #> 306           0    1   62 #> 307           0    2   62 #> 308          15    3   62 #> 309          36    4   62 #> 310           3    5   62 #> 311           0    1   63 #> 312           0    2   63 #> 313          15    3   63 #> 314          49    4   63 #> 315          61    5   63 #> 316           0    1   64 #> 317           0    2   64 #> 318          23    3   64 #> 319          37    4   64 #> 320          11    5   64 #> 321           0    1   65 #> 322           0    2   65 #> 323          16    3   65 #> 324          40    4   65 #> 325         148    5   65 #> 326           0    1   66 #> 327           0    2   66 #> 328          11    3   66 #> 329          37    4   66 #> 330          83    5   66 #> 331           0    1   67 #> 332           0    2   67 #> 333           6    3   67 #> 334          36    4   67 #> 335          87    5   67 #> 336           0    1   68 #> 337           0    2   68 #> 338          19    3   68 #> 339          35    4   68 #> 340         212    5   68 #> 341           0    1   69 #> 342           0    2   69 #> 343          17    3   69 #> 344          32    4   69 #> 345          31    5   69 #> 346           0    1   70 #> 347           0    2   70 #> 348          12    3   70 #> 349          53    4   70 #> 350          42    5   70 #> 351           0    1   71 #> 352           0    2   71 #> 353          22    3   71 #> 354          40    4   71 #> 355          37    5   71 #> 356           0    1   72 #> 357           0    2   72 #> 358          42    3   72 #> 359          27    4   72 #> 360           3    5   72 #> 361           0    1   73 #> 362           0    2   73 #> 363          18    3   73 #> 364          28    4   73 #> 365          21    5   73 #> 366           0    1   74 #> 367           0    2   74 #> 368          11    3   74 #> 369          45    4   74 #> 370         340    5   74 #> 371           0    1   75 #> 372           0    2   75 #> 373          21    3   75 #> 374          59    4   75 #> 375          24    5   75 #> 376           0    1   76 #> 377           0    2   76 #> 378          15    3   76 #> 379          37    4   76 #> 380          74    5   76 #> 381           0    1   77 #> 382           0    2   77 #> 383          23    3   77 #> 384          35    4   77 #> 385          38    5   77 #> 386           0    1   78 #> 387           0    2   78 #> 388          12    3   78 #> 389          56    4   78 #> 390         201    5   78 #> 391           0    1   79 #> 392           0    2   79 #> 393          20    3   79 #> 394          44    4   79 #> 395           9    5   79 #> 396           0    1   80 #> 397           0    2   80 #> 398          14    3   80 #> 399          40    4   80 #> 400          14    5   80 #> 401           0    1   81 #> 402           0    2   81 #> 403          11    3   81 #> 404          46    4   81 #> 405           4    5   81 #> 406           0    1   82 #> 407           0    2   82 #> 408          15    3   82 #> 409          63    4   82 #> 410          34    5   82 #> 411           0    1   83 #> 412           0    2   83 #> 413          16    3   83 #> 414          40    4   83 #> 415           1    5   83 #> 416           0    1   84 #> 417           0    2   84 #> 418           7    3   84 #> 419          46    4   84 #> 420           4    5   84 #> 421           0    1   85 #> 422           0    2   85 #> 423           7    3   85 #> 424          29    4   85 #> 425          97    5   85 #> 426           0    1   86 #> 427           0    2   86 #> 428          24    3   86 #> 429          58    4   86 #> 430         163    5   86 #> 431           0    1   87 #> 432           0    2   87 #> 433          18    3   87 #> 434          28    4   87 #> 435           3    5   87 #> 436           0    1   88 #> 437           0    2   88 #> 438          18    3   88 #> 439          49    4   88 #> 440         110    5   88 #> 441           0    1   89 #> 442           0    2   89 #> 443          25    3   89 #> 444          36    4   89 #> 445         140    5   89 #> 446           0    1   90 #> 447           0    2   90 #> 448          13    3   90 #> 449          25    4   90 #> 450           3    5   90 #> 451           0    1   91 #> 452           0    2   91 #> 453          22    3   91 #> 454          24    4   91 #> 455          20    5   91 #> 456           0    1   92 #> 457           0    2   92 #> 458           8    3   92 #> 459          47    4   92 #> 460          99    5   92 #> 461           0    1   93 #> 462           0    2   93 #> 463           9    3   93 #> 464          43    4   93 #> 465          65    5   93 #> 466           0    1   94 #> 467           0    2   94 #> 468           7    3   94 #> 469          44    4   94 #> 470          11    5   94 #> 471           0    1   95 #> 472           0    2   95 #> 473           9    3   95 #> 474          32    4   95 #> 475          50    5   95 #> 476           0    1   96 #> 477           0    2   96 #> 478          14    3   96 #> 479          34    4   96 #> 480          46    5   96 #> 481           0    1   97 #> 482           0    2   97 #> 483          24    3   97 #> 484          36    4   97 #> 485           6    5   97 #> 486           0    1   98 #> 487           0    2   98 #> 488          26    3   98 #> 489          54    4   98 #> 490           7    5   98 #> 491           0    1   99 #> 492           0    2   99 #> 493          10    3   99 #> 494          62    4   99 #> 495         198    5   99 #> 496           0    1  100 #> 497           0    2  100 #> 498          32    3  100 #> 499          44    4  100 #> 500          38    5  100 #> 501           0    1  101 #> 502           0    2  101 #> 503          17    3  101 #> 504          36    4  101 #> 505           6    5  101 #> 506           0    1  102 #> 507           0    2  102 #> 508          17    3  102 #> 509          39    4  102 #> 510         150    5  102 #> 511           0    1  103 #> 512           0    2  103 #> 513          17    3  103 #> 514          32    4  103 #> 515           1    5  103 #> 516           0    1  104 #> 517           0    2  104 #> 518          16    3  104 #> 519          63    4  104 #> 520           0    5  104 #> 521           0    1  105 #> 522           0    2  105 #> 523          15    3  105 #> 524          46    4  105 #> 525          12    5  105 #> 526           0    1  106 #> 527           0    2  106 #> 528          14    3  106 #> 529          53    4  106 #> 530         231    5  106 #> 531           0    1  107 #> 532           0    2  107 #> 533          10    3  107 #> 534          64    4  107 #> 535          89    5  107 #> 536           0    1  108 #> 537           0    2  108 #> 538          16    3  108 #> 539          35    4  108 #> 540          15    5  108 #> 541           0    1  109 #> 542           0    2  109 #> 543          14    3  109 #> 544          55    4  109 #> 545          11    5  109 #> 546           0    1  110 #> 547           0    2  110 #> 548          28    3  110 #> 549          38    4  110 #> 550           1    5  110 #> 551           0    1  111 #> 552           0    2  111 #> 553          25    3  111 #> 554          44    4  111 #> 555          52    5  111 #> 556           0    1  112 #> 557           0    2  112 #> 558           9    3  112 #> 559          21    4  112 #> 560           4    5  112 #> 561           0    1  113 #> 562           0    2  113 #> 563          15    3  113 #> 564          44    4  113 #> 565          26    5  113 #> 566           0    1  114 #> 567           0    2  114 #> 568           7    3  114 #> 569          48    4  114 #> 570         146    5  114 #> 571           0    1  115 #> 572           0    2  115 #> 573          16    3  115 #> 574          35    4  115 #> 575          50    5  115 #> 576           0    1  116 #> 577           0    2  116 #> 578          20    3  116 #> 579          55    4  116 #> 580          16    5  116 #> 581           0    1  117 #> 582           0    2  117 #> 583           6    3  117 #> 584          52    4  117 #> 585          22    5  117 #> 586           0    1  118 #> 587           0    2  118 #> 588          18    3  118 #> 589          42    4  118 #> 590          66    5  118 #> 591           0    1  119 #> 592           0    2  119 #> 593          18    3  119 #> 594          43    4  119 #> 595          64    5  119 #> 596           0    1  120 #> 597           0    2  120 #> 598          18    3  120 #> 599          58    4  120 #> 600          17    5  120 #> 601           0    1  121 #> 602           0    2  121 #> 603          20    3  121 #> 604          39    4  121 #> 605           5    5  121 #> 606           0    1  122 #> 607           0    2  122 #> 608          12    3  122 #> 609          77    4  122 #> 610           8    5  122 #> 611           0    1  123 #> 612           0    2  123 #> 613          26    3  123 #> 614          81    4  123 #> 615          19    5  123 #> 616           0    1  124 #> 617           0    2  124 #> 618          14    3  124 #> 619          89    4  124 #> 620          72    5  124 #> 621           0    1  125 #> 622           0    2  125 #> 623          23    3  125 #> 624          52    4  125 #> 625          72    5  125 #> 626           0    1  126 #> 627           0    2  126 #> 628           9    3  126 #> 629          53    4  126 #> 630          29    5  126 #> 631           0    1  127 #> 632           0    2  127 #> 633          14    3  127 #> 634          58    4  127 #> 635           1    5  127 #> 636           0    1  128 #> 637           0    2  128 #> 638          10    3  128 #> 639          64    4  128 #> 640          36    5  128 #> 641           0    1  129 #> 642           0    2  129 #> 643          24    3  129 #> 644          43    4  129 #> 645          50    5  129 #> 646           0    1  130 #> 647           0    2  130 #> 648          19    3  130 #> 649          39    4  130 #> 650          24    5  130 #> 651           0    1  131 #> 652           0    2  131 #> 653          12    3  131 #> 654          46    4  131 #> 655          15    5  131 #> 656           0    1  132 #> 657           0    2  132 #> 658          16    3  132 #> 659          51    4  132 #> 660          76    5  132 #> 661           0    1  133 #> 662           0    2  133 #> 663          12    3  133 #> 664          25    4  133 #> 665         100    5  133 #> 666           0    1  134 #> 667           0    2  134 #> 668          13    3  134 #> 669          38    4  134 #> 670          21    5  134 #> 671           0    1  135 #> 672           0    2  135 #> 673          21    3  135 #> 674          25    4  135 #> 675           7    5  135 #> 676           0    1  136 #> 677           0    2  136 #> 678          18    3  136 #> 679          38    4  136 #> 680           4    5  136 #> 681           0    1  137 #> 682           0    2  137 #> 683          21    3  137 #> 684          18    4  137 #> 685         196    5  137 #> 686           0    1  138 #> 687           0    2  138 #> 688          16    3  138 #> 689          58    4  138 #> 690          66    5  138 #> 691           0    1  139 #> 692           0    2  139 #> 693          20    3  139 #> 694          35    4  139 #> 695          47    5  139 #> 696           0    1  140 #> 697           0    2  140 #> 698          23    3  140 #> 699          56    4  140 #> 700           4    5  140 #> 701           0    1  141 #> 702           0    2  141 #> 703          22    3  141 #> 704          23    4  141 #> 705          37    5  141 #> 706           0    1  142 #> 707           0    2  142 #> 708           9    3  142 #> 709          49    4  142 #> 710          62    5  142 #> 711           0    1  143 #> 712           0    2  143 #> 713           4    3  143 #> 714          33    4  143 #> 715         180    5  143 #> 716           0    1  144 #> 717           0    2  144 #> 718          21    3  144 #> 719          39    4  144 #> 720          33    5  144 #> 721           0    1  145 #> 722           0    2  145 #> 723           9    3  145 #> 724          53    4  145 #> 725          10    5  145 #> 726           0    1  146 #> 727           0    2  146 #> 728          11    3  146 #> 729          20    4  146 #> 730          28    5  146 #> 731           0    1  147 #> 732           0    2  147 #> 733          22    3  147 #> 734          43    4  147 #> 735           2    5  147 #> 736           0    1  148 #> 737           0    2  148 #> 738          23    3  148 #> 739          59    4  148 #> 740          45    5  148 #> 741           0    1  149 #> 742           0    2  149 #> 743           6    3  149 #> 744          45    4  149 #> 745          26    5  149 #> 746           0    1  150 #> 747           0    2  150 #> 748          19    3  150 #> 749          28    4  150 #> 750          81    5  150 #> 751           0    1  151 #> 752           0    2  151 #> 753          14    3  151 #> 754          51    4  151 #> 755          91    5  151 #> 756           0    1  152 #> 757           0    2  152 #> 758          20    3  152 #> 759          32    4  152 #> 760          86    5  152 #> 761           0    1  153 #> 762           0    2  153 #> 763          18    3  153 #> 764          39    4  153 #> 765          13    5  153 #> 766           0    1  154 #> 767           0    2  154 #> 768          15    3  154 #> 769          21    4  154 #> 770           4    5  154 #> 771           0    1  155 #> 772           0    2  155 #> 773          16    3  155 #> 774          31    4  155 #> 775          52    5  155 #> 776           0    1  156 #> 777           0    2  156 #> 778          17    3  156 #> 779          54    4  156 #> 780         333    5  156 #> 781           0    1  157 #> 782           0    2  157 #> 783          12    3  157 #> 784          38    4  157 #> 785          16    5  157 #> 786           0    1  158 #> 787           0    2  158 #> 788           7    3  158 #> 789          55    4  158 #> 790          14    5  158 #> 791           0    1  159 #> 792           0    2  159 #> 793           7    3  159 #> 794          38    4  159 #> 795           5    5  159 #> 796           0    1  160 #> 797           0    2  160 #> 798          20    3  160 #> 799          30    4  160 #> 800          44    5  160 #> 801           0    1  161 #> 802           0    2  161 #> 803          18    3  161 #> 804          47    4  161 #> 805          18    5  161 #> 806           0    1  162 #> 807           0    2  162 #> 808          16    3  162 #> 809          44    4  162 #> 810         117    5  162 #> 811           0    1  163 #> 812           0    2  163 #> 813          21    3  163 #> 814          37    4  163 #> 815         106    5  163 #> 816           0    1  164 #> 817           0    2  164 #> 818          11    3  164 #> 819          52    4  164 #> 820         141    5  164 #> 821           0    1  165 #> 822           0    2  165 #> 823          17    3  165 #> 824          45    4  165 #> 825         320    5  165 #> 826           0    1  166 #> 827           0    2  166 #> 828          19    3  166 #> 829          52    4  166 #> 830         204    5  166 #> 831           0    1  167 #> 832           0    2  167 #> 833          15    3  167 #> 834          48    4  167 #> 835          21    5  167 #> 836           0    1  168 #> 837           0    2  168 #> 838          21    3  168 #> 839          34    4  168 #> 840          64    5  168 #> 841           0    1  169 #> 842           0    2  169 #> 843          17    3  169 #> 844          30    4  169 #> 845          86    5  169 #> 846           0    1  170 #> 847           0    2  170 #> 848          21    3  170 #> 849          36    4  170 #> 850         116    5  170 #> 851           0    1  171 #> 852           0    2  171 #> 853           6    3  171 #> 854          18    4  171 #> 855          40    5  171 #> 856           0    1  172 #> 857           0    2  172 #> 858          11    3  172 #> 859          39    4  172 #> 860           0    5  172 #> 861           0    1  173 #> 862           0    2  173 #> 863          26    3  173 #> 864          44    4  173 #> 865         164    5  173 #> 866           0    1  174 #> 867           0    2  174 #> 868          12    3  174 #> 869          47    4  174 #> 870          22    5  174 #> 871           0    1  175 #> 872           0    2  175 #> 873          18    3  175 #> 874          48    4  175 #> 875          56    5  175 #> 876           0    1  176 #> 877           0    2  176 #> 878          11    3  176 #> 879          35    4  176 #> 880          68    5  176 #> 881           0    1  177 #> 882           0    2  177 #> 883          12    3  177 #> 884          30    4  177 #> 885          48    5  177 #> 886           0    1  178 #> 887           0    2  178 #> 888          19    3  178 #> 889          22    4  178 #> 890          10    5  178 #> 891           0    1  179 #> 892           0    2  179 #> 893          24    3  179 #> 894          49    4  179 #> 895          90    5  179 #> 896           0    1  180 #> 897           0    2  180 #> 898          19    3  180 #> 899          38    4  180 #> 900         332    5  180 #> 901           0    1  181 #> 902           0    2  181 #> 903          19    3  181 #> 904          23    4  181 #> 905           3    5  181 #> 906           0    1  182 #> 907           0    2  182 #> 908          15    3  182 #> 909          20    4  182 #> 910          30    5  182 #> 911           0    1  183 #> 912           0    2  183 #> 913          10    3  183 #> 914          47    4  183 #> 915          27    5  183 #> 916           0    1  184 #> 917           0    2  184 #> 918          17    3  184 #> 919          54    4  184 #> 920         121    5  184 #> 921           0    1  185 #> 922           0    2  185 #> 923          21    3  185 #> 924          51    4  185 #> 925          65    5  185 #> 926           0    1  186 #> 927           0    2  186 #> 928          29    3  186 #> 929          32    4  186 #> 930          45    5  186 #> 931           0    1  187 #> 932           0    2  187 #> 933          21    3  187 #> 934          54    4  187 #> 935         132    5  187 #> 936           0    1  188 #> 937           0    2  188 #> 938          15    3  188 #> 939          53    4  188 #> 940          38    5  188 #> 941           0    1  189 #> 942           0    2  189 #> 943          19    3  189 #> 944          37    4  189 #> 945          28    5  189 #> 946           0    1  190 #> 947           0    2  190 #> 948          21    3  190 #> 949          43    4  190 #> 950           3    5  190 #> 951           0    1  191 #> 952           0    2  191 #> 953          20    3  191 #> 954          40    4  191 #> 955           0    5  191 #> 956           0    1  192 #> 957           0    2  192 #> 958          12    3  192 #> 959          32    4  192 #> 960           3    5  192 #> 961           0    1  193 #> 962           0    2  193 #> 963          15    3  193 #> 964          43    4  193 #> 965         280    5  193 #> 966           0    1  194 #> 967           0    2  194 #> 968           9    3  194 #> 969          35    4  194 #> 970         218    5  194 #> 971           0    1  195 #> 972           0    2  195 #> 973           6    3  195 #> 974          42    4  195 #> 975          81    5  195 #> 976           0    1  196 #> 977           0    2  196 #> 978          12    3  196 #> 979          33    4  196 #> 980         141    5  196 #> 981           0    1  197 #> 982           0    2  197 #> 983          12    3  197 #> 984          41    4  197 #> 985         102    5  197 #> 986           0    1  198 #> 987           0    2  198 #> 988          18    3  198 #> 989          59    4  198 #> 990          51    5  198 #> 991           0    1  199 #> 992           0    2  199 #> 993          33    3  199 #> 994          32    4  199 #> 995           1    5  199 #> 996           0    1  200 #> 997           0    2  200 #> 998           9    3  200 #> 999          34    4  200 #> 1000         53    5  200 #> 1001          0    1  201 #> 1002          0    2  201 #> 1003         13    3  201 #> 1004         45    4  201 #> 1005        161    5  201 #> 1006          0    1  202 #> 1007          0    2  202 #> 1008         18    3  202 #> 1009         48    4  202 #> 1010        101    5  202 #> 1011          0    1  203 #> 1012          0    2  203 #> 1013         14    3  203 #> 1014         67    4  203 #> 1015          1    5  203 #> 1016          0    1  204 #> 1017          0    2  204 #> 1018         36    3  204 #> 1019         48    4  204 #> 1020          3    5  204 #> 1021          0    1  205 #> 1022          0    2  205 #> 1023         17    3  205 #> 1024         41    4  205 #> 1025         81    5  205 #> 1026          0    1  206 #> 1027          0    2  206 #> 1028         12    3  206 #> 1029         54    4  206 #> 1030         40    5  206 #> 1031          0    1  207 #> 1032          0    2  207 #> 1033         16    3  207 #> 1034         37    4  207 #> 1035         51    5  207 #> 1036          0    1  208 #> 1037          0    2  208 #> 1038         33    3  208 #> 1039         30    4  208 #> 1040        117    5  208 #> 1041          0    1  209 #> 1042          0    2  209 #> 1043          9    3  209 #> 1044         42    4  209 #> 1045         60    5  209 #> 1046          0    1  210 #> 1047          0    2  210 #> 1048         24    3  210 #> 1049         53    4  210 #> 1050         54    5  210 #> 1051          0    1  211 #> 1052          0    2  211 #> 1053         18    3  211 #> 1054         26    4  211 #> 1055        101    5  211 #> 1056          0    1  212 #> 1057          0    2  212 #> 1058         23    3  212 #> 1059         23    4  212 #> 1060         28    5  212 #> 1061          0    1  213 #> 1062          0    2  213 #> 1063         18    3  213 #> 1064         55    4  213 #> 1065         15    5  213 #> 1066          0    1  214 #> 1067          0    2  214 #> 1068         10    3  214 #> 1069         29    4  214 #> 1070         67    5  214 #> 1071          0    1  215 #> 1072          0    2  215 #> 1073          7    3  215 #> 1074         43    4  215 #> 1075         74    5  215 #> 1076          0    1  216 #> 1077          0    2  216 #> 1078         12    3  216 #> 1079         40    4  216 #> 1080          9    5  216 #> 1081          0    1  217 #> 1082          0    2  217 #> 1083         14    3  217 #> 1084         64    4  217 #> 1085         56    5  217 #> 1086          0    1  218 #> 1087          0    2  218 #> 1088         21    3  218 #> 1089         36    4  218 #> 1090          8    5  218 #> 1091          0    1  219 #> 1092          0    2  219 #> 1093         10    3  219 #> 1094         40    4  219 #> 1095         70    5  219 #> 1096          0    1  220 #> 1097          0    2  220 #> 1098         15    3  220 #> 1099         56    4  220 #> 1100         27    5  220 #> 1101          0    1  221 #> 1102          0    2  221 #> 1103         16    3  221 #> 1104         39    4  221 #> 1105         11    5  221 #> 1106          0    1  222 #> 1107          0    2  222 #> 1108          8    3  222 #> 1109         57    4  222 #> 1110          6    5  222 #> 1111          0    1  223 #> 1112          0    2  223 #> 1113         12    3  223 #> 1114         53    4  223 #> 1115         28    5  223 #> 1116          0    1  224 #> 1117          0    2  224 #> 1118         21    3  224 #> 1119         47    4  224 #> 1120         33    5  224 #> 1121          0    1  225 #> 1122          0    2  225 #> 1123         12    3  225 #> 1124         30    4  225 #> 1125          2    5  225 #> 1126          0    1  226 #> 1127          0    2  226 #> 1128         24    3  226 #> 1129         34    4  226 #> 1130          4    5  226 #> 1131          0    1  227 #> 1132          0    2  227 #> 1133         15    3  227 #> 1134         21    4  227 #> 1135         41    5  227 #> 1136          0    1  228 #> 1137          0    2  228 #> 1138          8    3  228 #> 1139         31    4  228 #> 1140         75    5  228 #> 1141          0    1  229 #> 1142          0    2  229 #> 1143         23    3  229 #> 1144         74    4  229 #> 1145         54    5  229 #> 1146          0    1  230 #> 1147          0    2  230 #> 1148          5    3  230 #> 1149         40    4  230 #> 1150          7    5  230 #> 1151          0    1  231 #> 1152          0    2  231 #> 1153         15    3  231 #> 1154         57    4  231 #> 1155        203    5  231 #> 1156          0    1  232 #> 1157          0    2  232 #> 1158         13    3  232 #> 1159         53    4  232 #> 1160         46    5  232 #> 1161          0    1  233 #> 1162          0    2  233 #> 1163         12    3  233 #> 1164         15    4  233 #> 1165         15    5  233 #> 1166          0    1  234 #> 1167          0    2  234 #> 1168         24    3  234 #> 1169         26    4  234 #> 1170         68    5  234 #> 1171          0    1  235 #> 1172          0    2  235 #> 1173         19    3  235 #> 1174         41    4  235 #> 1175          8    5  235 #> 1176          0    1  236 #> 1177          0    2  236 #> 1178         25    3  236 #> 1179         20    4  236 #> 1180         27    5  236 #> 1181          0    1  237 #> 1182          0    2  237 #> 1183         17    3  237 #> 1184         63    4  237 #> 1185         34    5  237 #> 1186          0    1  238 #> 1187          0    2  238 #> 1188         14    3  238 #> 1189         27    4  238 #> 1190          0    5  238 #> 1191          0    1  239 #> 1192          0    2  239 #> 1193         20    3  239 #> 1194         52    4  239 #> 1195          9    5  239 #> 1196          0    1  240 #> 1197          0    2  240 #> 1198         22    3  240 #> 1199         48    4  240 #> 1200         30    5  240 #> 1201          0    1  241 #> 1202          0    2  241 #> 1203          5    3  241 #> 1204         45    4  241 #> 1205          8    5  241 #> 1206          0    1  242 #> 1207          0    2  242 #> 1208         15    3  242 #> 1209         38    4  242 #> 1210        113    5  242 #> 1211          0    1  243 #> 1212          0    2  243 #> 1213         19    3  243 #> 1214         60    4  243 #> 1215         41    5  243 #> 1216          0    1  244 #> 1217          0    2  244 #> 1218         13    3  244 #> 1219         42    4  244 #> 1220        152    5  244 #> 1221          0    1  245 #> 1222          0    2  245 #> 1223         21    3  245 #> 1224         36    4  245 #> 1225         48    5  245 #> 1226          0    1  246 #> 1227          0    2  246 #> 1228         21    3  246 #> 1229         33    4  246 #> 1230        108    5  246 #> 1231          0    1  247 #> 1232          0    2  247 #> 1233         18    3  247 #> 1234         66    4  247 #> 1235         42    5  247 #> 1236          0    1  248 #> 1237          0    2  248 #> 1238         14    3  248 #> 1239         27    4  248 #> 1240          8    5  248 #> 1241          0    1  249 #> 1242          0    2  249 #> 1243         21    3  249 #> 1244         32    4  249 #> 1245        154    5  249 #> 1246          0    1  250 #> 1247          0    2  250 #> 1248         11    3  250 #> 1249         53    4  250 #> 1250          8    5  250 #> 1251          0    1  251 #> 1252          0    2  251 #> 1253         10    3  251 #> 1254         31    4  251 #> 1255          2    5  251 #> 1256          0    1  252 #> 1257          0    2  252 #> 1258         17    3  252 #> 1259         53    4  252 #> 1260         93    5  252 #> 1261          0    1  253 #> 1262          0    2  253 #> 1263         13    3  253 #> 1264         24    4  253 #> 1265         55    5  253 #> 1266          0    1  254 #> 1267          0    2  254 #> 1268         11    3  254 #> 1269         21    4  254 #> 1270        159    5  254 #> 1271          0    1  255 #> 1272          0    2  255 #> 1273         19    3  255 #> 1274         35    4  255 #> 1275        226    5  255 #> 1276          0    1  256 #> 1277          0    2  256 #> 1278         28    3  256 #> 1279         36    4  256 #> 1280          1    5  256 #> 1281          0    1  257 #> 1282          0    2  257 #> 1283         12    3  257 #> 1284         37    4  257 #> 1285          0    5  257 #> 1286          0    1  258 #> 1287          0    2  258 #> 1288         22    3  258 #> 1289         53    4  258 #> 1290         34    5  258 #> 1291          0    1  259 #> 1292          0    2  259 #> 1293         20    3  259 #> 1294         48    4  259 #> 1295         19    5  259 #> 1296          0    1  260 #> 1297          0    2  260 #> 1298         16    3  260 #> 1299         46    4  260 #> 1300         29    5  260 #> 1301          0    1  261 #> 1302          0    2  261 #> 1303         11    3  261 #> 1304         36    4  261 #> 1305         97    5  261 #> 1306          0    1  262 #> 1307          0    2  262 #> 1308         20    3  262 #> 1309         25    4  262 #> 1310         36    5  262 #> 1311          0    1  263 #> 1312          0    2  263 #> 1313         26    3  263 #> 1314         61    4  263 #> 1315         36    5  263 #> 1316          0    1  264 #> 1317          0    2  264 #> 1318         28    3  264 #> 1319         42    4  264 #> 1320          5    5  264 #> 1321          0    1  265 #> 1322          0    2  265 #> 1323         25    3  265 #> 1324         53    4  265 #> 1325         54    5  265 #> 1326          0    1  266 #> 1327          0    2  266 #> 1328         12    3  266 #> 1329         40    4  266 #> 1330         91    5  266 #> 1331          0    1  267 #> 1332          0    2  267 #> 1333          9    3  267 #> 1334         32    4  267 #> 1335          5    5  267 #> 1336          0    1  268 #> 1337          0    2  268 #> 1338          7    3  268 #> 1339         52    4  268 #> 1340         55    5  268 #> 1341          0    1  269 #> 1342          0    2  269 #> 1343         20    3  269 #> 1344         27    4  269 #> 1345         96    5  269 #> 1346          0    1  270 #> 1347          0    2  270 #> 1348         25    3  270 #> 1349         50    4  270 #> 1350         15    5  270 #> 1351          0    1  271 #> 1352          0    2  271 #> 1353         21    3  271 #> 1354         38    4  271 #> 1355         70    5  271 #> 1356          0    1  272 #> 1357          0    2  272 #> 1358         10    3  272 #> 1359         41    4  272 #> 1360        175    5  272 #> 1361          0    1  273 #> 1362          0    2  273 #> 1363         14    3  273 #> 1364         53    4  273 #> 1365          2    5  273 #> 1366          0    1  274 #> 1367          0    2  274 #> 1368         21    3  274 #> 1369         23    4  274 #> 1370         22    5  274 #> 1371          0    1  275 #> 1372          0    2  275 #> 1373         22    3  275 #> 1374         37    4  275 #> 1375         35    5  275 #> 1376          0    1  276 #> 1377          0    2  276 #> 1378         12    3  276 #> 1379         21    4  276 #> 1380        197    5  276 #> 1381          0    1  277 #> 1382          0    2  277 #> 1383         17    3  277 #> 1384         21    4  277 #> 1385         28    5  277 #> 1386          0    1  278 #> 1387          0    2  278 #> 1388         24    3  278 #> 1389         43    4  278 #> 1390         29    5  278 #> 1391          0    1  279 #> 1392          0    2  279 #> 1393          4    3  279 #> 1394         52    4  279 #> 1395         18    5  279 #> 1396          0    1  280 #> 1397          0    2  280 #> 1398         20    3  280 #> 1399         19    4  280 #> 1400         43    5  280 #> 1401          0    1  281 #> 1402          0    2  281 #> 1403         23    3  281 #> 1404         56    4  281 #> 1405        127    5  281 #> 1406          0    1  282 #> 1407          0    2  282 #> 1408         18    3  282 #> 1409         54    4  282 #> 1410          0    5  282 #> 1411          0    1  283 #> 1412          0    2  283 #> 1413         19    3  283 #> 1414         53    4  283 #> 1415         31    5  283 #> 1416          0    1  284 #> 1417          0    2  284 #> 1418         15    3  284 #> 1419         32    4  284 #> 1420        110    5  284 #> 1421          0    1  285 #> 1422          0    2  285 #> 1423         18    3  285 #> 1424         43    4  285 #> 1425        100    5  285 #> 1426          0    1  286 #> 1427          0    2  286 #> 1428         16    3  286 #> 1429         39    4  286 #> 1430         86    5  286 #> 1431          0    1  287 #> 1432          0    2  287 #> 1433         29    3  287 #> 1434         21    4  287 #> 1435         26    5  287 #> 1436          0    1  288 #> 1437          0    2  288 #> 1438         30    3  288 #> 1439         46    4  288 #> 1440         13    5  288 #> 1441          0    1  289 #> 1442          0    2  289 #> 1443         27    3  289 #> 1444         42    4  289 #> 1445          0    5  289 #> 1446          0    1  290 #> 1447          0    2  290 #> 1448         16    3  290 #> 1449         49    4  290 #> 1450          4    5  290 #> 1451          0    1  291 #> 1452          0    2  291 #> 1453         26    3  291 #> 1454         44    4  291 #> 1455         17    5  291 #> 1456          0    1  292 #> 1457          0    2  292 #> 1458          9    3  292 #> 1459         28    4  292 #> 1460          7    5  292 #> 1461          0    1  293 #> 1462          0    2  293 #> 1463         12    3  293 #> 1464         52    4  293 #> 1465          7    5  293 #> 1466          0    1  294 #> 1467          0    2  294 #> 1468         14    3  294 #> 1469         63    4  294 #> 1470         41    5  294 #> 1471          0    1  295 #> 1472          0    2  295 #> 1473         11    3  295 #> 1474         36    4  295 #> 1475         66    5  295 #> 1476          0    1  296 #> 1477          0    2  296 #> 1478          6    3  296 #> 1479         20    4  296 #> 1480         33    5  296 #> 1481          0    1  297 #> 1482          0    2  297 #> 1483         13    3  297 #> 1484         76    4  297 #> 1485         93    5  297 #> 1486          0    1  298 #> 1487          0    2  298 #> 1488          6    3  298 #> 1489         36    4  298 #> 1490        113    5  298 #> 1491          0    1  299 #> 1492          0    2  299 #> 1493         25    3  299 #> 1494         44    4  299 #> 1495        167    5  299 #> 1496          0    1  300 #> 1497          0    2  300 #> 1498         19    3  300 #> 1499         37    4  300 #> 1500          2    5  300 #> 1501          0    1  301 #> 1502          0    2  301 #> 1503         11    3  301 #> 1504         27    4  301 #> 1505        200    5  301 #> 1506          0    1  302 #> 1507          0    2  302 #> 1508         21    3  302 #> 1509         45    4  302 #> 1510        103    5  302 #> 1511          0    1  303 #> 1512          0    2  303 #> 1513         14    3  303 #> 1514         21    4  303 #> 1515         29    5  303 #> 1516          0    1  304 #> 1517          0    2  304 #> 1518          8    3  304 #> 1519         21    4  304 #> 1520         52    5  304 #> 1521          0    1  305 #> 1522          0    2  305 #> 1523         14    3  305 #> 1524         39    4  305 #> 1525          8    5  305 #> 1526          0    1  306 #> 1527          0    2  306 #> 1528         16    3  306 #> 1529         44    4  306 #> 1530         14    5  306 #> 1531          0    1  307 #> 1532          0    2  307 #> 1533         19    3  307 #> 1534         30    4  307 #> 1535        173    5  307 #> 1536          0    1  308 #> 1537          0    2  308 #> 1538         19    3  308 #> 1539         26    4  308 #> 1540         27    5  308 #> 1541          0    1  309 #> 1542          0    2  309 #> 1543         22    3  309 #> 1544         21    4  309 #> 1545         45    5  309 #> 1546          0    1  310 #> 1547          0    2  310 #> 1548         13    3  310 #> 1549         19    4  310 #> 1550        126    5  310 #> 1551          0    1  311 #> 1552          0    2  311 #> 1553         16    3  311 #> 1554         39    4  311 #> 1555         77    5  311 #> 1556          0    1  312 #> 1557          0    2  312 #> 1558         23    3  312 #> 1559         27    4  312 #> 1560          8    5  312 #> 1561          0    1  313 #> 1562          0    2  313 #> 1563          9    3  313 #> 1564         28    4  313 #> 1565         14    5  313 #> 1566          0    1  314 #> 1567          0    2  314 #> 1568         12    3  314 #> 1569         50    4  314 #> 1570        117    5  314 #> 1571          0    1  315 #> 1572          0    2  315 #> 1573         14    3  315 #> 1574         44    4  315 #> 1575         84    5  315 #> 1576          0    1  316 #> 1577          0    2  316 #> 1578          7    3  316 #> 1579         52    4  316 #> 1580          1    5  316 #> 1581          0    1  317 #> 1582          0    2  317 #> 1583         12    3  317 #> 1584         41    4  317 #> 1585          3    5  317 #> 1586          0    1  318 #> 1587          0    2  318 #> 1588         17    3  318 #> 1589         43    4  318 #> 1590         38    5  318 #> 1591          0    1  319 #> 1592          0    2  319 #> 1593          9    3  319 #> 1594         45    4  319 #> 1595         30    5  319 #> 1596          0    1  320 #> 1597          0    2  320 #> 1598         17    3  320 #> 1599         29    4  320 #> 1600        111    5  320 #> 1601          0    1  321 #> 1602          0    2  321 #> 1603          8    3  321 #> 1604         63    4  321 #> 1605          2    5  321 #> 1606          0    1  322 #> 1607          0    2  322 #> 1608          9    3  322 #> 1609         51    4  322 #> 1610         88    5  322 #> 1611          0    1  323 #> 1612          0    2  323 #> 1613         17    3  323 #> 1614         53    4  323 #> 1615        128    5  323 #> 1616          0    1  324 #> 1617          0    2  324 #> 1618         14    3  324 #> 1619         56    4  324 #> 1620         37    5  324 #> 1621          0    1  325 #> 1622          0    2  325 #> 1623          9    3  325 #> 1624         65    4  325 #> 1625         31    5  325 #> 1626          0    1  326 #> 1627          0    2  326 #> 1628         10    3  326 #> 1629         27    4  326 #> 1630        166    5  326 #> 1631          0    1  327 #> 1632          0    2  327 #> 1633         13    3  327 #> 1634         33    4  327 #> 1635         16    5  327 #> 1636          0    1  328 #> 1637          0    2  328 #> 1638         14    3  328 #> 1639         47    4  328 #> 1640         57    5  328 #> 1641          0    1  329 #> 1642          0    2  329 #> 1643         11    3  329 #> 1644         53    4  329 #> 1645         71    5  329 #> 1646          0    1  330 #> 1647          0    2  330 #> 1648         20    3  330 #> 1649         46    4  330 #> 1650         55    5  330 #> 1651          0    1  331 #> 1652          0    2  331 #> 1653         15    3  331 #> 1654         46    4  331 #> 1655          2    5  331 #> 1656          0    1  332 #> 1657          0    2  332 #> 1658          9    3  332 #> 1659         30    4  332 #> 1660         72    5  332 #> 1661          0    1  333 #> 1662          0    2  333 #> 1663          4    3  333 #> 1664         70    4  333 #> 1665          4    5  333 #> 1666          0    1  334 #> 1667          0    2  334 #> 1668         31    3  334 #> 1669         40    4  334 #> 1670          3    5  334 #> 1671          0    1  335 #> 1672          0    2  335 #> 1673          6    3  335 #> 1674         49    4  335 #> 1675         93    5  335 #> 1676          0    1  336 #> 1677          0    2  336 #> 1678         10    3  336 #> 1679         56    4  336 #> 1680         70    5  336 #> 1681          0    1  337 #> 1682          0    2  337 #> 1683         15    3  337 #> 1684         63    4  337 #> 1685         49    5  337 #> 1686          0    1  338 #> 1687          0    2  338 #> 1688          5    3  338 #> 1689         28    4  338 #> 1690          5    5  338 #> 1691          0    1  339 #> 1692          0    2  339 #> 1693         12    3  339 #> 1694         31    4  339 #> 1695         33    5  339 #> 1696          0    1  340 #> 1697          0    2  340 #> 1698         37    3  340 #> 1699         27    4  340 #> 1700         82    5  340 #> 1701          0    1  341 #> 1702          0    2  341 #> 1703         18    3  341 #> 1704         23    4  341 #> 1705         79    5  341 #> 1706          0    1  342 #> 1707          0    2  342 #> 1708         11    3  342 #> 1709         78    4  342 #> 1710        231    5  342 #> 1711          0    1  343 #> 1712          0    2  343 #> 1713         17    3  343 #> 1714         39    4  343 #> 1715          0    5  343 #> 1716          0    1  344 #> 1717          0    2  344 #> 1718         13    3  344 #> 1719         41    4  344 #> 1720         81    5  344 #> 1721          0    1  345 #> 1722          0    2  345 #> 1723         25    3  345 #> 1724         22    4  345 #> 1725          3    5  345 #> 1726          0    1  346 #> 1727          0    2  346 #> 1728         16    3  346 #> 1729         27    4  346 #> 1730         52    5  346 #> 1731          0    1  347 #> 1732          0    2  347 #> 1733         32    3  347 #> 1734         27    4  347 #> 1735        127    5  347 #> 1736          0    1  348 #> 1737          0    2  348 #> 1738         11    3  348 #> 1739         77    4  348 #> 1740         36    5  348 #> 1741          0    1  349 #> 1742          0    2  349 #> 1743         20    3  349 #> 1744         25    4  349 #> 1745         17    5  349 #> 1746          0    1  350 #> 1747          0    2  350 #> 1748         16    3  350 #> 1749         38    4  350 #> 1750        312    5  350 #> 1751          0    1  351 #> 1752          0    2  351 #> 1753         20    3  351 #> 1754         69    4  351 #> 1755          2    5  351 #> 1756          0    1  352 #> 1757          0    2  352 #> 1758         14    3  352 #> 1759         49    4  352 #> 1760         71    5  352 #> 1761          0    1  353 #> 1762          0    2  353 #> 1763         25    3  353 #> 1764         27    4  353 #> 1765         46    5  353 #> 1766          0    1  354 #> 1767          0    2  354 #> 1768         21    3  354 #> 1769         34    4  354 #> 1770          4    5  354 #> 1771          0    1  355 #> 1772          0    2  355 #> 1773         21    3  355 #> 1774         29    4  355 #> 1775        195    5  355 #> 1776          0    1  356 #> 1777          0    2  356 #> 1778          6    3  356 #> 1779         70    4  356 #> 1780          3    5  356 #> 1781          0    1  357 #> 1782          0    2  357 #> 1783         25    3  357 #> 1784         44    4  357 #> 1785          0    5  357 #> 1786          0    1  358 #> 1787          0    2  358 #> 1788         23    3  358 #> 1789         63    4  358 #> 1790         74    5  358 #> 1791          0    1  359 #> 1792          0    2  359 #> 1793         19    3  359 #> 1794         44    4  359 #> 1795         60    5  359 #> 1796          0    1  360 #> 1797          0    2  360 #> 1798         35    3  360 #> 1799         74    4  360 #> 1800        313    5  360 #> 1801          0    1  361 #> 1802          0    2  361 #> 1803         33    3  361 #> 1804         36    4  361 #> 1805        108    5  361 #> 1806          0    1  362 #> 1807          0    2  362 #> 1808         24    3  362 #> 1809         23    4  362 #> 1810        274    5  362 #> 1811          0    1  363 #> 1812          0    2  363 #> 1813         18    3  363 #> 1814         37    4  363 #> 1815         66    5  363 #> 1816          0    1  364 #> 1817          0    2  364 #> 1818          8    3  364 #> 1819         55    4  364 #> 1820          3    5  364 #> 1821          0    1  365 #> 1822          0    2  365 #> 1823         15    3  365 #> 1824         36    4  365 #> 1825         18    5  365 #> 1826          0    1  366 #> 1827          0    2  366 #> 1828         23    3  366 #> 1829         39    4  366 #> 1830         32    5  366 #> 1831          0    1  367 #> 1832          0    2  367 #> 1833         12    3  367 #> 1834         35    4  367 #> 1835          4    5  367 #> 1836          0    1  368 #> 1837          0    2  368 #> 1838         30    3  368 #> 1839         39    4  368 #> 1840         26    5  368 #> 1841          0    1  369 #> 1842          0    2  369 #> 1843         16    3  369 #> 1844         25    4  369 #> 1845          7    5  369 #> 1846          0    1  370 #> 1847          0    2  370 #> 1848          9    3  370 #> 1849         23    4  370 #> 1850         69    5  370 #> 1851          0    1  371 #> 1852          0    2  371 #> 1853         15    3  371 #> 1854         28    4  371 #> 1855          3    5  371 #> 1856          0    1  372 #> 1857          0    2  372 #> 1858         16    3  372 #> 1859         46    4  372 #> 1860         95    5  372 #> 1861          0    1  373 #> 1862          0    2  373 #> 1863         16    3  373 #> 1864         45    4  373 #> 1865          6    5  373 #> 1866          0    1  374 #> 1867          0    2  374 #> 1868         16    3  374 #> 1869         37    4  374 #> 1870         28    5  374 #> 1871          0    1  375 #> 1872          0    2  375 #> 1873         17    3  375 #> 1874         67    4  375 #> 1875        129    5  375 #> 1876          0    1  376 #> 1877          0    2  376 #> 1878         12    3  376 #> 1879         56    4  376 #> 1880         69    5  376 #> 1881          0    1  377 #> 1882          0    2  377 #> 1883         13    3  377 #> 1884         27    4  377 #> 1885          8    5  377 #> 1886          0    1  378 #> 1887          0    2  378 #> 1888         21    3  378 #> 1889         23    4  378 #> 1890          2    5  378 #> 1891          0    1  379 #> 1892          0    2  379 #> 1893         25    3  379 #> 1894         22    4  379 #> 1895         21    5  379 #> 1896          0    1  380 #> 1897          0    2  380 #> 1898         27    3  380 #> 1899         42    4  380 #> 1900        166    5  380 #> 1901          0    1  381 #> 1902          0    2  381 #> 1903         14    3  381 #> 1904         46    4  381 #> 1905         70    5  381 #> 1906          0    1  382 #> 1907          0    2  382 #> 1908         15    3  382 #> 1909         33    4  382 #> 1910         26    5  382 #> 1911          0    1  383 #> 1912          0    2  383 #> 1913         14    3  383 #> 1914         36    4  383 #> 1915          9    5  383 #> 1916          0    1  384 #> 1917          0    2  384 #> 1918         33    3  384 #> 1919         37    4  384 #> 1920          1    5  384 #> 1921          0    1  385 #> 1922          0    2  385 #> 1923          8    3  385 #> 1924         52    4  385 #> 1925         61    5  385 #> 1926          0    1  386 #> 1927          0    2  386 #> 1928         23    3  386 #> 1929         20    4  386 #> 1930         32    5  386 #> 1931          0    1  387 #> 1932          0    2  387 #> 1933         13    3  387 #> 1934         50    4  387 #> 1935         24    5  387 #> 1936          0    1  388 #> 1937          0    2  388 #> 1938         13    3  388 #> 1939         39    4  388 #> 1940        176    5  388 #> 1941          0    1  389 #> 1942          0    2  389 #> 1943         15    3  389 #> 1944         51    4  389 #> 1945        234    5  389 #> 1946          0    1  390 #> 1947          0    2  390 #> 1948         17    3  390 #> 1949         47    4  390 #> 1950         10    5  390 #> 1951          0    1  391 #> 1952          0    2  391 #> 1953         12    3  391 #> 1954         41    4  391 #> 1955         42    5  391 #> 1956          0    1  392 #> 1957          0    2  392 #> 1958         33    3  392 #> 1959         40    4  392 #> 1960         22    5  392 #> 1961          0    1  393 #> 1962          0    2  393 #> 1963          7    3  393 #> 1964         35    4  393 #> 1965         54    5  393 #> 1966          0    1  394 #> 1967          0    2  394 #> 1968         23    3  394 #> 1969         43    4  394 #> 1970         60    5  394 #> 1971          0    1  395 #> 1972          0    2  395 #> 1973         30    3  395 #> 1974         39    4  395 #> 1975         32    5  395 #> 1976          0    1  396 #> 1977          0    2  396 #> 1978         17    3  396 #> 1979         49    4  396 #> 1980         11    5  396 #> 1981          0    1  397 #> 1982          0    2  397 #> 1983         10    3  397 #> 1984         37    4  397 #> 1985          4    5  397 #> 1986          0    1  398 #> 1987          0    2  398 #> 1988         22    3  398 #> 1989         39    4  398 #> 1990         24    5  398 #> 1991          0    1  399 #> 1992          0    2  399 #> 1993         20    3  399 #> 1994         29    4  399 #> 1995         11    5  399 #> 1996          0    1  400 #> 1997          0    2  400 #> 1998         32    3  400 #> 1999         37    4  400 #> 2000         26    5  400 #> 2001          0    1  401 #> 2002          0    2  401 #> 2003          7    3  401 #> 2004         36    4  401 #> 2005         81    5  401 #> 2006          0    1  402 #> 2007          0    2  402 #> 2008         16    3  402 #> 2009         40    4  402 #> 2010         79    5  402 #> 2011          0    1  403 #> 2012          0    2  403 #> 2013         10    3  403 #> 2014         31    4  403 #> 2015         29    5  403 #> 2016          0    1  404 #> 2017          0    2  404 #> 2018         23    3  404 #> 2019         41    4  404 #> 2020         61    5  404 #> 2021          0    1  405 #> 2022          0    2  405 #> 2023         10    3  405 #> 2024         32    4  405 #> 2025          6    5  405 #> 2026          0    1  406 #> 2027          0    2  406 #> 2028         21    3  406 #> 2029         42    4  406 #> 2030         32    5  406 #> 2031          0    1  407 #> 2032          0    2  407 #> 2033         31    3  407 #> 2034         35    4  407 #> 2035         55    5  407 #> 2036          0    1  408 #> 2037          0    2  408 #> 2038         25    3  408 #> 2039         35    4  408 #> 2040         21    5  408 #> 2041          0    1  409 #> 2042          0    2  409 #> 2043          9    3  409 #> 2044         62    4  409 #> 2045         64    5  409 #> 2046          0    1  410 #> 2047          0    2  410 #> 2048         13    3  410 #> 2049         56    4  410 #> 2050         38    5  410 #> 2051          0    1  411 #> 2052          0    2  411 #> 2053         18    3  411 #> 2054         52    4  411 #> 2055          9    5  411 #> 2056          0    1  412 #> 2057          0    2  412 #> 2058         11    3  412 #> 2059         50    4  412 #> 2060          1    5  412 #> 2061          0    1  413 #> 2062          0    2  413 #> 2063         24    3  413 #> 2064         43    4  413 #> 2065         75    5  413 #> 2066          0    1  414 #> 2067          0    2  414 #> 2068         32    3  414 #> 2069         21    4  414 #> 2070         72    5  414 #> 2071          0    1  415 #> 2072          0    2  415 #> 2073         17    3  415 #> 2074         41    4  415 #> 2075         77    5  415 #> 2076          0    1  416 #> 2077          0    2  416 #> 2078         10    3  416 #> 2079         41    4  416 #> 2080          0    5  416 #> 2081          0    1  417 #> 2082          0    2  417 #> 2083         11    3  417 #> 2084         34    4  417 #> 2085          5    5  417 #> 2086          0    1  418 #> 2087          0    2  418 #> 2088         11    3  418 #> 2089         33    4  418 #> 2090        101    5  418 #> 2091          0    1  419 #> 2092          0    2  419 #> 2093         15    3  419 #> 2094         23    4  419 #> 2095          1    5  419 #> 2096          0    1  420 #> 2097          0    2  420 #> 2098         11    3  420 #> 2099         46    4  420 #> 2100        192    5  420 #> 2101          0    1  421 #> 2102          0    2  421 #> 2103         21    3  421 #> 2104         41    4  421 #> 2105         68    5  421 #> 2106          0    1  422 #> 2107          0    2  422 #> 2108         42    3  422 #> 2109         24    4  422 #> 2110         34    5  422 #> 2111          0    1  423 #> 2112          0    2  423 #> 2113         10    3  423 #> 2114         29    4  423 #> 2115        154    5  423 #> 2116          0    1  424 #> 2117          0    2  424 #> 2118         24    3  424 #> 2119         49    4  424 #> 2120         25    5  424 #> 2121          0    1  425 #> 2122          0    2  425 #> 2123         16    3  425 #> 2124         26    4  425 #> 2125         86    5  425 #> 2126          0    1  426 #> 2127          0    2  426 #> 2128         18    3  426 #> 2129         43    4  426 #> 2130         26    5  426 #> 2131          0    1  427 #> 2132          0    2  427 #> 2133          7    3  427 #> 2134         46    4  427 #> 2135         64    5  427 #> 2136          0    1  428 #> 2137          0    2  428 #> 2138         19    3  428 #> 2139         53    4  428 #> 2140          1    5  428 #> 2141          0    1  429 #> 2142          0    2  429 #> 2143         19    3  429 #> 2144         28    4  429 #> 2145        118    5  429 #> 2146          0    1  430 #> 2147          0    2  430 #> 2148          6    3  430 #> 2149         48    4  430 #> 2150         56    5  430 #> 2151          0    1  431 #> 2152          0    2  431 #> 2153         13    3  431 #> 2154         46    4  431 #> 2155         15    5  431 #> 2156          0    1  432 #> 2157          0    2  432 #> 2158         21    3  432 #> 2159         30    4  432 #> 2160        304    5  432 #> 2161          0    1  433 #> 2162          0    2  433 #> 2163         24    3  433 #> 2164         32    4  433 #> 2165        108    5  433 #> 2166          0    1  434 #> 2167          0    2  434 #> 2168         13    3  434 #> 2169         44    4  434 #> 2170         25    5  434 #> 2171          0    1  435 #> 2172          0    2  435 #> 2173         11    3  435 #> 2174         53    4  435 #> 2175        145    5  435 #> 2176          0    1  436 #> 2177          0    2  436 #> 2178         33    3  436 #> 2179         41    4  436 #> 2180         33    5  436 #> 2181          0    1  437 #> 2182          0    2  437 #> 2183         27    3  437 #> 2184         47    4  437 #> 2185        100    5  437 #> 2186          0    1  438 #> 2187          0    2  438 #> 2188         12    3  438 #> 2189         38    4  438 #> 2190         25    5  438 #> 2191          0    1  439 #> 2192          0    2  439 #> 2193         18    3  439 #> 2194         39    4  439 #> 2195         98    5  439 #> 2196          0    1  440 #> 2197          0    2  440 #> 2198         22    3  440 #> 2199         27    4  440 #> 2200        236    5  440 #> 2201          0    1  441 #> 2202          0    2  441 #> 2203         12    3  441 #> 2204         20    4  441 #> 2205         34    5  441 #> 2206          0    1  442 #> 2207          0    2  442 #> 2208         10    3  442 #> 2209         20    4  442 #> 2210          8    5  442 #> 2211          0    1  443 #> 2212          0    2  443 #> 2213         22    3  443 #> 2214         24    4  443 #> 2215         80    5  443 #> 2216          0    1  444 #> 2217          0    2  444 #> 2218         15    3  444 #> 2219         27    4  444 #> 2220         25    5  444 #> 2221          0    1  445 #> 2222          0    2  445 #> 2223         31    3  445 #> 2224         29    4  445 #> 2225          8    5  445 #> 2226          0    1  446 #> 2227          0    2  446 #> 2228         14    3  446 #> 2229         66    4  446 #> 2230         78    5  446 #> 2231          0    1  447 #> 2232          0    2  447 #> 2233         22    3  447 #> 2234         48    4  447 #> 2235         60    5  447 #> 2236          0    1  448 #> 2237          0    2  448 #> 2238          9    3  448 #> 2239         39    4  448 #> 2240         61    5  448 #> 2241          0    1  449 #> 2242          0    2  449 #> 2243         11    3  449 #> 2244         39    4  449 #> 2245        107    5  449 #> 2246          0    1  450 #> 2247          0    2  450 #> 2248         16    3  450 #> 2249         55    4  450 #> 2250         96    5  450 #> 2251          0    1  451 #> 2252          0    2  451 #> 2253         21    3  451 #> 2254         45    4  451 #> 2255        286    5  451 #> 2256          0    1  452 #> 2257          0    2  452 #> 2258          6    3  452 #> 2259         37    4  452 #> 2260         30    5  452 #> 2261          0    1  453 #> 2262          0    2  453 #> 2263         18    3  453 #> 2264         50    4  453 #> 2265         14    5  453 #> 2266          0    1  454 #> 2267          0    2  454 #> 2268         20    3  454 #> 2269         80    4  454 #> 2270          2    5  454 #> 2271          0    1  455 #> 2272          0    2  455 #> 2273         19    3  455 #> 2274         63    4  455 #> 2275         48    5  455 #> 2276          0    1  456 #> 2277          0    2  456 #> 2278          7    3  456 #> 2279         54    4  456 #> 2280          2    5  456 #> 2281          0    1  457 #> 2282          0    2  457 #> 2283         16    3  457 #> 2284         43    4  457 #> 2285         14    5  457 #> 2286          0    1  458 #> 2287          0    2  458 #> 2288         15    3  458 #> 2289         39    4  458 #> 2290          1    5  458 #> 2291          0    1  459 #> 2292          0    2  459 #> 2293         24    3  459 #> 2294         42    4  459 #> 2295        391    5  459 #> 2296          0    1  460 #> 2297          0    2  460 #> 2298         14    3  460 #> 2299         60    4  460 #> 2300         87    5  460 #> 2301          0    1  461 #> 2302          0    2  461 #> 2303         22    3  461 #> 2304         32    4  461 #> 2305          4    5  461 #> 2306          0    1  462 #> 2307          0    2  462 #> 2308         11    3  462 #> 2309         38    4  462 #> 2310         25    5  462 #> 2311          0    1  463 #> 2312          0    2  463 #> 2313         11    3  463 #> 2314         38    4  463 #> 2315          0    5  463 #> 2316          0    1  464 #> 2317          0    2  464 #> 2318         12    3  464 #> 2319         35    4  464 #> 2320         28    5  464 #> 2321          0    1  465 #> 2322          0    2  465 #> 2323         23    3  465 #> 2324         68    4  465 #> 2325         17    5  465 #> 2326          0    1  466 #> 2327          0    2  466 #> 2328         16    3  466 #> 2329         37    4  466 #> 2330         48    5  466 #> 2331          0    1  467 #> 2332          0    2  467 #> 2333         20    3  467 #> 2334         34    4  467 #> 2335          2    5  467 #> 2336          0    1  468 #> 2337          0    2  468 #> 2338         18    3  468 #> 2339         51    4  468 #> 2340          7    5  468 #> 2341          0    1  469 #> 2342          0    2  469 #> 2343         29    3  469 #> 2344         43    4  469 #> 2345         10    5  469 #> 2346          0    1  470 #> 2347          0    2  470 #> 2348         19    3  470 #> 2349         60    4  470 #> 2350          0    5  470 #> 2351          0    1  471 #> 2352          0    2  471 #> 2353         15    3  471 #> 2354         20    4  471 #> 2355         70    5  471 #> 2356          0    1  472 #> 2357          0    2  472 #> 2358         10    3  472 #> 2359         69    4  472 #> 2360          2    5  472 #> 2361          0    1  473 #> 2362          0    2  473 #> 2363         22    3  473 #> 2364         55    4  473 #> 2365         27    5  473 #> 2366          0    1  474 #> 2367          0    2  474 #> 2368         20    3  474 #> 2369         41    4  474 #> 2370        134    5  474 #> 2371          0    1  475 #> 2372          0    2  475 #> 2373          8    3  475 #> 2374         43    4  475 #> 2375          4    5  475 #> 2376          0    1  476 #> 2377          0    2  476 #> 2378         10    3  476 #> 2379          7    4  476 #> 2380          6    5  476 #> 2381          0    1  477 #> 2382          0    2  477 #> 2383         29    3  477 #> 2384         56    4  477 #> 2385          4    5  477 #> 2386          0    1  478 #> 2387          0    2  478 #> 2388         15    3  478 #> 2389         44    4  478 #> 2390         70    5  478 #> 2391          0    1  479 #> 2392          0    2  479 #> 2393         14    3  479 #> 2394         71    4  479 #> 2395         88    5  479 #> 2396          0    1  480 #> 2397          0    2  480 #> 2398         11    3  480 #> 2399         40    4  480 #> 2400         12    5  480 #> 2401          0    1  481 #> 2402          0    2  481 #> 2403         12    3  481 #> 2404         48    4  481 #> 2405        220    5  481 #> 2406          0    1  482 #> 2407          0    2  482 #> 2408         12    3  482 #> 2409         21    4  482 #> 2410         19    5  482 #> 2411          0    1  483 #> 2412          0    2  483 #> 2413          8    3  483 #> 2414         32    4  483 #> 2415          1    5  483 #> 2416          0    1  484 #> 2417          0    2  484 #> 2418         23    3  484 #> 2419         50    4  484 #> 2420         49    5  484 #> 2421          0    1  485 #> 2422          0    2  485 #> 2423         17    3  485 #> 2424         47    4  485 #> 2425        117    5  485 #> 2426          0    1  486 #> 2427          0    2  486 #> 2428         13    3  486 #> 2429         37    4  486 #> 2430        192    5  486 #> 2431          0    1  487 #> 2432          0    2  487 #> 2433         25    3  487 #> 2434         51    4  487 #> 2435         88    5  487 #> 2436          0    1  488 #> 2437          0    2  488 #> 2438         16    3  488 #> 2439         31    4  488 #> 2440        232    5  488 #> 2441          0    1  489 #> 2442          0    2  489 #> 2443         30    3  489 #> 2444         74    4  489 #> 2445          8    5  489 #> 2446          0    1  490 #> 2447          0    2  490 #> 2448         13    3  490 #> 2449         58    4  490 #> 2450         83    5  490 #> 2451          0    1  491 #> 2452          0    2  491 #> 2453         28    3  491 #> 2454         57    4  491 #> 2455         15    5  491 #> 2456          0    1  492 #> 2457          0    2  492 #> 2458          4    3  492 #> 2459         51    4  492 #> 2460        159    5  492 #> 2461          0    1  493 #> 2462          0    2  493 #> 2463          9    3  493 #> 2464         51    4  493 #> 2465         21    5  493 #> 2466          0    1  494 #> 2467          0    2  494 #> 2468         13    3  494 #> 2469         20    4  494 #> 2470        152    5  494 #> 2471          0    1  495 #> 2472          0    2  495 #> 2473         12    3  495 #> 2474         51    4  495 #> 2475         38    5  495 #> 2476          0    1  496 #> 2477          0    2  496 #> 2478         16    3  496 #> 2479         49    4  496 #> 2480        135    5  496 #> 2481          0    1  497 #> 2482          0    2  497 #> 2483         22    3  497 #> 2484         54    4  497 #> 2485          6    5  497 #> 2486          0    1  498 #> 2487          0    2  498 #> 2488         31    3  498 #> 2489         41    4  498 #> 2490         71    5  498 #> 2491          0    1  499 #> 2492          0    2  499 #> 2493          6    3  499 #> 2494         26    4  499 #> 2495        506    5  499 #> 2496          0    1  500 #> 2497          0    2  500 #> 2498          8    3  500 #> 2499         24    4  500 #> 2500          2    5  500"},{"path":"https://baselinenowcast.epinowcast.org/reference/truncate_triangle.html","id":null,"dir":"Reference","previous_headings":"","what":"Get a single truncated triangle — truncate_triangle","title":"Get a single truncated triangle — truncate_triangle","text":"function takes integer t reporting triangle generates truncated reporting triangle, remove last t observations.","code":""},{"path":"https://baselinenowcast.epinowcast.org/reference/truncate_triangle.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get a single truncated triangle — truncate_triangle","text":"","code":"truncate_triangle(t, reporting_triangle)"},{"path":"https://baselinenowcast.epinowcast.org/reference/truncate_triangle.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get a single truncated triangle — truncate_triangle","text":"t Integer indicating number timepoints truncate bottom original reporting triangle. reporting_triangle Matrix reporting triangle, rows representing time points reference columns representing delays. Can reporting matrix incomplete reporting matrix. Can also ragged reporting triangle, multiple columns reported row. (e.g. weekly reporting daily data).","code":""},{"path":"https://baselinenowcast.epinowcast.org/reference/truncate_triangle.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get a single truncated triangle — truncate_triangle","text":"trunc_rep_tri Matrix t fewer rows reporting_triangle.","code":""},{"path":"https://baselinenowcast.epinowcast.org/reference/truncate_triangle.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get a single truncated triangle — truncate_triangle","text":"","code":"# example code triangle <- matrix(   c(     65, 46, 21, 7,     70, 40, 20, 5,     80, 50, 10, 10,     100, 40, 31, 20,     95, 45, 21, NA,     82, 42, NA, NA,     70, NA, NA, NA   ),   nrow = 7,   byrow = TRUE )  trunc_rep_tri <- truncate_triangle(t = 1, reporting_triangle = triangle) trunc_rep_tri #>      [,1] [,2] [,3] [,4] #> [1,]   65   46   21    7 #> [2,]   70   40   20    5 #> [3,]   80   50   10   10 #> [4,]  100   40   31   20 #> [5,]   95   45   21   NA #> [6,]   82   42   NA   NA"},{"path":"https://baselinenowcast.epinowcast.org/reference/truncate_triangles.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate truncated reporting triangles — truncate_triangles","title":"Generate truncated reporting triangles — truncate_triangles","text":"function ingests reporting triangle/matrix number truncated reporting triangles want create, n, iteratively truncates reporting triangle, working latest reference time (bottom) older reference times (top) n snapshots.","code":""},{"path":"https://baselinenowcast.epinowcast.org/reference/truncate_triangles.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate truncated reporting triangles — truncate_triangles","text":"","code":"truncate_triangles(   reporting_triangle,   n = nrow(reporting_triangle) - ncol(reporting_triangle) - 1 )"},{"path":"https://baselinenowcast.epinowcast.org/reference/truncate_triangles.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate truncated reporting triangles — truncate_triangles","text":"reporting_triangle Matrix reporting triangle, rows representing time points reference columns representing delays. Can reporting matrix incomplete reporting matrix. Can also ragged reporting triangle, multiple columns reported row. (e.g. weekly reporting daily data). n Integer indicating number retrospective truncated triangles generated, always starting recent reference time. Default generate truncated matrices triangles sufficient number rows generate nowcast .","code":""},{"path":"https://baselinenowcast.epinowcast.org/reference/truncate_triangles.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate truncated reporting triangles — truncate_triangles","text":"trunc_rep_tri_list List n truncated reporting triangle matrices many rows available given truncation, number columns reporting_triangle.","code":""},{"path":"https://baselinenowcast.epinowcast.org/reference/truncate_triangles.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate truncated reporting triangles — truncate_triangles","text":"","code":"triangle <- matrix(   c(     65, 46, 21, 7,     70, 40, 20, 5,     80, 50, 10, 10,     100, 40, 31, 20,     95, 45, 21, NA,     82, 42, NA, NA,     70, NA, NA, NA   ),   nrow = 7,   byrow = TRUE )  truncated_rts <- truncate_triangles(triangle, n = 2) truncated_rts[1:2] #> [[1]] #>      [,1] [,2] [,3] [,4] #> [1,]   65   46   21    7 #> [2,]   70   40   20    5 #> [3,]   80   50   10   10 #> [4,]  100   40   31   20 #> [5,]   95   45   21   NA #> [6,]   82   42   NA   NA #>  #> [[2]] #>      [,1] [,2] [,3] [,4] #> [1,]   65   46   21    7 #> [2,]   70   40   20    5 #> [3,]   80   50   10   10 #> [4,]  100   40   31   20 #> [5,]   95   45   21   NA #>"},{"path":"https://baselinenowcast.epinowcast.org/news/index.html","id":"baselinenowcast-0001000","dir":"Changelog","previous_headings":"","what":"baselinenowcast 0.0.0.1000","title":"baselinenowcast 0.0.0.1000","text":"Replace function names action-oriented function naming. Add new logo. Add check ensure sufficient non-zero values reporting triangle. Add check ensure sufficient n specified delay estimate. Change requirement number rows used delay estimation need greater equal number columns, instead least one row contains full set observations. Bug fix change requirement sum elements structure vector must greater number columns. Add support passing restricted set functions estimate_dispersion() function transform “target” dataset across reference dates. Implements safe iterator step retrospective point nowcasts generated list retrospective reporting triangles, ensuring iterations continue even retrospective point nowcasts can generated. Modify vignette consistent decided upon defaults number reference times used delay estimation uncertainty. Replace function named replace_lower_right_with_NA() generate_triangle(). Removes requirement elements reporting triangle integers. Modify method used estimate dispersion. Instead estimating dispersion individual elements nowcast matrix, now estimate dispersion predicted nowcasts summed across reporting dates function forecast horizon. Standardises naming objects matrices vs vectors objects contain observations, point estimates, probabilistic draws. Modifies functions estimate delay generate point nowcast ensure throw error/warning first element delay PMF 0. Adjusts function estimate delay distribution able handle complete partially complete reporting triangles. Add function convert list expected observed reporting squares long tidy dataframe indexed reference time, delay, sample index. Implement zero-handling bottom left reporting triangle applying delay generate point nowcast. Add function generate list expected observed reporting squares. Add function generate expected observed reporting square point nowcast vector dispersion parameters. Add function estimate dispersion parameters match list nowcasts observed reporting triangles. Add functions generate retrospective nowcasts single reporting triangle. Refactor uncertainty estimation use user-facing function generate retrospective reporting triangles. Methods write-separate vignette. Introduced function estimate uncertainty triangle nowcasted delay distribution. Introduced functions get delay estimate apply delay, used Getting Started vignette. Added package skeleton.","code":""}]
