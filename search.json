[{"path":"https://baselinenowcast.epinowcast.org/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2025 baselinenowcast authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://baselinenowcast.epinowcast.org/articles/baselinenowcast.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Getting Started with baselinenowcast","text":"Incomplete reporting epidemiological data recent times can result case count data right-truncated. Right-truncated case counts can misleading interpret face-value, typically show decline number reported observations recent time points. time points highest proportion data yet observed dataset. imputation cases eventually observed current time referred nowcast. number methods developed nowcast epidemiological case count data. purpose baselinenowcast provide nowcast computed directly recent observations estimate delay distribution empirically, apply partially observed data generate nowcast. section, describe example nowcasting problem, demonstrate use baselinenowcast estimate delay distribution data apply estimate generate probabilistic nowcast.","code":""},{"path":"https://baselinenowcast.epinowcast.org/articles/baselinenowcast.html","id":"packages","dir":"Articles","previous_headings":"","what":"Packages","title":"Getting Started with baselinenowcast","text":"well baselinenowcast package vignette also uses epinowcast, ggplot2, dplyr. installation epinowcast required using package, however, pre post-processing functions provide lot data wrangling needed set nowcasting problem. note components vignette require installing CmdStan, downstream dependency epinowcast. just using R components epinowcast, can installed using example lines code , need additionally install CmdStan.","code":"# Installing epinowcast # install.packages( #nolint #  \"epinowcast\", repos = \"https://epinowcast.r-universe.dev\" #nolint # ) #nolint # Load packages library(baselinenowcast) library(epinowcast) library(ggplot2) library(dplyr) library(lubridate) library(tidyr) # Set seed for reproducibility set.seed(123)"},{"path":"https://baselinenowcast.epinowcast.org/articles/baselinenowcast.html","id":"data","dir":"Articles","previous_headings":"","what":"Data","title":"Getting Started with baselinenowcast","text":"Nowcasting right-truncated case counts involves estimation reporting delays recently reported data. , need case counts indexed diagnosed (often called “reference date”) reported (.e. administratively recorded via public health surveillance; often called “report date”). difference reference date report date reporting delay. quick start, use daily level data Robert Koch Institute via Germany Nowcasting hub. data represent hospital admission counts date positive test date test report Germany October 1, 2021.","code":""},{"path":"https://baselinenowcast.epinowcast.org/articles/baselinenowcast.html","id":"filtering-and-plotting-the-data","dir":"Articles","previous_headings":"","what":"Filtering and plotting the data","title":"Getting Started with baselinenowcast","text":"filter data just look national-level data, age groups. pretend making nowcast July 1, 2021, therefore exclude reference dates report dates date. germany_covid19_hosp provided package data epinowcast Let’s start plotting sum reports reference date, compare eventually observe final date complete dataset. red line shows cumulative number confirmed admissions report date, across delays, using data available July 1, 2021. demonstrates characteristic behaviour right-truncation. yet observed data become available longer delays recent time points. task estimate “final” cumulative number cases reference date, observed “fully observed” data October 2021.  black line represents quantity evaluate nowcast , final observed cases, red line represents observed cases observed July 1st, 2021.","code":"data_long <- germany_covid19_hosp # import data from epinowcast data_filtered <- data_long |>   enw_filter_report_dates(latest_date = \"2021-07-01\") |>   filter(     location == \"DE\", age_group == \"00+\",     report_date == \"2021-07-01\"   ) data_filtered_max <- data_long |>   filter(     location == \"DE\", age_group == \"00+\",     reference_date <= \"2021-07-01\"   ) |>   group_by(reference_date) |>   summarise(confirm = max(confirm)) ggplot() +   geom_line(     data = data_filtered,     aes(x = reference_date, y = confirm), color = \"darkred\"   ) +   geom_line(     data = data_filtered_max,     aes(x = reference_date, y = confirm), color = \"black\"   ) +   theme_bw() +   xlab(\"Reference date\") +   ylab(\"Confirmed admissions\") +   scale_y_continuous(trans = \"log10\") +   ggtitle(\"Comparing real-time and later observed cases\")"},{"path":"https://baselinenowcast.epinowcast.org/articles/baselinenowcast.html","id":"pre-processing","dir":"Articles","previous_headings":"","what":"Pre-processing","title":"Getting Started with baselinenowcast","text":"order compute nowcast data, need start creating call reporting triangle. matrix row represents one time points referenced column represents delay, starting 0 maximum delay. entries represent number new cases assigned reference time point particular delay, entries bottom right triangle missing data reported longer delays yet observed recent reference times. reporting triangle used estimate delay distribution, proportion final number cases reported particular delay. Since data reported referenced daily, use time scale days create reporting triangle, delay reference date can temporal granularity. example, fit delay distribution, apply generate nowcast matrix using data, national level data Germany age groups. However, components can separated, example, use national level data age groups estimate delay distribution, apply elsewhere, example data stratified age group location. type “borrowing” another training dataset can really useful low counts relatively sparse data, likely case smaller populations. sections, specify nowcast date, maximum delay, number reference time observations want use estimate delay distribution. recommend choosing maximum delay number historical observations based exploratory data analysis, specifications change significantly depending dataset. Next use epinowcast function, enw_preprocess_data() data form long tidy dataframe indexed reference date report date filtered strata interested , generate reporting triangle. see looks like, can plot using ggplot(). figure, grey indicates matrix elements NA, expect case bottom right portion reporting triangle counts yet observed.","code":"nowcast_date <- \"2021-07-01\"  # Specify the maximum delay, which will determine the length of your delay # distribution. Empirical data outside this delay window will not be used for # training. max_delay <- 40  # Specify the number of reference times to use to estimate the delay # distribution. Note this assumes you want the most recent observations. n_history_delay <- 60 # Noting that this is the only way epinowcast preprocessing would work -- # return to this later. IDate was throwing errors if we used the dplyr processed # observed long above. observed_long <- data_long[location == \"DE\"][age_group == \"00+\"] |> # nolint   enw_filter_report_dates(latest_date = nowcast_date) |>   enw_filter_reference_dates(include_days = n_history_delay - 1) head(observed_long) ##    reference_date location age_group confirm report_date ##            <IDat>   <fctr>    <fctr>   <int>      <IDat> ## 1:     2021-05-03       DE       00+     107  2021-05-03 ## 2:     2021-05-04       DE       00+     240  2021-05-04 ## 3:     2021-05-05       DE       00+     245  2021-05-05 ## 4:     2021-05-06       DE       00+     259  2021-05-06 ## 5:     2021-05-07       DE       00+     263  2021-05-07 ## 6:     2021-05-08       DE       00+     189  2021-05-08 # Get the reporting triangle, adding an additional day because epinowcast # we want the max_delay + 1 entries since 0 is a valid delay. pobs <- enw_preprocess_data(   obs = observed_long,   max_delay = max_delay + 1 )  # as we only have one group here we only need reference_date, delay, # and new_confirm reporting_triangle_df <- select(   pobs$new_confirm[[1]],   reference_date,   delay,   new_confirm )  # we now pivot to wide format, dropping the reference_date column, and # convert to a matrix # this is the format that baselinenowcast expects reporting_triangle <- reporting_triangle_df |>   pivot_wider(names_from = delay, values_from = new_confirm) |>   select(-reference_date) |>   as.matrix()  tail(reporting_triangle, n = 20) ##        0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 ## [41,] 29 21  2 10  9  6  1  1  1  0  5  2  2  0  4  1  1  1  1  2 NA NA NA NA ## [42,] 14  7 16  4  0  1  3  0  0  3  2  1  1  1  0  0  2  0  0 NA NA NA NA NA ## [43,] 12 12  7  0  2  6  1  1  1  1  1  0  0  0  0  0  0  0 NA NA NA NA NA NA ## [44,] 41 28 10  6  0  0  0  2  1  1  3  0  3  0  0  1  0 NA NA NA NA NA NA NA ## [45,] 34 18  8  9  1  2  4  5  3  0  1  1  2  2  1  0 NA NA NA NA NA NA NA NA ## [46,] 36 16  4  6  2  7  5  0  1  2  1  0  3  2  1 NA NA NA NA NA NA NA NA NA ## [47,] 23  9  4  3  7  6  2  4  4  2  1  1  5  1 NA NA NA NA NA NA NA NA NA NA ## [48,] 26  7  3  4  3  3  2  3  2  0  0  0  1 NA NA NA NA NA NA NA NA NA NA NA ## [49,] 16  7  7  2  1  1  3  0  0  2  1  2 NA NA NA NA NA NA NA NA NA NA NA NA ## [50,]  4 11  5  1  0  2  0  0  0  0  0 NA NA NA NA NA NA NA NA NA NA NA NA NA ## [51,] 24 18  4  5  2  1  0  0  2  2 NA NA NA NA NA NA NA NA NA NA NA NA NA NA ## [52,] 32 15 11  2  0  1  2  0  2 NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA ## [53,] 34 17  4  1  0  0  0  1 NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA ## [54,] 21 13  2  0  5  2  1 NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA ## [55,] 16  4  3  5  3  0 NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA ## [56,]  5  6  5  1  3 NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA ## [57,]  3  5  2  1 NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA ## [58,] 20 11  4 NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA ## [59,] 20 17 NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA ## [60,] 20 NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA ##       24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 ## [41,] NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA ## [42,] NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA ## [43,] NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA ## [44,] NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA ## [45,] NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA ## [46,] NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA ## [47,] NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA ## [48,] NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA ## [49,] NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA ## [50,] NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA ## [51,] NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA ## [52,] NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA ## [53,] NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA ## [54,] NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA ## [55,] NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA ## [56,] NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA ## [57,] NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA ## [58,] NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA ## [59,] NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA ## [60,] NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA triangle_df <- as.data.frame(reporting_triangle) |>   mutate(time = row_number()) |>   pivot_longer(!time,     values_to = \"count\",     names_prefix = \"V\",     names_to = \"delay\"   ) |>   mutate(delay = as.numeric(delay))  ggplot(   triangle_df,   aes(x = delay, y = time, fill = count) ) +   geom_tile() +   scale_fill_gradient(low = \"white\", high = \"blue\") +   labs(title = \"Reporting triangle\", x = \"Delay\", y = \"Time\") +   theme_bw() +   scale_y_reverse()"},{"path":"https://baselinenowcast.epinowcast.org/articles/baselinenowcast.html","id":"estimate-delay","dir":"Articles","previous_headings":"","what":"Estimate delay","title":"Getting Started with baselinenowcast","text":"Now reporting triangle, now ready pass baselinenowcast package estimate delay distribution. tell function maximum delay number observations want use, though default use whole reporting triangle. reporting triangle small user-specified delays number training observations, function throw error. want pass reporting triangle (single group!) function. reference date repeated reporting triangle contains multiple strata, function throw error. get_delay_estimate() function expects following inputs: - reporting_triangle: matrix reporting triangle single strata. rows represent time points columns represent observed delays, starting 0. can also reporting matrix incomplete reporting matrix (elements bottom right triangle need missing). - max_delay: integer indicating maximum delay estimate. must less equal number rows triangle minus 1, since assume triangle indexed 0. - n_history_delay: integer indicating number observations reference date use fit delay distribution. must less equal number rows triangle.","code":"delay_pmf <- get_delay_estimate(   reporting_triangle = reporting_triangle,   max_delay = max_delay,   n = n_history_delay )  delay_df <- data.frame(   delay = 0:(length(delay_pmf) - 1),   pmf = delay_pmf )  ggplot(delay_df) +   geom_line(aes(x = delay, y = cumsum(pmf))) +   xlab(\"Delay\") +   ylab(\"Cumulative proportion reported\") +   ggtitle(\"Empirical point estimate of cumulative proportion reported by delay\") + # nolint   theme_bw() ggplot(delay_df) +   geom_line(aes(x = delay, y = pmf)) +   xlab(\"Delay\") +   ylab(\"Proportion reported\") +   ggtitle(\"Empirical point estimate of proportion reported by delay\") +   theme_bw()"},{"path":"https://baselinenowcast.epinowcast.org/articles/baselinenowcast.html","id":"apply-delay-to-generate-point-nowcast","dir":"Articles","previous_headings":"","what":"Apply delay to generate point nowcast","title":"Getting Started with baselinenowcast","text":"next step workflow take estimated delay distribution apply partially observed reporting triangle, generating estimate number new cases confirmed reference date delay. generate point estimate can call reporting square, complete set reference dates delays. case, applying delay reporting triangle used generate estimate, doesn’t always case. reporting triangle applying must max_delay delay estimate. ’ll make quick plot compare nowcasted confirmed cases July 1, 2021, observations October 1, 2021. ’ll compare right-truncated data available July 1, 2021.  can see point nowcast slightly overestimates eventually reported (black line), decent overall job correcting right-truncation observed red line (data prior nowcast).","code":"point_nowcast_matrix <- apply_delay(   rep_tri_to_nowcast = reporting_triangle,   delay_pmf = delay_pmf ) final_data <- data_long[location == \"DE\"][age_group == \"00+\"] |> # nolint   enw_filter_report_dates(latest_date = \"2021-10-01\") |>   enw_filter_reference_dates(     latest_date = \"2021-07-01\",     include_days = n_history_delay - 1   ) |>   group_by(reference_date) |>   summarise(     total_confirmed = max(confirm)   ) |>   mutate(nowcast = rowSums(point_nowcast_matrix)) summary_data <- observed_long |>   group_by(reference_date) |>   summarise(total_confirmed = max(confirm)) ggplot() +   geom_line(     # Plot the data summed across reporting days as of July 1,2021     data = summary_data,     aes(x = reference_date, y = total_confirmed), color = \"darkred\"   ) +   geom_line(     data = final_data,     aes(x = reference_date, y = total_confirmed), color = \"black\"   ) +   geom_line(     data = final_data,     aes(x = reference_date, y = nowcast), color = \"darkblue\"   ) +   theme_bw() +   xlab(\"Reference date\") +   ylab(\"Confirmed admissions\") +   scale_y_continuous(trans = \"log10\") +   ggtitle(\"Comparing real-time, nowcasted, and later observed cases\")"},{"path":"https://baselinenowcast.epinowcast.org/articles/baselinenowcast.html","id":"estimate-uncertainty","dir":"Articles","previous_headings":"","what":"Estimate uncertainty","title":"Getting Started with baselinenowcast","text":"far, ’ve demonstrated generate point estimate nowcast. like generate probabilistic nowcasts. , use error observations nowcasted retrospectively. assume observations follow negative binomial observation model, independently estimate dispersion negative binomial delay \\(d\\). method used estimate uncertainty nowcast simulates exactly iterative process, generating retrospective reporting triangles using available time, reporting triangle, estimating delay distribution generating nowcast. , first generate truncated reporting matrices latest reporting triangle, generate retrospective reporting triangles removing observations wouldn’t observed latest time point, lastly generate nowcasts list retrospective reporting triangles. function default assuming want generate many retrospective reporting triangles able generate nowcasts . case, function return 18 retrospective reporting triangles, smallest one containing 42 rows, needed generate nowcast reporting triangle 41 delay columns. generate_triangles() function returns list reporting triangles, order least recent, starting recent. filtered exclude rows may ultimately used generate nowcast, means triangle different number rows. Next pass list reporting triangles generate_pt_nowcast_mat_list(). function, can also specify n, number reference times used estimate delay nowcast. Next, use list retrospective reporting triangles estimate uncertainty horizon, starting horizon 0.","code":"trunc_rep_mat_list <- truncate_triangles(reporting_triangle) retro_rep_tri_list <- generate_triangles(trunc_rep_mat_list) retro_pt_nowcast_mat_list <- generate_pt_nowcast_mat_list(   reporting_triangle_list = retro_rep_tri_list ) disp_params <- estimate_dispersion(   pt_nowcast_mat_list = retro_pt_nowcast_mat_list,   trunc_rep_mat_list = trunc_rep_mat_list )"},{"path":"https://baselinenowcast.epinowcast.org/articles/baselinenowcast.html","id":"generate-probabilistic-nowcast","dir":"Articles","previous_headings":"","what":"Generate probabilistic nowcast","title":"Getting Started with baselinenowcast","text":"Now estimated dispersion, take point nowcast matrix previously generated, point_nowcast_matrix, extract components predicted, aggregate across delays, apply uncertainty point estimate final count reference time. generate long tidy dataframe containing draws predicted counts well sum predicted draws plus observations, becomes probabilistic final count estimate. ’ll first extract point nowcast matrix values predicted. next take point estimates prediction matrix generate probabilistic draws predicted nowcast vectors. store draws dataframe indexed reference time draw. final step join predictions reference date data available final reference date. plot probabilistic nowcast vectors (grey) compared final observed data (black) data available nowcast time (red).","code":"pt_nowcast_pred_matrix <- extract_predictions(   pt_nowcast_mat = point_nowcast_matrix,   rep_mat = reporting_triangle ) nowcast_draws_df <- get_nowcast_pred_draws(   point_nowcast_pred_matrix = pt_nowcast_pred_matrix,   disp = disp_params ) # Join with the original data final_data <- data_long[location == \"DE\"][age_group == \"00+\"] |> # nolint   enw_filter_report_dates(latest_date = \"2021-10-01\") |>   enw_filter_reference_dates(     latest_date = \"2021-07-01\",     include_days = n_history_delay - 1   ) |>   group_by(reference_date) |>   summarise(     final_confirmed = max(confirm)   ) original_data <- observed_long |>   group_by(reference_date) |>   summarise(original_confirmed = max(confirm)) time_df <- data.frame(   reference_date =     seq(       from = min(original_data$reference_date),       to = max(original_data$reference_date),       by = \"day\"     ) ) |> mutate(time = row_number()) sampled_draws <- sample.int(max(nowcast_draws_df$draw), 1000) summary_nowcast_w_data <- nowcast_draws_df |>   left_join(time_df,     by = \"time\"   ) |>   left_join(original_data, by = \"reference_date\") |>   left_join(final_data, by = \"reference_date\") |>   # Filter to a set of draws for plotting + zoom in on nowcast period   filter(     draw %in% sampled_draws,     reference_date >= max(ymd(reference_date)) - days(max_delay)   ) |>   mutate(     total_count = pred_count + original_confirmed   )    ggplot(summary_nowcast_w_data) +   geom_line(aes(x = reference_date, y = total_count, group = draw),     alpha = 0.2, color = \"gray\", linewidth = 0.2   ) +   geom_line(aes(x = reference_date, y = original_confirmed),     color = \"darkred\"   ) +   geom_line(aes(x = reference_date, y = final_confirmed),     color = \"black\"   ) +   theme_bw() +   xlab(\"Reference date\") +   ylab(\"Hospital admissions\") +   ggtitle(\"Comparison of admissions as of the nowcast date, later observed counts, \\n and probabilistic nowcasted counts\") # nolint"},{"path":"https://baselinenowcast.epinowcast.org/articles/model_definition.html","id":"overview","dir":"Articles","previous_headings":"","what":"Overview","title":"Mathematical methods for `baselinenowcast`","text":"baselinenowcast model, initially developed reference COVID-19 hospital admissions nowcasting challenge Germany (2021-2022, Wolffram et al, utilises reporting triangles preliminary case counts delays. applies multiplicative approach, using empirically observed historical delay distributions estimate yet---observed cases. Users can specify whether delay distributions estimated latest data, fully observed past data, data different strata. model produces point estimates nowcasts “filling ” reporting triangle. Probabilistic nowcasts generated using negative binomial model means point nowcast dispersion parameters estimated past nowcast errors. dispersion parameters can also flexibly sourced current data, historical data, alternative settings.","code":""},{"path":"https://baselinenowcast.epinowcast.org/articles/model_definition.html","id":"notation","dir":"Articles","previous_headings":"1 Overview","what":"Notation","title":"Mathematical methods for `baselinenowcast`","text":"denote \\(X_{t,d}, d = 0, .., D\\) number cases occurring time \\(t\\) appear dataset delay \\(d\\). example, delay \\(d = 0\\) means case occurring day \\(t\\) arrived dataset day \\(t\\), considered first possible report date practice. consider cases reporting within maximum delay \\(D\\). number cases reporting time \\(t\\) delay \\(d\\) can written : \\[X_{t, \\le d} = \\sum_{=0}^d X_{t,} \\] \\(X_t = X_{t, \\le D}\\) “final” number reported cases time \\(t\\). Conversely, \\(d < D\\) \\[X_{t,>d} = \\sum_{= d+1} ^{D} X_{t,}\\] number cases still missing \\(d\\) delay. refer \\(X_t\\) describe random variable, \\(x_t\\) corresponding observation, \\(\\hat{x}_t\\) estimated/imputed value. matrix \\(x_{t,d}\\) available given time \\(t^*\\) referred reporting matrix. case \\(t+d>t^*\\) yet observed (e.g. \\(t^*\\) current time), reporting matrix referred reporting triangle, values bottom right corner triangle missing, except first entry \\(x_{t=t*, d = 0}\\). Throughout document package, refer matrices, well corresponding vectors, using following table. table, “point” refers point estimate. indicated, referring probabilistic draw observation model. example, refer matrix imputed point estimates \\(t+d>t^*\\) point nowcast matrix, matrix complete set observations elements reporting matrix, matrix predictions point prediction matrix. use following abbreviations shorten names code:","code":""},{"path":[]},{"path":"https://baselinenowcast.epinowcast.org/articles/model_definition.html","id":"estimate-of-the-delay-distribution-from-a-reporting-matrix","dir":"Articles","previous_headings":"2 Point estimate of the delay distribution","what":"Estimate of the delay distribution from a reporting matrix","title":"Mathematical methods for `baselinenowcast`","text":"can use reporting matrix compute empirical estimate delay distribution, \\(\\pi(d)\\). empirical delay distribution, \\(\\pi(d)\\) can computed directly reporting matrix \\(X\\) \\[ \\pi(d)= \\frac{\\sum_{t=1}^{t=t^*} X_{t,d}}{\\sum_{d=0}^{D} \\sum_{t=1}^{t=t^*} X_{t,d}} \\] numerator sum observations across reference times \\(t\\) particular delay \\(d\\), denominator sum across reference times \\(t\\) delays \\(d\\).","code":""},{"path":"https://baselinenowcast.epinowcast.org/articles/model_definition.html","id":"estimate-of-the-delay-distribution-from-a-reporting-triangle","dir":"Articles","previous_headings":"2 Point estimate of the delay distribution","what":"Estimate of the delay distribution from a reporting triangle","title":"Mathematical methods for `baselinenowcast`","text":"case missing values bottom right (.e. reporting triangle), need use multiplicative model generate point nowcast matrix containing mixture observed imputed values. can compute delay distribution described reporting matrix case. multiplicative model works iteratively “filling ” reporting triangle starting bottom left, moving column column left right bottom right triangle filled .  method requires least one observation, delay \\(d=0\\) recent reference time, located bottom left reporting triangle Figure ?? . method assumes values delay \\(d\\) recent times, \\(t\\), consist proportion values previously reported earlier times \\(t\\). fill missing values column \\(d\\), sum rectangle completely observed reference dates \\(d-1\\) columns (block top left) sum column completely observed reference dates entries column \\(d\\) (block left). ratio two sums assumed missing entries column \\(d\\), use entries observed \\(d-1\\) incomplete reference date (block bottom left), scale ratio get missing entries column \\(d\\). process repeated delay \\(d\\) maximum delay \\(D\\). iteration additional reference time entry computed delay \\(d\\) increases. delay distribution estimated filled reporting matrix, using algorithm described case complete reporting square. get_delay_estimate() function ingests either reporting matrix, incomplete reporting matrix, reporting triangle uses last n rows compute empirical delay probability mass function (returning simplex vector indexed starting delay 0).","code":"#nolint start #| echo = FALSE, #| fig.cap = 'Visual description of the iterative “completing” of the reporting triangle, moving from left to right and bottom to top. In this cases, we are imputing $x_{t=6, d = 2}$ and $x_{t=5, d= 2}$ assuming that the ratio between $x_{t=1:4, d = 2}$ (block top), and $x_{t=1:4, d=0:1}$ (block top left) holds for for $x_{t=5:6, d = 2}$ (block bottom) and $x_{t=5:6, d = 0:1}$ (block bottom left). In this example, $\\\\hat{x}_{t=6, d = 1}$ has already been imputed using the same approach, and we treat it as known going forward. This process is repeated across the reporting triangle to estimate all values outlined in the dashed lines.' #nolint end knitr::include_graphics(file.path(\"..\", \"man\", \"figures\", \"schematic_fig.png\"))"},{"path":"https://baselinenowcast.epinowcast.org/articles/model_definition.html","id":"generation-of-a-point-nowcast-matrix-from-a-delay-distribution-and-a-reporting-triangle","dir":"Articles","previous_headings":"","what":"Generation of a point nowcast matrix from a delay distribution and a reporting triangle","title":"Mathematical methods for `baselinenowcast`","text":"“fill ” reporting triangle delay distribution, need estimate expected total number eventual observed cases \\(\\hat{x}_t\\), reference time \\(t\\). Let \\(z\\) sum delays \\(d\\) already observed (\\(t^*-t\\)), \\(z =\\sum_{d=1}^{d=t^*-t} x_{t,d}\\) \\(\\delta\\) cumulative sum delay distribution, \\(\\pi(d)\\) \\(d = t^*-t\\) \\(\\delta = \\sum_{d=1}^{d=t^*-t} \\pi(d)\\). assuming \\(z \\sim Bin(x_t, \\delta)\\) \\(x_t \\sim Unif(0, \\inf)\\), can shown expected value \\(x_t\\), total number reported cases reference time \\(t\\), can written : \\[ E(x_t | z, \\delta) = \\hat{x}_t = \\frac{z + 1 - \\delta}{\\delta} \\] can compute \\(\\hat{x}_{t,d}\\) directly using \\(d\\)th element \\(\\pi(d)\\) \\[ \\hat{x}_{t,d} = \\pi(d) \\times \\hat{x}_t \\] number reports timepoint \\(t\\) delay \\(d\\) product expected total reports, \\(\\hat{x}_t\\) proportion expected particular delay \\(d\\), \\(\\pi(d)\\). apply_delay() function ingests reporting triangle incomplete reporting matrix delay PMF returns point nowcast matrix.","code":""},{"path":"https://baselinenowcast.epinowcast.org/articles/model_definition.html","id":"estimate-of-dispersion","dir":"Articles","previous_headings":"","what":"Estimate of dispersion","title":"Mathematical methods for `baselinenowcast`","text":"estimate uncertainty nowcasts, use past nowcast errors assume negative binomial observation model.","code":""},{"path":"https://baselinenowcast.epinowcast.org/articles/model_definition.html","id":"generation-of-retrospective-reporting-triangles","dir":"Articles","previous_headings":"4 Estimate of dispersion","what":"Generation of retrospective reporting triangles","title":"Mathematical methods for `baselinenowcast`","text":"describe method generates retrospective reporting triangles replicate available time \\(t^*=s^*\\), \\(s^* = t^*-m\\) \\(m = 1, 2, ... M\\) generate \\(M\\) retrospective reporting triangles. generate set \\(M\\) reporting triangles, simply remove last \\(m\\) rows existing reporting triangle (reporting matrix), generate \\(M\\) truncated incomplete reporting matrices. can generated reporting triangle matrix function truncate_triangles() ingests single reporting triangle (matrix) returns list n truncated (potentially incomplete) reporting matrices containing observations missing values present. replace bottom right triangle matrix NAs, assuming observed \\(s^*\\), using function generate_triangles() returns list n retrospective reporting triangles. method uses retrospective reporting triangle re-estimate delay distribution using \\(N\\) preceding rows reporting triangle \\(s^*\\), recomputes retrospective nowcast, \\(M\\) realizations retrospective reporting triangle (\\(M\\) different \\(s^*\\) values).","code":""},{"path":"https://baselinenowcast.epinowcast.org/articles/model_definition.html","id":"generation-of-retrospective-point-nowcast-matrices","dir":"Articles","previous_headings":"4 Estimate of dispersion","what":"Generation of retrospective point nowcast matrices","title":"Mathematical methods for `baselinenowcast`","text":"\\(M\\) reporting triangles, apply method described estimate delay distribution reporting triangle generate point nowcast reporting triangle, generate \\(M\\) point nowcasts. function generate_point_nowcasts() ingests list reporting triangles, estimates delay distribution , generates list point nowcast matrices.","code":""},{"path":"https://baselinenowcast.epinowcast.org/articles/model_definition.html","id":"fit-predicted-point-nowcast-vectors-and-observed-counts-to-a-negative-binomial-observation-model-at-each-forecast-horizon","dir":"Articles","previous_headings":"4 Estimate of dispersion","what":"Fit predicted point nowcast vectors and observed counts to a negative binomial observation model at each forecast horizon","title":"Mathematical methods for `baselinenowcast`","text":"take list point nowcast matrices, list truncated incomplete reporting matrices (necessarily contains NAs bottom right, bottom right entirely partially observed). retrospective nowcast time \\(s^*\\), identify overlapping set matrix elements estimated matrix elements observed recent time point. choose quantify uncertainty level target quantity case assumed final count reference time, summed across reporting delays. estimate dispersion comparing predicted counts summed across delays observed counts summed across delays, conditioned counts observed time \\(t*\\). retrospective nowcast time \\(s^*\\), compute predicted corresponding observed nowcast forecast horizon \\(j = 1, ..., D\\) summing across reporting delays delays \\(d\\) observed time \\(t^*\\), indicated indicator function. define predicted nowcast forecast horizon \\(j\\) retrospective nowcast time \\(s^*\\) \\[ \\hat{X}_{t-j}(s^*) = \\sum_{d=0}^{D} \\hat{X}_{t-j,d}(s^*) \\times (t-j+d \\leq t^*) \\] likewise observed nowcast forecast horizon \\(j\\) retrospective nowcast time \\(s^*\\) \\[ X_{t-j}(s^*) = \\sum_{d=0}^{D} X_{t-j,d}(s^*) \\times (t-j+d \\leq t^*) \\] generates \\(M\\) pairs predicted nowcasts observed nowcasts forecast horizon \\(j = 1, ..., D\\). assume observed nowcasts \\(X_{t-j}\\) follow negative binomial observation model mean \\(\\hat{X}_{t-j}(t^*-j)\\) \\[ X_{t-j} | \\hat{X}_{t-j}(t^* - j) \\sim NegBin(\\mu = \\hat{X}_{t-j}(t^*-j) + 0.1, \\phi = \\phi_{t^*-t}) \\] \\(s^* = 1, ..., M\\). add small number (0.1) mean avoid ill-defined negative binomial. note perform computations, data snapshots least \\(N + M\\) past observations, rows original reporting triangle (matrix), needed. function estimate_dispersion() ingests list truncated reporting matrices representing observations, list point nowcast matrices, returns vector negative binomial dispersion parameters indexed starting forecast horizon \\(j = 1\\).","code":""},{"path":"https://baselinenowcast.epinowcast.org/articles/model_definition.html","id":"generate-probabilistic-nowcasts","dir":"Articles","previous_headings":"","what":"Generate probabilistic nowcasts","title":"Mathematical methods for `baselinenowcast`","text":"Using dispersion parameters forecast horizon, \\(\\phi(j),\\) \\(j = 1,...D\\), can generate probabilistic nowcast matrices drawing samples negative binomial: \\[ X_{t^*-j} \\sim NegBin(\\mu = \\hat{X}_{t^*-j}, \\phi = \\phi(j)) \\] can sample number draws, use draws compute desired quantiles summarize outputs. function get_nowcast_pred_draws() ingests point nowcast prediction matrix (containing predicted elements, observations reporting triangle), dispersion parameters, number draws sample generates dataframe predicted point nowcasts reference time. can join original data long form reference date reporting date order generate probabilistic nowcasts sum predicted total count draw observed count reference time final reference time.","code":""},{"path":"https://baselinenowcast.epinowcast.org/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Kaitlyn Johnson. Author, maintainer, copyright holder. Sam Abbott. Author. Johannes Bracher. Author. Sebastian Funk. Author.","code":""},{"path":"https://baselinenowcast.epinowcast.org/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Johnson K, Abbott S, Bracher J, Funk S (2025). baselinenowcast: Baseline nowcast. R package version 0.0.0.1000, https://baselinenowcast.epinowcast.org.","code":"@Manual{,   title = {baselinenowcast: Baseline nowcast},   author = {Kaitlyn Johnson and Sam Abbott and Johannes Bracher and Sebastian Funk},   year = {2025},   note = {R package version 0.0.0.1000},   url = {https://baselinenowcast.epinowcast.org}, }"},{"path":[]},{"path":"https://baselinenowcast.epinowcast.org/index.html","id":"summary","dir":"","previous_headings":"","what":"Summary","title":"Baseline nowcast for right-truncated epidemiological data","text":"Provides functions nowcasting right-truncated epidemiological data, based heavily method implemented https://github.com/KITmetricslab/RESPINOW-Hub/tree/main/code/baseline.","code":""},{"path":"https://baselinenowcast.epinowcast.org/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Baseline nowcast for right-truncated epidemiological data","text":"install development version GitHub (warning! version may contain breaking changes /bugs), use pak package:","code":"pak::pak(file.path(\"epinowcast\", \"baselinenowcast\"))"},{"path":"https://baselinenowcast.epinowcast.org/index.html","id":"resources","dir":"","previous_headings":"","what":"Resources","title":"Baseline nowcast for right-truncated epidemiological data","text":"provide range documentation, case studies, community spaces ask (answer!) questions: organisation website includes links resources, guest posts, seminar schedule upcoming past recordings. community forum areas question answer considering new methods tools, among others. generally interested real-time analysis infectious disease, may find useful even use baselinenowcast.","code":""},{"path":"https://baselinenowcast.epinowcast.org/index.html","id":"contributing","dir":"","previous_headings":"","what":"Contributing","title":"Baseline nowcast for right-truncated epidemiological data","text":"welcome contributions new contributors! particularly appreciate help identifying identified issues. Please check add issues, /add pull request see contributing guide information.","code":""},{"path":"https://baselinenowcast.epinowcast.org/index.html","id":"how-to-make-a-bug-report-or-feature-request","dir":"","previous_headings":"Contributing","what":"How to make a bug report or feature request","title":"Baseline nowcast for right-truncated epidemiological data","text":"Please briefly describe problem output expect issue. See contributing guide information.","code":""},{"path":"https://baselinenowcast.epinowcast.org/index.html","id":"code-of-conduct","dir":"","previous_headings":"Contributing","what":"Code of Conduct","title":"Baseline nowcast for right-truncated epidemiological data","text":"Please note baselinenowcast project released Contributor Code Conduct. contributing project, agree abide terms.","code":""},{"path":"https://baselinenowcast.epinowcast.org/index.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Baseline nowcast for right-truncated epidemiological data","text":"use baselinenowcast work, please consider citing citation(\"baselinenowcast\").","code":""},{"path":"https://baselinenowcast.epinowcast.org/index.html","id":"contributors","dir":"","previous_headings":"","what":"Contributors","title":"Baseline nowcast for right-truncated epidemiological data","text":"contributions project gratefully acknowledged using allcontributors package following allcontributors specification. Contributions kind welcome!","code":""},{"path":"https://baselinenowcast.epinowcast.org/index.html","id":"code","dir":"","previous_headings":"Contributors","what":"Code","title":"Baseline nowcast for right-truncated epidemiological data","text":"kaitejohnson, seabbs, sbfnk","code":""},{"path":"https://baselinenowcast.epinowcast.org/index.html","id":"issue-authors","dir":"","previous_headings":"Contributors","what":"Issue Authors","title":"Baseline nowcast for right-truncated epidemiological data","text":"jonathonmellor","code":""},{"path":"https://baselinenowcast.epinowcast.org/index.html","id":"issue-contributors","dir":"","previous_headings":"Contributors","what":"Issue Contributors","title":"Baseline nowcast for right-truncated epidemiological data","text":"jbracher, TimTaylor","code":""},{"path":"https://baselinenowcast.epinowcast.org/reference/apply_delay.html","id":null,"dir":"Reference","previous_headings":"","what":"Apply the delay to generate a point nowcast — apply_delay","title":"Apply the delay to generate a point nowcast — apply_delay","text":"Generate point estimate completed reporting square (rectangle) reporting triangle want complete nowcast delay PMF. element computed taking product expected number total cases assigned reference time $t$ proportion cases reported delay $d$. formula obtain expected number total cases function reporting delay previous observations derived elsewhere. code adapted code written (MIT license) Karlsruhe Institute Technology RESPINOW German Hospitalization Nowcasting Hub. Modified : https://github.com/KITmetricslab/RESPINOW-Hub/blob/7cce3ae2728116e8c8cc0e4ab29074462c24650e/code/baseline/functions.R#L55 #nolint","code":""},{"path":"https://baselinenowcast.epinowcast.org/reference/apply_delay.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Apply the delay to generate a point nowcast — apply_delay","text":"","code":"apply_delay(rep_tri_to_nowcast, delay_pmf)"},{"path":"https://baselinenowcast.epinowcast.org/reference/apply_delay.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Apply the delay to generate a point nowcast — apply_delay","text":"rep_tri_to_nowcast Matrix reporting triangle nowcasted, rows representing time points reference columns representing delays delay_pmf Vector delays assumed indexed starting first delay column rep_mat_to_nowcast","code":""},{"path":"https://baselinenowcast.epinowcast.org/reference/apply_delay.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Apply the delay to generate a point nowcast — apply_delay","text":"point_nowcast_matrix Matrix number rows columns rep_mat_to_nowcast missing values filled point estimates","code":""},{"path":"https://baselinenowcast.epinowcast.org/reference/apply_delay.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Apply the delay to generate a point nowcast — apply_delay","text":"","code":"triangle <- matrix(   c(     80, 50, 25, 10,     100, 50, 30, 20,     90, 45, 25, NA,     80, 40, NA, NA,     70, NA, NA, NA   ),   nrow = 5,   byrow = TRUE ) delay_pmf <- get_delay_estimate(   reporting_triangle = triangle,   max_delay = 3,   n = 4 ) point_nowcast_matrix <- apply_delay(   rep_tri_to_nowcast = triangle,   delay_pmf = delay_pmf ) print(point_nowcast_matrix) #>      [,1]     [,2]     [,3]     [,4] #> [1,]   80 50.00000 25.00000 10.00000 #> [2,]  100 50.00000 30.00000 20.00000 #> [3,]   90 45.00000 25.00000 17.78889 #> [4,]   80 40.00000 23.20529 15.92281 #> [5,]   70 35.24853 20.35851 13.96745"},{"path":"https://baselinenowcast.epinowcast.org/reference/dot-calc_expectation.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate the updated rows of the expected nowcasted triangle — .calc_expectation","title":"Calculate the updated rows of the expected nowcasted triangle — .calc_expectation","text":"Calculate updated rows expected nowcasted triangle","code":""},{"path":"https://baselinenowcast.epinowcast.org/reference/dot-calc_expectation.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate the updated rows of the expected nowcasted triangle — .calc_expectation","text":"","code":".calc_expectation(delay_index, expectation, delay_prob, delay_cdf_prev, n_rows)"},{"path":"https://baselinenowcast.epinowcast.org/reference/dot-calc_expectation.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate the updated rows of the expected nowcasted triangle — .calc_expectation","text":"delay_index Integer indicating delay index expectation Matrix incomplete reporting matrix delay_prob Probability case reported current delay delay_cdf_prev CDF delay PMF previous delay n_rows Number rows expectation matrix","code":""},{"path":"https://baselinenowcast.epinowcast.org/reference/dot-calc_expectation.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate the updated rows of the expected nowcasted triangle — .calc_expectation","text":"Matrix another set entries corresponding updated values specified rows column","code":""},{"path":"https://baselinenowcast.epinowcast.org/reference/dot-check_na_bottom_right.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if matrix has valid NA pattern — .check_na_bottom_right","title":"Check if matrix has valid NA pattern — .check_na_bottom_right","text":"Check matrix valid NA pattern","code":""},{"path":"https://baselinenowcast.epinowcast.org/reference/dot-check_na_bottom_right.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if matrix has valid NA pattern — .check_na_bottom_right","text":"","code":".check_na_bottom_right(mat)"},{"path":"https://baselinenowcast.epinowcast.org/reference/dot-check_na_bottom_right.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if matrix has valid NA pattern — .check_na_bottom_right","text":"mat Matrix","code":""},{"path":"https://baselinenowcast.epinowcast.org/reference/dot-check_na_bottom_right.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check if matrix has valid NA pattern — .check_na_bottom_right","text":"Boolean indicating whether matrix contains NAs bottom right (TRUE bottom right, FALSE elsewhere).","code":""},{"path":"https://baselinenowcast.epinowcast.org/reference/dot-conditional_sum_cols.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute the sum of entries of a column in a matrix where both sets of matrices of booleans are TRUE — .conditional_sum_cols","title":"Compute the sum of entries of a column in a matrix where both sets of matrices of booleans are TRUE — .conditional_sum_cols","text":"Compute sum entries column matrix sets matrices booleans TRUE","code":""},{"path":"https://baselinenowcast.epinowcast.org/reference/dot-conditional_sum_cols.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute the sum of entries of a column in a matrix where both sets of matrices of booleans are TRUE — .conditional_sum_cols","text":"","code":".conditional_sum_cols(col, matrix_bool1, matrix_bool2, matrix_to_sum)"},{"path":"https://baselinenowcast.epinowcast.org/reference/dot-conditional_sum_cols.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute the sum of entries of a column in a matrix where both sets of matrices of booleans are TRUE — .conditional_sum_cols","text":"col Integer indicating column sum matrix_bool1 Matrix booleans first set indices matrix_bool2 Matrix booleans second set indices matrix_to_sum Matrix summed specific column","code":""},{"path":"https://baselinenowcast.epinowcast.org/reference/dot-conditional_sum_cols.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute the sum of entries of a column in a matrix where both sets of matrices of booleans are TRUE — .conditional_sum_cols","text":"Numeric summing values matrix_to_sum specified column entries true","code":""},{"path":"https://baselinenowcast.epinowcast.org/reference/dot-fit_nb.html","id":null,"dir":"Reference","previous_headings":"","what":"Fit a negative binomial to a vector of observations and expectations — .fit_nb","title":"Fit a negative binomial to a vector of observations and expectations — .fit_nb","text":"Takes vector observations vector expectations performs MLE estimator estimate dispersion parameter negative binomial. code adapted code written (MIT license) Karlsruhe Institute Technology RESPINOW German Hospitalization Nowcasting Hub. Modified : https://github.com/KITmetricslab/RESPINOW-Hub/blob/7fab4dce7b559c3076ab643cf22048cb5fb84cc2/code/baseline/functions.R#L404 #nolint","code":""},{"path":"https://baselinenowcast.epinowcast.org/reference/dot-fit_nb.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fit a negative binomial to a vector of observations and expectations — .fit_nb","text":"","code":".fit_nb(x, mu)"},{"path":"https://baselinenowcast.epinowcast.org/reference/dot-fit_nb.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fit a negative binomial to a vector of observations and expectations — .fit_nb","text":"x observed values mu expected values","code":""},{"path":"https://baselinenowcast.epinowcast.org/reference/dot-fit_nb.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fit a negative binomial to a vector of observations and expectations — .fit_nb","text":"maximum likelihood estimate dispersion","code":""},{"path":"https://baselinenowcast.epinowcast.org/reference/dot-handle_neg_vals.html","id":null,"dir":"Reference","previous_headings":"","what":"Handle negative values in the reporting triangle Takes in a reporting triangle and returns a matrix in the same format as the input triangle, but with negative values of reporting handled via passing them to the subsequent days (from longer delay to shorter). This code was adapted from code written (under an MIT license) by the Karlsruhe Institute of Technology RESPINOW German Hospitalization Nowcasting Hub. Modified from https://github.com/KITmetricslab/RESPINOW-Hub/blob/main/code/baseline/functions.R #nolint — .handle_neg_vals","title":"Handle negative values in the reporting triangle Takes in a reporting triangle and returns a matrix in the same format as the input triangle, but with negative values of reporting handled via passing them to the subsequent days (from longer delay to shorter). This code was adapted from code written (under an MIT license) by the Karlsruhe Institute of Technology RESPINOW German Hospitalization Nowcasting Hub. Modified from https://github.com/KITmetricslab/RESPINOW-Hub/blob/main/code/baseline/functions.R #nolint — .handle_neg_vals","text":"Handle negative values reporting triangle Takes reporting triangle returns matrix format input triangle, negative values reporting handled via passing subsequent days (longer delay shorter). code adapted code written (MIT license) Karlsruhe Institute Technology RESPINOW German Hospitalization Nowcasting Hub. Modified https://github.com/KITmetricslab/RESPINOW-Hub/blob/main/code/baseline/functions.R #nolint","code":""},{"path":"https://baselinenowcast.epinowcast.org/reference/dot-handle_neg_vals.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Handle negative values in the reporting triangle Takes in a reporting triangle and returns a matrix in the same format as the input triangle, but with negative values of reporting handled via passing them to the subsequent days (from longer delay to shorter). This code was adapted from code written (under an MIT license) by the Karlsruhe Institute of Technology RESPINOW German Hospitalization Nowcasting Hub. Modified from https://github.com/KITmetricslab/RESPINOW-Hub/blob/main/code/baseline/functions.R #nolint — .handle_neg_vals","text":"","code":".handle_neg_vals(triangle)"},{"path":"https://baselinenowcast.epinowcast.org/reference/dot-handle_neg_vals.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Handle negative values in the reporting triangle Takes in a reporting triangle and returns a matrix in the same format as the input triangle, but with negative values of reporting handled via passing them to the subsequent days (from longer delay to shorter). This code was adapted from code written (under an MIT license) by the Karlsruhe Institute of Technology RESPINOW German Hospitalization Nowcasting Hub. Modified from https://github.com/KITmetricslab/RESPINOW-Hub/blob/main/code/baseline/functions.R #nolint — .handle_neg_vals","text":"triangle Matrix reporting triangle, rows representing time points reference columns representing delays.","code":""},{"path":"https://baselinenowcast.epinowcast.org/reference/dot-handle_neg_vals.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Handle negative values in the reporting triangle Takes in a reporting triangle and returns a matrix in the same format as the input triangle, but with negative values of reporting handled via passing them to the subsequent days (from longer delay to shorter). This code was adapted from code written (under an MIT license) by the Karlsruhe Institute of Technology RESPINOW German Hospitalization Nowcasting Hub. Modified from https://github.com/KITmetricslab/RESPINOW-Hub/blob/main/code/baseline/functions.R #nolint — .handle_neg_vals","text":"Matrix positive integers negative values reporting handled via passing subsequent days delay.","code":""},{"path":"https://baselinenowcast.epinowcast.org/reference/dot-validate_delay_and_triangle.html","id":null,"dir":"Reference","previous_headings":"","what":"Validate triangle to nowcast and delay PMF together Various checks to make sure that the reporting triangle and the delay PMF passed in to apply_delay() are formatted properly and compatible. — .validate_delay_and_triangle","title":"Validate triangle to nowcast and delay PMF together Various checks to make sure that the reporting triangle and the delay PMF passed in to apply_delay() are formatted properly and compatible. — .validate_delay_and_triangle","text":"Validate triangle nowcast delay PMF together Various checks make sure reporting triangle  delay PMF passed apply_delay() formatted properly compatible.","code":""},{"path":"https://baselinenowcast.epinowcast.org/reference/dot-validate_delay_and_triangle.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Validate triangle to nowcast and delay PMF together Various checks to make sure that the reporting triangle and the delay PMF passed in to apply_delay() are formatted properly and compatible. — .validate_delay_and_triangle","text":"","code":".validate_delay_and_triangle(triangle, delay_pmf)"},{"path":"https://baselinenowcast.epinowcast.org/reference/dot-validate_delay_and_triangle.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Validate triangle to nowcast and delay PMF together Various checks to make sure that the reporting triangle and the delay PMF passed in to apply_delay() are formatted properly and compatible. — .validate_delay_and_triangle","text":"triangle Matrix values rows indicating time points columns indicating delays. delay_pmf Vector length number delays indicating probability case reported given delay.","code":""},{"path":"https://baselinenowcast.epinowcast.org/reference/dot-validate_delay_and_triangle.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Validate triangle to nowcast and delay PMF together Various checks to make sure that the reporting triangle and the delay PMF passed in to apply_delay() are formatted properly and compatible. — .validate_delay_and_triangle","text":"NULL, invisibly","code":""},{"path":"https://baselinenowcast.epinowcast.org/reference/dot-validate_triangle.html","id":null,"dir":"Reference","previous_headings":"","what":"Validate triangle Various checks to make sure that the reporting triangle passed in to get_delay_estimate() is formatted properly. — .validate_triangle","title":"Validate triangle Various checks to make sure that the reporting triangle passed in to get_delay_estimate() is formatted properly. — .validate_triangle","text":"Validate triangle Various checks make sure reporting triangle passed get_delay_estimate() formatted properly.","code":""},{"path":"https://baselinenowcast.epinowcast.org/reference/dot-validate_triangle.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Validate triangle Various checks to make sure that the reporting triangle passed in to get_delay_estimate() is formatted properly. — .validate_triangle","text":"","code":".validate_triangle(   triangle,   max_delay = ncol(triangle) - 1,   n = nrow(triangle) )"},{"path":"https://baselinenowcast.epinowcast.org/reference/dot-validate_triangle.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Validate triangle Various checks to make sure that the reporting triangle passed in to get_delay_estimate() is formatted properly. — .validate_triangle","text":"max_delay Integer indicating maximum delay estimate, units delay. default use whole reporting triangle, ncol(triangle) -1. n Integer indicating number reference times (observations) used estimate reporting delay, always starting recent reporting delay. default use whole reporting triangle, nrow(triangle).","code":""},{"path":"https://baselinenowcast.epinowcast.org/reference/dot-validate_triangle.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Validate triangle Various checks to make sure that the reporting triangle passed in to get_delay_estimate() is formatted properly. — .validate_triangle","text":"NULL, invisibly","code":""},{"path":"https://baselinenowcast.epinowcast.org/reference/estimate_dispersion.html","id":null,"dir":"Reference","previous_headings":"","what":"Estimate dispersion parameters — estimate_dispersion","title":"Estimate dispersion parameters — estimate_dispersion","text":"function ingests list point nowcast matrices corresponding list truncated reporting matrices uses estimate vector negative binomial dispersion parameters observations estimates horizon, starting 0 max delay number horizons.","code":""},{"path":"https://baselinenowcast.epinowcast.org/reference/estimate_dispersion.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Estimate dispersion parameters — estimate_dispersion","text":"","code":"estimate_dispersion(   pt_nowcast_mat_list,   trunc_rep_mat_list,   n = length(pt_nowcast_mat_list) )"},{"path":"https://baselinenowcast.epinowcast.org/reference/estimate_dispersion.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Estimate dispersion parameters — estimate_dispersion","text":"pt_nowcast_mat_list List point nowcast matrices rows represent reference time points columns represent delays. trunc_rep_mat_list List truncated reporting matrices, containing observations latest reference time. Elements list paired elements pt_nowcast_mat_list. n Integer indicating number reporting matrices use estimate dispersion parameters.","code":""},{"path":"https://baselinenowcast.epinowcast.org/reference/estimate_dispersion.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Estimate dispersion parameters — estimate_dispersion","text":"Vector length one less number columns latest reporting triangle, element representing estimate dispersion parameter delay d, starting delay d=1.","code":""},{"path":"https://baselinenowcast.epinowcast.org/reference/estimate_dispersion.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Estimate dispersion parameters — estimate_dispersion","text":"","code":"triangle <- matrix(   c(     65, 46, 21, 7,     70, 40, 20, 5,     80, 50, 10, 10,     100, 40, 31, 20,     95, 45, 21, NA,     82, 42, NA, NA,     70, NA, NA, NA   ),   nrow = 7,   byrow = TRUE )  trunc_rts <- truncate_triangles(triangle, n = 2) retro_rts <- generate_triangles(trunc_rts)  retro_nowcasts <- generate_pt_nowcast_mat_list(retro_rts, n = 5) disp_params <- estimate_dispersion(   pt_nowcast_mat_list = retro_nowcasts,   trunc_rep_mat_list = trunc_rts,   n = 2 ) disp_params #> [1] 999.999935   5.141440   3.181066"},{"path":"https://baselinenowcast.epinowcast.org/reference/extract_predictions.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract from one matrix only elements that are missing in another — extract_predictions","title":"Extract from one matrix only elements that are missing in another — extract_predictions","text":"Extract one matrix elements missing another","code":""},{"path":"https://baselinenowcast.epinowcast.org/reference/extract_predictions.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract from one matrix only elements that are missing in another — extract_predictions","text":"","code":"extract_predictions(pt_nowcast_mat, rep_mat)"},{"path":"https://baselinenowcast.epinowcast.org/reference/extract_predictions.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract from one matrix only elements that are missing in another — extract_predictions","text":"pt_nowcast_mat Matrix containing mix predicted observed values rep_mat Matrix containing observed elements reporting triangle","code":""},{"path":"https://baselinenowcast.epinowcast.org/reference/extract_predictions.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract from one matrix only elements that are missing in another — extract_predictions","text":"pred_mat Matrix containing elements pt_nowcast_mat elements missing obs_mat","code":""},{"path":"https://baselinenowcast.epinowcast.org/reference/extract_predictions.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract from one matrix only elements that are missing in another — extract_predictions","text":"","code":"pt_nowcast_mat <- matrix(   c(     1, 3, 5, 7,     4, 7, 8, 9,     9, 10, 3, 5,     3, 4, 8, 5   ),   nrow = 4,   byrow = TRUE )  reporting_matrix <- matrix(   c(     1, 3, 5, 7,     4, 7, 8, NA,     9, 10, NA, NA,     3, NA, NA, NA   ),   nrow = 4,   byrow = TRUE )  other_subset <- extract_predictions(pt_nowcast_mat, reporting_matrix) other_subset #>      [,1] [,2] [,3] [,4] #> [1,]   NA   NA   NA   NA #> [2,]   NA   NA   NA    9 #> [3,]   NA   NA    3    5 #> [4,]   NA    4    8    5"},{"path":"https://baselinenowcast.epinowcast.org/reference/generate_pt_nowcast_mat.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate point nowcast — generate_pt_nowcast_mat","title":"Generate point nowcast — generate_pt_nowcast_mat","text":"function ingests reporting triangle matrix optionally, delay distribution, returns completed reporting square represents point nowcast. delay distribution specified, used generate nowcast, otherwise, delay distribution estimated reporting_triangle.","code":""},{"path":"https://baselinenowcast.epinowcast.org/reference/generate_pt_nowcast_mat.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate point nowcast — generate_pt_nowcast_mat","text":"","code":"generate_pt_nowcast_mat(   reporting_triangle,   max_delay = ncol(reporting_triangle) - 1,   n = nrow(reporting_triangle),   delay_pmf = NULL )"},{"path":"https://baselinenowcast.epinowcast.org/reference/generate_pt_nowcast_mat.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate point nowcast — generate_pt_nowcast_mat","text":"reporting_triangle Matrix reporting triangle, rows representing time points reference columns representing delays. Can reporting matrix incomplete reporting matrix. Can also ragged reporting triangle, multiple columns reported row. (e.g. weekly reporting daily data). max_delay Integer indicating maximum delay estimate, units delay. default use whole reporting triangle, ncol(triangle) -1. n Integer indicating number reference times (observations) used estimate reporting delay, always starting recent reporting delay. default use whole reporting triangle, nrow(triangle). delay_pmf Vector delays assumed indexed starting first delay column triangle_to_nowcast.","code":""},{"path":"https://baselinenowcast.epinowcast.org/reference/generate_pt_nowcast_mat.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate point nowcast — generate_pt_nowcast_mat","text":"point_nowcast_matrix Matrix number rows columns reporting_triangle missing values filled point estimates.","code":""},{"path":"https://baselinenowcast.epinowcast.org/reference/generate_pt_nowcast_mat.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate point nowcast — generate_pt_nowcast_mat","text":"","code":"triangle <- matrix(   c(     80, 50, 25, 10,     100, 50, 30, 20,     90, 45, 25, NA,     80, 40, NA, NA,     70, NA, NA, NA   ),   nrow = 5,   byrow = TRUE ) point_nowcast_matrix <- generate_pt_nowcast_mat(   reporting_triangle = triangle ) point_nowcast_matrix #>      [,1]     [,2]     [,3]     [,4] #> [1,]   80 50.00000 25.00000 10.00000 #> [2,]  100 50.00000 30.00000 20.00000 #> [3,]   90 45.00000 25.00000 14.33572 #> [4,]   80 40.00000 23.17697 12.82918 #> [5,]   70 37.26249 20.72155 11.46862"},{"path":"https://baselinenowcast.epinowcast.org/reference/generate_pt_nowcast_mat_list.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate retrospective nowcasts — generate_pt_nowcast_mat_list","title":"Generate retrospective nowcasts — generate_pt_nowcast_mat_list","text":"function ingests list incomplete reporting triangles generates list reporting squares, \"complete\" point estimates reporting triangles based delay estimated triangle. uses specified n number observations estimate empirical delay retrospective reporting triangle.","code":""},{"path":"https://baselinenowcast.epinowcast.org/reference/generate_pt_nowcast_mat_list.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate retrospective nowcasts — generate_pt_nowcast_mat_list","text":"","code":"generate_pt_nowcast_mat_list(   reporting_triangle_list,   max_delay = min(sapply(reporting_triangle_list, ncol)) - 1,   n = min(sapply(reporting_triangle_list, nrow)) )"},{"path":"https://baselinenowcast.epinowcast.org/reference/generate_pt_nowcast_mat_list.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate retrospective nowcasts — generate_pt_nowcast_mat_list","text":"reporting_triangle_list List reporting triangle matrices, order recent (complete) least recent. Bottom right matrices contain NAs. max_delay Integer indicating maximum delay estimate, units delay. default use one less minimum number rows matrices list_of_rts. n Integer indicating number observations (number rows) use estimate delay distribution reporting triangle. Default minimum number rows matrices list_of_rts.","code":""},{"path":"https://baselinenowcast.epinowcast.org/reference/generate_pt_nowcast_mat_list.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate retrospective nowcasts — generate_pt_nowcast_mat_list","text":"pt_nowcast_matr_list List number elements input reporting_triangle_listbut reporting triangle filled based delay estimated reporting triangle.","code":""},{"path":"https://baselinenowcast.epinowcast.org/reference/generate_pt_nowcast_mat_list.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate retrospective nowcasts — generate_pt_nowcast_mat_list","text":"","code":"triangle <- matrix(   c(     65, 46, 21, 7,     70, 40, 20, 5,     80, 50, 10, 10,     100, 40, 31, 20,     95, 45, 21, NA,     82, 42, NA, NA,     70, NA, NA, NA   ),   nrow = 7,   byrow = TRUE )  trunc_rts <- truncate_triangles(triangle) retro_rts <- generate_triangles(trunc_rts) retro_pt_nowcast_mat_list <- generate_pt_nowcast_mat_list(retro_rts) retro_pt_nowcast_mat_list[1:3] #> [[1]] #>      [,1]     [,2]     [,3]      [,4] #> [1,]   65 46.00000 21.00000  7.000000 #> [2,]   70 40.00000 20.00000  5.000000 #> [3,]   80 50.00000 10.00000 10.000000 #> [4,]  100 40.00000 31.00000  9.502924 #> [5,]   95 45.00000 22.50317  9.030878 #> [6,]   82 41.82672 19.90693  7.988127 #>  #> [[2]] #>      [,1]     [,2]     [,3]     [,4] #> [1,]   65 46.00000 21.00000 7.000000 #> [2,]   70 40.00000 20.00000 5.000000 #> [3,]   80 50.00000 10.00000 6.414220 #> [4,]  100 40.00000 20.36587 7.347008 #> [5,]   95 53.33883 21.57749 7.784433 #>  #> [[3]] #> NULL #>"},{"path":"https://baselinenowcast.epinowcast.org/reference/generate_triangle.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate a single retrospective reporting triangle — generate_triangle","title":"Generate a single retrospective reporting triangle — generate_triangle","text":"function generates single reporting triangle removing bottom right observations truncated reporting triangle matrix. singular version generate_triangles().","code":""},{"path":"https://baselinenowcast.epinowcast.org/reference/generate_triangle.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate a single retrospective reporting triangle — generate_triangle","text":"","code":"generate_triangle(reporting_triangle, structure = 1)"},{"path":"https://baselinenowcast.epinowcast.org/reference/generate_triangle.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate a single retrospective reporting triangle — generate_triangle","text":"reporting_triangle single reporting triangle matrix. structure Integer vector specifying reporting structure. integer, divides columns evenly integer (last possibly truncated).  vector, must sum number columns. Default 1 (standard triangular structure).","code":""},{"path":"https://baselinenowcast.epinowcast.org/reference/generate_triangle.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate a single retrospective reporting triangle — generate_triangle","text":"single retrospective reporting triangle matrix NAs appropriate positions.","code":""},{"path":"https://baselinenowcast.epinowcast.org/reference/generate_triangle.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate a single retrospective reporting triangle — generate_triangle","text":"","code":"triangle <- matrix(   c(     65, 46, 21, 7,     70, 40, 20, 5,     80, 50, 10, 10,     100, 40, 31, 20,     95, 45, 21, NA,     82, 42, NA, NA,     70, NA, NA, NA   ),   nrow = 7,   byrow = TRUE )  retro_rt <- generate_triangle(triangle) retro_rt #>      [,1] [,2] [,3] [,4] #> [1,]   65   46   21    7 #> [2,]   70   40   20    5 #> [3,]   80   50   10   10 #> [4,]  100   40   31   20 #> [5,]   95   45   21   NA #> [6,]   82   42   NA   NA #> [7,]   70   NA   NA   NA"},{"path":"https://baselinenowcast.epinowcast.org/reference/generate_triangles.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate retrospective reporting triangles — generate_triangles","title":"Generate retrospective reporting triangles — generate_triangles","text":"function ingests list truncated reporting matrices iteratively generates reporting triangle available maximum reference time, working bottom top n snapshots.","code":""},{"path":"https://baselinenowcast.epinowcast.org/reference/generate_triangles.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate retrospective reporting triangles — generate_triangles","text":"","code":"generate_triangles(reporting_triangle_list, structure = 1)"},{"path":"https://baselinenowcast.epinowcast.org/reference/generate_triangles.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate retrospective reporting triangles — generate_triangles","text":"reporting_triangle_list List reporting triangle matrices. structure Integer vector specifying reporting structure. integer, divides columns evenly integer (last possibly truncated).  vector, must sum number columns. Default 1 (standard triangular structure).","code":""},{"path":"https://baselinenowcast.epinowcast.org/reference/generate_triangles.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate retrospective reporting triangles — generate_triangles","text":"rep_tri_mat_list List retrospective reporting triangles, generated removing bottom right observations truncated reporting triangle matrices.","code":""},{"path":"https://baselinenowcast.epinowcast.org/reference/generate_triangles.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate retrospective reporting triangles — generate_triangles","text":"","code":"triangle <- matrix(   c(     65, 46, 21, 7,     70, 40, 20, 5,     80, 50, 10, 10,     100, 40, 31, 20,     95, 45, 21, NA,     82, 42, NA, NA,     70, NA, NA, NA   ),   nrow = 7,   byrow = TRUE )  trunc_rts <- truncate_triangles(triangle, n = 2) retro_rts <- generate_triangles(trunc_rts)  # With custom structure retro_rts_custom <- generate_triangles(   retro_rts,   structure = 2 ) retro_rts_custom #> [[1]] #>      [,1] [,2] [,3] [,4] #> [1,]   65   46   21    7 #> [2,]   70   40   20    5 #> [3,]   80   50   10   10 #> [4,]  100   40   31   NA #> [5,]   95   45   NA   NA #> [6,]   82   NA   NA   NA #>  #> [[2]] #>      [,1] [,2] [,3] [,4] #> [1,]   65   46   21    7 #> [2,]   70   40   20    5 #> [3,]   80   50   10   NA #> [4,]  100   40   NA   NA #> [5,]   95   NA   NA   NA #>"},{"path":"https://baselinenowcast.epinowcast.org/reference/get_delay_estimate.html","id":null,"dir":"Reference","previous_headings":"","what":"Estimate a delay distribution from a reporting triangle Provides an estimate of the reporting delay as a function of the delay, based on the reporting triangle and the specified maximum delay and number of reference date observations to be used in the estimation. This point estimate of the delay is computed empirically, using an iterative algorithm starting from the most recent observations. This code was adapted from code written (under an MIT license) by the Karlsruhe Institute of Technology RESPINOW German Hospitalization Nowcasting Hub. Modified from: https://github.com/KITmetricslab/RESPINOW-Hub/blob/7cce3ae2728116e8c8cc0e4ab29074462c24650e/code/baseline/functions.R#L55 #nolint — get_delay_estimate","title":"Estimate a delay distribution from a reporting triangle Provides an estimate of the reporting delay as a function of the delay, based on the reporting triangle and the specified maximum delay and number of reference date observations to be used in the estimation. This point estimate of the delay is computed empirically, using an iterative algorithm starting from the most recent observations. This code was adapted from code written (under an MIT license) by the Karlsruhe Institute of Technology RESPINOW German Hospitalization Nowcasting Hub. Modified from: https://github.com/KITmetricslab/RESPINOW-Hub/blob/7cce3ae2728116e8c8cc0e4ab29074462c24650e/code/baseline/functions.R#L55 #nolint — get_delay_estimate","text":"Estimate delay distribution reporting triangle Provides estimate reporting delay function delay, based reporting triangle specified maximum delay number reference date observations used estimation. point estimate delay computed empirically, using iterative algorithm starting recent observations. code adapted code written (MIT license) Karlsruhe Institute Technology RESPINOW German Hospitalization Nowcasting Hub. Modified : https://github.com/KITmetricslab/RESPINOW-Hub/blob/7cce3ae2728116e8c8cc0e4ab29074462c24650e/code/baseline/functions.R#L55 #nolint","code":""},{"path":"https://baselinenowcast.epinowcast.org/reference/get_delay_estimate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Estimate a delay distribution from a reporting triangle Provides an estimate of the reporting delay as a function of the delay, based on the reporting triangle and the specified maximum delay and number of reference date observations to be used in the estimation. This point estimate of the delay is computed empirically, using an iterative algorithm starting from the most recent observations. This code was adapted from code written (under an MIT license) by the Karlsruhe Institute of Technology RESPINOW German Hospitalization Nowcasting Hub. Modified from: https://github.com/KITmetricslab/RESPINOW-Hub/blob/7cce3ae2728116e8c8cc0e4ab29074462c24650e/code/baseline/functions.R#L55 #nolint — get_delay_estimate","text":"","code":"get_delay_estimate(   reporting_triangle,   max_delay = ncol(reporting_triangle) - 1,   n = nrow(reporting_triangle) )"},{"path":"https://baselinenowcast.epinowcast.org/reference/get_delay_estimate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Estimate a delay distribution from a reporting triangle Provides an estimate of the reporting delay as a function of the delay, based on the reporting triangle and the specified maximum delay and number of reference date observations to be used in the estimation. This point estimate of the delay is computed empirically, using an iterative algorithm starting from the most recent observations. This code was adapted from code written (under an MIT license) by the Karlsruhe Institute of Technology RESPINOW German Hospitalization Nowcasting Hub. Modified from: https://github.com/KITmetricslab/RESPINOW-Hub/blob/7cce3ae2728116e8c8cc0e4ab29074462c24650e/code/baseline/functions.R#L55 #nolint — get_delay_estimate","text":"reporting_triangle Matrix reporting triangle, rows representing time points reference columns representing delays. Can reporting matrix incomplete reporting matrix. Can also ragged reporting triangle, multiple columns reported row. (e.g. weekly reporting daily data). max_delay Integer indicating maximum delay estimate, units delay. default use whole reporting triangle, ncol(triangle) -1. n Integer indicating number reference times (observations) used estimate reporting delay, always starting recent reporting delay. default use whole reporting triangle, nrow(triangle).","code":""},{"path":"https://baselinenowcast.epinowcast.org/reference/get_delay_estimate.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Estimate a delay distribution from a reporting triangle Provides an estimate of the reporting delay as a function of the delay, based on the reporting triangle and the specified maximum delay and number of reference date observations to be used in the estimation. This point estimate of the delay is computed empirically, using an iterative algorithm starting from the most recent observations. This code was adapted from code written (under an MIT license) by the Karlsruhe Institute of Technology RESPINOW German Hospitalization Nowcasting Hub. Modified from: https://github.com/KITmetricslab/RESPINOW-Hub/blob/7cce3ae2728116e8c8cc0e4ab29074462c24650e/code/baseline/functions.R#L55 #nolint — get_delay_estimate","text":"Vector indexed 0 length max_delay + 1 columns indicating point estimate empirical probability mass delay.","code":""},{"path":"https://baselinenowcast.epinowcast.org/reference/get_delay_estimate.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Estimate a delay distribution from a reporting triangle Provides an estimate of the reporting delay as a function of the delay, based on the reporting triangle and the specified maximum delay and number of reference date observations to be used in the estimation. This point estimate of the delay is computed empirically, using an iterative algorithm starting from the most recent observations. This code was adapted from code written (under an MIT license) by the Karlsruhe Institute of Technology RESPINOW German Hospitalization Nowcasting Hub. Modified from: https://github.com/KITmetricslab/RESPINOW-Hub/blob/7cce3ae2728116e8c8cc0e4ab29074462c24650e/code/baseline/functions.R#L55 #nolint — get_delay_estimate","text":"","code":"triangle <- matrix(   c(     80, 50, 25, 10,     100, 50, 30, 20,     90, 45, 25, NA,     80, 40, NA, NA,     70, NA, NA, NA   ),   nrow = 5,   byrow = TRUE ) delay_pmf <- get_delay_estimate(   reporting_triangle = triangle,   max_delay = 3,   n = 4 ) delay_pmf #> [1] 0.5029412 0.2514706 0.1455882 0.1000000"},{"path":"https://baselinenowcast.epinowcast.org/reference/get_nowcast_pred_draw.html","id":null,"dir":"Reference","previous_headings":"","what":"Get a draw of only the predicted elements of the nowcast vector — get_nowcast_pred_draw","title":"Get a draw of only the predicted elements of the nowcast vector — get_nowcast_pred_draw","text":"Get draw predicted elements nowcast vector","code":""},{"path":"https://baselinenowcast.epinowcast.org/reference/get_nowcast_pred_draw.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get a draw of only the predicted elements of the nowcast vector — get_nowcast_pred_draw","text":"","code":"get_nowcast_pred_draw(point_nowcast_pred_matrix, disp)"},{"path":"https://baselinenowcast.epinowcast.org/reference/get_nowcast_pred_draw.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get a draw of only the predicted elements of the nowcast vector — get_nowcast_pred_draw","text":"point_nowcast_pred_matrix Matrix containing elements yet observed final reference date. disp Vector dispersion parameters indexed horizon minus one maximum delay.","code":""},{"path":"https://baselinenowcast.epinowcast.org/reference/get_nowcast_pred_draw.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get a draw of only the predicted elements of the nowcast vector — get_nowcast_pred_draw","text":"Vector predicted draws reference time, reference times input point_nowcast_pred_matrix.","code":""},{"path":"https://baselinenowcast.epinowcast.org/reference/get_nowcast_pred_draw.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get a draw of only the predicted elements of the nowcast vector — get_nowcast_pred_draw","text":"","code":"point_nowcast_pred_matrix <-   matrix(     c(       NA, NA, NA, NA,       NA, NA, NA, NA,       NA, NA, NA, 16.8,       NA, NA, 21.2, 19.5,       NA, 34.5, 15.4, 9.1     ),     nrow = 4,     byrow = TRUE   ) disp <- c(0.8, 12.4, 9.1) nowcast_pred_draw <- get_nowcast_pred_draw(   point_nowcast_pred_matrix,   disp ) nowcast_pred_draw #> [1]  0  0 18 61"},{"path":"https://baselinenowcast.epinowcast.org/reference/get_nowcast_pred_draws.html","id":null,"dir":"Reference","previous_headings":"","what":"Get a dataframe of multiple draws of only the predicted elements of the nowcast vector — get_nowcast_pred_draws","title":"Get a dataframe of multiple draws of only the predicted elements of the nowcast vector — get_nowcast_pred_draws","text":"Get dataframe multiple draws predicted elements nowcast vector","code":""},{"path":"https://baselinenowcast.epinowcast.org/reference/get_nowcast_pred_draws.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get a dataframe of multiple draws of only the predicted elements of the nowcast vector — get_nowcast_pred_draws","text":"","code":"get_nowcast_pred_draws(point_nowcast_pred_matrix, disp, n_draws = 1000)"},{"path":"https://baselinenowcast.epinowcast.org/reference/get_nowcast_pred_draws.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get a dataframe of multiple draws of only the predicted elements of the nowcast vector — get_nowcast_pred_draws","text":"point_nowcast_pred_matrix Matrix containing elements yet observed final reference date. disp Vector dispersion parameters indexed horizon minus one maximum delay. n_draws Integer indicating number draws predicted nowcast vector generate. Default 1000.","code":""},{"path":"https://baselinenowcast.epinowcast.org/reference/get_nowcast_pred_draws.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get a dataframe of multiple draws of only the predicted elements of the nowcast vector — get_nowcast_pred_draws","text":"Dataframe containing predicted point nowcast vectors indexed reference time (pred_count), reference time (time), draw index (draw).","code":""},{"path":"https://baselinenowcast.epinowcast.org/reference/get_nowcast_pred_draws.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get a dataframe of multiple draws of only the predicted elements of the nowcast vector — get_nowcast_pred_draws","text":"","code":"point_nowcast_pred_matrix <-   matrix(     c(       NA, NA, NA, NA,       NA, NA, NA, NA,       NA, NA, NA, 16.8,       NA, NA, 21.2, 19.5,       NA, 34.5, 15.4, 9.1     ),     nrow = 4,     byrow = TRUE   ) disp <- c(0.8, 12.4, 9.1) nowcast_pred_draws_df <- get_nowcast_pred_draws(   point_nowcast_pred_matrix,   disp,   500 ) nowcast_pred_draws_df #>      pred_count time draw #> 1             0    1    1 #> 2             0    2    1 #> 3            36    3    1 #> 4            11    4    1 #> 5             0    1    2 #> 6             0    2    2 #> 7            26    3    2 #> 8             4    4    2 #> 9             0    1    3 #> 10            0    2    3 #> 11           36    3    3 #> 12           47    4    3 #> 13            0    1    4 #> 14            0    2    4 #> 15           28    3    4 #> 16           12    4    4 #> 17            0    1    5 #> 18            0    2    5 #> 19           31    3    5 #> 20           62    4    5 #> 21            0    1    6 #> 22            0    2    6 #> 23           10    3    6 #> 24          144    4    6 #> 25            0    1    7 #> 26            0    2    7 #> 27           37    3    7 #> 28           25    4    7 #> 29            0    1    8 #> 30            0    2    8 #> 31           25    3    8 #> 32          109    4    8 #> 33            0    1    9 #> 34            0    2    9 #> 35           36    3    9 #> 36           38    4    9 #> 37            0    1   10 #> 38            0    2   10 #> 39           44    3   10 #> 40           27    4   10 #> 41            0    1   11 #> 42            0    2   11 #> 43           33    3   11 #> 44          109    4   11 #> 45            0    1   12 #> 46            0    2   12 #> 47           28    3   12 #> 48          192    4   12 #> 49            0    1   13 #> 50            0    2   13 #> 51           42    3   13 #> 52           66    4   13 #> 53            0    1   14 #> 54            0    2   14 #> 55           69    3   14 #> 56          109    4   14 #> 57            0    1   15 #> 58            0    2   15 #> 59           60    3   15 #> 60           90    4   15 #> 61            0    1   16 #> 62            0    2   16 #> 63           48    3   16 #> 64          100    4   16 #> 65            0    1   17 #> 66            0    2   17 #> 67           25    3   17 #> 68          160    4   17 #> 69            0    1   18 #> 70            0    2   18 #> 71           52    3   18 #> 72           85    4   18 #> 73            0    1   19 #> 74            0    2   19 #> 75           36    3   19 #> 76          134    4   19 #> 77            0    1   20 #> 78            0    2   20 #> 79           45    3   20 #> 80           95    4   20 #> 81            0    1   21 #> 82            0    2   21 #> 83           41    3   21 #> 84           62    4   21 #> 85            0    1   22 #> 86            0    2   22 #> 87           24    3   22 #> 88           10    4   22 #> 89            0    1   23 #> 90            0    2   23 #> 91           26    3   23 #> 92          268    4   23 #> 93            0    1   24 #> 94            0    2   24 #> 95           31    3   24 #> 96           23    4   24 #> 97            0    1   25 #> 98            0    2   25 #> 99           48    3   25 #> 100           8    4   25 #> 101           0    1   26 #> 102           0    2   26 #> 103          29    3   26 #> 104           8    4   26 #> 105           0    1   27 #> 106           0    2   27 #> 107          34    3   27 #> 108          42    4   27 #> 109           0    1   28 #> 110           0    2   28 #> 111          32    3   28 #> 112         266    4   28 #> 113           0    1   29 #> 114           0    2   29 #> 115          10    3   29 #> 116          75    4   29 #> 117           0    1   30 #> 118           0    2   30 #> 119          55    3   30 #> 120          11    4   30 #> 121           0    1   31 #> 122           0    2   31 #> 123          34    3   31 #> 124          76    4   31 #> 125           0    1   32 #> 126           0    2   32 #> 127          29    3   32 #> 128         319    4   32 #> 129           0    1   33 #> 130           0    2   33 #> 131          37    3   33 #> 132          26    4   33 #> 133           0    1   34 #> 134           0    2   34 #> 135          40    3   34 #> 136         170    4   34 #> 137           0    1   35 #> 138           0    2   35 #> 139          40    3   35 #> 140          15    4   35 #> 141           0    1   36 #> 142           0    2   36 #> 143          30    3   36 #> 144          46    4   36 #> 145           0    1   37 #> 146           0    2   37 #> 147          24    3   37 #> 148          67    4   37 #> 149           0    1   38 #> 150           0    2   38 #> 151          32    3   38 #> 152           4    4   38 #> 153           0    1   39 #> 154           0    2   39 #> 155          29    3   39 #> 156          18    4   39 #> 157           0    1   40 #> 158           0    2   40 #> 159          37    3   40 #> 160           0    4   40 #> 161           0    1   41 #> 162           0    2   41 #> 163          30    3   41 #> 164          39    4   41 #> 165           0    1   42 #> 166           0    2   42 #> 167          24    3   42 #> 168           1    4   42 #> 169           0    1   43 #> 170           0    2   43 #> 171          66    3   43 #> 172         196    4   43 #> 173           0    1   44 #> 174           0    2   44 #> 175          34    3   44 #> 176          15    4   44 #> 177           0    1   45 #> 178           0    2   45 #> 179          19    3   45 #> 180          19    4   45 #> 181           0    1   46 #> 182           0    2   46 #> 183          33    3   46 #> 184           3    4   46 #> 185           0    1   47 #> 186           0    2   47 #> 187          19    3   47 #> 188           7    4   47 #> 189           0    1   48 #> 190           0    2   48 #> 191          27    3   48 #> 192          76    4   48 #> 193           0    1   49 #> 194           0    2   49 #> 195          43    3   49 #> 196          97    4   49 #> 197           0    1   50 #> 198           0    2   50 #> 199          38    3   50 #> 200         141    4   50 #> 201           0    1   51 #> 202           0    2   51 #> 203          51    3   51 #> 204           0    4   51 #> 205           0    1   52 #> 206           0    2   52 #> 207          26    3   52 #> 208         142    4   52 #> 209           0    1   53 #> 210           0    2   53 #> 211          28    3   53 #> 212         344    4   53 #> 213           0    1   54 #> 214           0    2   54 #> 215          47    3   54 #> 216         186    4   54 #> 217           0    1   55 #> 218           0    2   55 #> 219          39    3   55 #> 220           2    4   55 #> 221           0    1   56 #> 222           0    2   56 #> 223          41    3   56 #> 224          46    4   56 #> 225           0    1   57 #> 226           0    2   57 #> 227          24    3   57 #> 228         215    4   57 #> 229           0    1   58 #> 230           0    2   58 #> 231          50    3   58 #> 232          22    4   58 #> 233           0    1   59 #> 234           0    2   59 #> 235          51    3   59 #> 236          70    4   59 #> 237           0    1   60 #> 238           0    2   60 #> 239          45    3   60 #> 240          30    4   60 #> 241           0    1   61 #> 242           0    2   61 #> 243          34    3   61 #> 244           3    4   61 #> 245           0    1   62 #> 246           0    2   62 #> 247          46    3   62 #> 248          65    4   62 #> 249           0    1   63 #> 250           0    2   63 #> 251          42    3   63 #> 252         103    4   63 #> 253           0    1   64 #> 254           0    2   64 #> 255          64    3   64 #> 256          33    4   64 #> 257           0    1   65 #> 258           0    2   65 #> 259          41    3   65 #> 260         125    4   65 #> 261           0    1   66 #> 262           0    2   66 #> 263          24    3   66 #> 264          23    4   66 #> 265           0    1   67 #> 266           0    2   67 #> 267          38    3   67 #> 268          74    4   67 #> 269           0    1   68 #> 270           0    2   68 #> 271          30    3   68 #> 272          85    4   68 #> 273           0    1   69 #> 274           0    2   69 #> 275          22    3   69 #> 276           8    4   69 #> 277           0    1   70 #> 278           0    2   70 #> 279          42    3   70 #> 280          25    4   70 #> 281           0    1   71 #> 282           0    2   71 #> 283          26    3   71 #> 284          22    4   71 #> 285           0    1   72 #> 286           0    2   72 #> 287          50    3   72 #> 288         213    4   72 #> 289           0    1   73 #> 290           0    2   73 #> 291          25    3   73 #> 292          19    4   73 #> 293           0    1   74 #> 294           0    2   74 #> 295          32    3   74 #> 296          43    4   74 #> 297           0    1   75 #> 298           0    2   75 #> 299          59    3   75 #> 300          85    4   75 #> 301           0    1   76 #> 302           0    2   76 #> 303          45    3   76 #> 304         227    4   76 #> 305           0    1   77 #> 306           0    2   77 #> 307          38    3   77 #> 308          13    4   77 #> 309           0    1   78 #> 310           0    2   78 #> 311          37    3   78 #> 312          22    4   78 #> 313           0    1   79 #> 314           0    2   79 #> 315          28    3   79 #> 316          93    4   79 #> 317           0    1   80 #> 318           0    2   80 #> 319          58    3   80 #> 320          43    4   80 #> 321           0    1   81 #> 322           0    2   81 #> 323          35    3   81 #> 324           9    4   81 #> 325           0    1   82 #> 326           0    2   82 #> 327          29    3   82 #> 328         335    4   82 #> 329           0    1   83 #> 330           0    2   83 #> 331          41    3   83 #> 332          15    4   83 #> 333           0    1   84 #> 334           0    2   84 #> 335          36    3   84 #> 336          53    4   84 #> 337           0    1   85 #> 338           0    2   85 #> 339          26    3   85 #> 340          26    4   85 #> 341           0    1   86 #> 342           0    2   86 #> 343          54    3   86 #> 344          21    4   86 #> 345           0    1   87 #> 346           0    2   87 #> 347          55    3   87 #> 348           3    4   87 #> 349           0    1   88 #> 350           0    2   88 #> 351          35    3   88 #> 352         106    4   88 #> 353           0    1   89 #> 354           0    2   89 #> 355          35    3   89 #> 356         134    4   89 #> 357           0    1   90 #> 358           0    2   90 #> 359          39    3   90 #> 360          68    4   90 #> 361           0    1   91 #> 362           0    2   91 #> 363          25    3   91 #> 364          91    4   91 #> 365           0    1   92 #> 366           0    2   92 #> 367          40    3   92 #> 368          48    4   92 #> 369           0    1   93 #> 370           0    2   93 #> 371          28    3   93 #> 372          18    4   93 #> 373           0    1   94 #> 374           0    2   94 #> 375          51    3   94 #> 376         130    4   94 #> 377           0    1   95 #> 378           0    2   95 #> 379          31    3   95 #> 380         283    4   95 #> 381           0    1   96 #> 382           0    2   96 #> 383          49    3   96 #> 384          27    4   96 #> 385           0    1   97 #> 386           0    2   97 #> 387          34    3   97 #> 388           0    4   97 #> 389           0    1   98 #> 390           0    2   98 #> 391          30    3   98 #> 392         132    4   98 #> 393           0    1   99 #> 394           0    2   99 #> 395          42    3   99 #> 396         264    4   99 #> 397           0    1  100 #> 398           0    2  100 #> 399          35    3  100 #> 400         204    4  100 #> 401           0    1  101 #> 402           0    2  101 #> 403          47    3  101 #> 404          60    4  101 #> 405           0    1  102 #> 406           0    2  102 #> 407          38    3  102 #> 408           0    4  102 #> 409           0    1  103 #> 410           0    2  103 #> 411          35    3  103 #> 412          25    4  103 #> 413           0    1  104 #> 414           0    2  104 #> 415          30    3  104 #> 416         110    4  104 #> 417           0    1  105 #> 418           0    2  105 #> 419          51    3  105 #> 420          49    4  105 #> 421           0    1  106 #> 422           0    2  106 #> 423          49    3  106 #> 424         104    4  106 #> 425           0    1  107 #> 426           0    2  107 #> 427          51    3  107 #> 428          72    4  107 #> 429           0    1  108 #> 430           0    2  108 #> 431          31    3  108 #> 432           0    4  108 #> 433           0    1  109 #> 434           0    2  109 #> 435          21    3  109 #> 436           0    4  109 #> 437           0    1  110 #> 438           0    2  110 #> 439          26    3  110 #> 440          20    4  110 #> 441           0    1  111 #> 442           0    2  111 #> 443          56    3  111 #> 444           1    4  111 #> 445           0    1  112 #> 446           0    2  112 #> 447          29    3  112 #> 448         115    4  112 #> 449           0    1  113 #> 450           0    2  113 #> 451          25    3  113 #> 452          29    4  113 #> 453           0    1  114 #> 454           0    2  114 #> 455          37    3  114 #> 456         198    4  114 #> 457           0    1  115 #> 458           0    2  115 #> 459          26    3  115 #> 460          22    4  115 #> 461           0    1  116 #> 462           0    2  116 #> 463          44    3  116 #> 464         117    4  116 #> 465           0    1  117 #> 466           0    2  117 #> 467          34    3  117 #> 468         115    4  117 #> 469           0    1  118 #> 470           0    2  118 #> 471          44    3  118 #> 472          67    4  118 #> 473           0    1  119 #> 474           0    2  119 #> 475          24    3  119 #> 476          10    4  119 #> 477           0    1  120 #> 478           0    2  120 #> 479          23    3  120 #> 480          14    4  120 #> 481           0    1  121 #> 482           0    2  121 #> 483          40    3  121 #> 484           1    4  121 #> 485           0    1  122 #> 486           0    2  122 #> 487          31    3  122 #> 488          27    4  122 #> 489           0    1  123 #> 490           0    2  123 #> 491          37    3  123 #> 492           2    4  123 #> 493           0    1  124 #> 494           0    2  124 #> 495          31    3  124 #> 496          10    4  124 #> 497           0    1  125 #> 498           0    2  125 #> 499          37    3  125 #> 500           3    4  125 #> 501           0    1  126 #> 502           0    2  126 #> 503          43    3  126 #> 504          88    4  126 #> 505           0    1  127 #> 506           0    2  127 #> 507          43    3  127 #> 508         457    4  127 #> 509           0    1  128 #> 510           0    2  128 #> 511          44    3  128 #> 512          83    4  128 #> 513           0    1  129 #> 514           0    2  129 #> 515          13    3  129 #> 516         148    4  129 #> 517           0    1  130 #> 518           0    2  130 #> 519          35    3  130 #> 520         101    4  130 #> 521           0    1  131 #> 522           0    2  131 #> 523          50    3  131 #> 524         136    4  131 #> 525           0    1  132 #> 526           0    2  132 #> 527          54    3  132 #> 528         237    4  132 #> 529           0    1  133 #> 530           0    2  133 #> 531          30    3  133 #> 532          51    4  133 #> 533           0    1  134 #> 534           0    2  134 #> 535          30    3  134 #> 536          19    4  134 #> 537           0    1  135 #> 538           0    2  135 #> 539          38    3  135 #> 540          19    4  135 #> 541           0    1  136 #> 542           0    2  136 #> 543          27    3  136 #> 544          43    4  136 #> 545           0    1  137 #> 546           0    2  137 #> 547          34    3  137 #> 548         224    4  137 #> 549           0    1  138 #> 550           0    2  138 #> 551          35    3  138 #> 552          96    4  138 #> 553           0    1  139 #> 554           0    2  139 #> 555          42    3  139 #> 556           1    4  139 #> 557           0    1  140 #> 558           0    2  140 #> 559          41    3  140 #> 560           2    4  140 #> 561           0    1  141 #> 562           0    2  141 #> 563          21    3  141 #> 564         109    4  141 #> 565           0    1  142 #> 566           0    2  142 #> 567          22    3  142 #> 568         210    4  142 #> 569           0    1  143 #> 570           0    2  143 #> 571          50    3  143 #> 572         196    4  143 #> 573           0    1  144 #> 574           0    2  144 #> 575          64    3  144 #> 576         188    4  144 #> 577           0    1  145 #> 578           0    2  145 #> 579          29    3  145 #> 580          22    4  145 #> 581           0    1  146 #> 582           0    2  146 #> 583          26    3  146 #> 584          61    4  146 #> 585           0    1  147 #> 586           0    2  147 #> 587          66    3  147 #> 588          15    4  147 #> 589           0    1  148 #> 590           0    2  148 #> 591          26    3  148 #> 592          69    4  148 #> 593           0    1  149 #> 594           0    2  149 #> 595          62    3  149 #> 596          15    4  149 #> 597           0    1  150 #> 598           0    2  150 #> 599          23    3  150 #> 600           3    4  150 #> 601           0    1  151 #> 602           0    2  151 #> 603          48    3  151 #> 604           9    4  151 #> 605           0    1  152 #> 606           0    2  152 #> 607          31    3  152 #> 608           7    4  152 #> 609           0    1  153 #> 610           0    2  153 #> 611          54    3  153 #> 612         130    4  153 #> 613           0    1  154 #> 614           0    2  154 #> 615          22    3  154 #> 616          21    4  154 #> 617           0    1  155 #> 618           0    2  155 #> 619          41    3  155 #> 620          27    4  155 #> 621           0    1  156 #> 622           0    2  156 #> 623          29    3  156 #> 624          33    4  156 #> 625           0    1  157 #> 626           0    2  157 #> 627          27    3  157 #> 628          66    4  157 #> 629           0    1  158 #> 630           0    2  158 #> 631          35    3  158 #> 632          42    4  158 #> 633           0    1  159 #> 634           0    2  159 #> 635          32    3  159 #> 636         203    4  159 #> 637           0    1  160 #> 638           0    2  160 #> 639          39    3  160 #> 640         207    4  160 #> 641           0    1  161 #> 642           0    2  161 #> 643          51    3  161 #> 644           9    4  161 #> 645           0    1  162 #> 646           0    2  162 #> 647          28    3  162 #> 648          64    4  162 #> 649           0    1  163 #> 650           0    2  163 #> 651          28    3  163 #> 652         127    4  163 #> 653           0    1  164 #> 654           0    2  164 #> 655          32    3  164 #> 656         175    4  164 #> 657           0    1  165 #> 658           0    2  165 #> 659          33    3  165 #> 660           8    4  165 #> 661           0    1  166 #> 662           0    2  166 #> 663          41    3  166 #> 664          22    4  166 #> 665           0    1  167 #> 666           0    2  167 #> 667          66    3  167 #> 668         127    4  167 #> 669           0    1  168 #> 670           0    2  168 #> 671          84    3  168 #> 672           0    4  168 #> 673           0    1  169 #> 674           0    2  169 #> 675          37    3  169 #> 676         120    4  169 #> 677           0    1  170 #> 678           0    2  170 #> 679          31    3  170 #> 680          43    4  170 #> 681           0    1  171 #> 682           0    2  171 #> 683          50    3  171 #> 684         305    4  171 #> 685           0    1  172 #> 686           0    2  172 #> 687          29    3  172 #> 688         272    4  172 #> 689           0    1  173 #> 690           0    2  173 #> 691          58    3  173 #> 692          60    4  173 #> 693           0    1  174 #> 694           0    2  174 #> 695          33    3  174 #> 696          21    4  174 #> 697           0    1  175 #> 698           0    2  175 #> 699          34    3  175 #> 700         163    4  175 #> 701           0    1  176 #> 702           0    2  176 #> 703          28    3  176 #> 704         440    4  176 #> 705           0    1  177 #> 706           0    2  177 #> 707          14    3  177 #> 708         129    4  177 #> 709           0    1  178 #> 710           0    2  178 #> 711          37    3  178 #> 712          11    4  178 #> 713           0    1  179 #> 714           0    2  179 #> 715          19    3  179 #> 716           5    4  179 #> 717           0    1  180 #> 718           0    2  180 #> 719          37    3  180 #> 720          47    4  180 #> 721           0    1  181 #> 722           0    2  181 #> 723          47    3  181 #> 724          36    4  181 #> 725           0    1  182 #> 726           0    2  182 #> 727          19    3  182 #> 728          30    4  182 #> 729           0    1  183 #> 730           0    2  183 #> 731          32    3  183 #> 732          23    4  183 #> 733           0    1  184 #> 734           0    2  184 #> 735          75    3  184 #> 736           1    4  184 #> 737           0    1  185 #> 738           0    2  185 #> 739          26    3  185 #> 740           6    4  185 #> 741           0    1  186 #> 742           0    2  186 #> 743          34    3  186 #> 744           0    4  186 #> 745           0    1  187 #> 746           0    2  187 #> 747          21    3  187 #> 748          88    4  187 #> 749           0    1  188 #> 750           0    2  188 #> 751          27    3  188 #> 752          58    4  188 #> 753           0    1  189 #> 754           0    2  189 #> 755          41    3  189 #> 756          86    4  189 #> 757           0    1  190 #> 758           0    2  190 #> 759          42    3  190 #> 760          50    4  190 #> 761           0    1  191 #> 762           0    2  191 #> 763          38    3  191 #> 764          93    4  191 #> 765           0    1  192 #> 766           0    2  192 #> 767          52    3  192 #> 768          44    4  192 #> 769           0    1  193 #> 770           0    2  193 #> 771          34    3  193 #> 772          29    4  193 #> 773           0    1  194 #> 774           0    2  194 #> 775          34    3  194 #> 776          90    4  194 #> 777           0    1  195 #> 778           0    2  195 #> 779          36    3  195 #> 780          12    4  195 #> 781           0    1  196 #> 782           0    2  196 #> 783          55    3  196 #> 784         501    4  196 #> 785           0    1  197 #> 786           0    2  197 #> 787          36    3  197 #> 788          84    4  197 #> 789           0    1  198 #> 790           0    2  198 #> 791          43    3  198 #> 792         221    4  198 #> 793           0    1  199 #> 794           0    2  199 #> 795          36    3  199 #> 796          56    4  199 #> 797           0    1  200 #> 798           0    2  200 #> 799          39    3  200 #> 800         191    4  200 #> 801           0    1  201 #> 802           0    2  201 #> 803          33    3  201 #> 804          51    4  201 #> 805           0    1  202 #> 806           0    2  202 #> 807          50    3  202 #> 808          39    4  202 #> 809           0    1  203 #> 810           0    2  203 #> 811          34    3  203 #> 812           3    4  203 #> 813           0    1  204 #> 814           0    2  204 #> 815          38    3  204 #> 816          34    4  204 #> 817           0    1  205 #> 818           0    2  205 #> 819          14    3  205 #> 820          22    4  205 #> 821           0    1  206 #> 822           0    2  206 #> 823          34    3  206 #> 824          46    4  206 #> 825           0    1  207 #> 826           0    2  207 #> 827          51    3  207 #> 828          60    4  207 #> 829           0    1  208 #> 830           0    2  208 #> 831          48    3  208 #> 832           0    4  208 #> 833           0    1  209 #> 834           0    2  209 #> 835          32    3  209 #> 836          28    4  209 #> 837           0    1  210 #> 838           0    2  210 #> 839          39    3  210 #> 840           7    4  210 #> 841           0    1  211 #> 842           0    2  211 #> 843          30    3  211 #> 844          40    4  211 #> 845           0    1  212 #> 846           0    2  212 #> 847          43    3  212 #> 848          16    4  212 #> 849           0    1  213 #> 850           0    2  213 #> 851          36    3  213 #> 852          16    4  213 #> 853           0    1  214 #> 854           0    2  214 #> 855          61    3  214 #> 856          37    4  214 #> 857           0    1  215 #> 858           0    2  215 #> 859          31    3  215 #> 860          75    4  215 #> 861           0    1  216 #> 862           0    2  216 #> 863          38    3  216 #> 864          66    4  216 #> 865           0    1  217 #> 866           0    2  217 #> 867          23    3  217 #> 868          37    4  217 #> 869           0    1  218 #> 870           0    2  218 #> 871          37    3  218 #> 872         122    4  218 #> 873           0    1  219 #> 874           0    2  219 #> 875          81    3  219 #> 876           6    4  219 #> 877           0    1  220 #> 878           0    2  220 #> 879          46    3  220 #> 880           4    4  220 #> 881           0    1  221 #> 882           0    2  221 #> 883          36    3  221 #> 884         262    4  221 #> 885           0    1  222 #> 886           0    2  222 #> 887          37    3  222 #> 888         189    4  222 #> 889           0    1  223 #> 890           0    2  223 #> 891          47    3  223 #> 892          20    4  223 #> 893           0    1  224 #> 894           0    2  224 #> 895          41    3  224 #> 896          15    4  224 #> 897           0    1  225 #> 898           0    2  225 #> 899          43    3  225 #> 900         120    4  225 #> 901           0    1  226 #> 902           0    2  226 #> 903          22    3  226 #> 904          50    4  226 #> 905           0    1  227 #> 906           0    2  227 #> 907          22    3  227 #> 908           5    4  227 #> 909           0    1  228 #> 910           0    2  228 #> 911          22    3  228 #> 912           1    4  228 #> 913           0    1  229 #> 914           0    2  229 #> 915          20    3  229 #> 916         240    4  229 #> 917           0    1  230 #> 918           0    2  230 #> 919          46    3  230 #> 920          71    4  230 #> 921           0    1  231 #> 922           0    2  231 #> 923          39    3  231 #> 924           7    4  231 #> 925           0    1  232 #> 926           0    2  232 #> 927          50    3  232 #> 928          13    4  232 #> 929           0    1  233 #> 930           0    2  233 #> 931          45    3  233 #> 932          10    4  233 #> 933           0    1  234 #> 934           0    2  234 #> 935          24    3  234 #> 936          60    4  234 #> 937           0    1  235 #> 938           0    2  235 #> 939          47    3  235 #> 940          35    4  235 #> 941           0    1  236 #> 942           0    2  236 #> 943          51    3  236 #> 944         206    4  236 #> 945           0    1  237 #> 946           0    2  237 #> 947          30    3  237 #> 948           7    4  237 #> 949           0    1  238 #> 950           0    2  238 #> 951          17    3  238 #> 952          34    4  238 #> 953           0    1  239 #> 954           0    2  239 #> 955          43    3  239 #> 956          15    4  239 #> 957           0    1  240 #> 958           0    2  240 #> 959          49    3  240 #> 960         117    4  240 #> 961           0    1  241 #> 962           0    2  241 #> 963          48    3  241 #> 964           5    4  241 #> 965           0    1  242 #> 966           0    2  242 #> 967          47    3  242 #> 968         122    4  242 #> 969           0    1  243 #> 970           0    2  243 #> 971          47    3  243 #> 972          13    4  243 #> 973           0    1  244 #> 974           0    2  244 #> 975          40    3  244 #> 976         147    4  244 #> 977           0    1  245 #> 978           0    2  245 #> 979          46    3  245 #> 980         114    4  245 #> 981           0    1  246 #> 982           0    2  246 #> 983          41    3  246 #> 984          72    4  246 #> 985           0    1  247 #> 986           0    2  247 #> 987          41    3  247 #> 988          13    4  247 #> 989           0    1  248 #> 990           0    2  248 #> 991          37    3  248 #> 992           2    4  248 #> 993           0    1  249 #> 994           0    2  249 #> 995          27    3  249 #> 996         126    4  249 #> 997           0    1  250 #> 998           0    2  250 #> 999          38    3  250 #> 1000         76    4  250 #> 1001          0    1  251 #> 1002          0    2  251 #> 1003         78    3  251 #> 1004          9    4  251 #> 1005          0    1  252 #> 1006          0    2  252 #> 1007         30    3  252 #> 1008         28    4  252 #> 1009          0    1  253 #> 1010          0    2  253 #> 1011         48    3  253 #> 1012         26    4  253 #> 1013          0    1  254 #> 1014          0    2  254 #> 1015         53    3  254 #> 1016         78    4  254 #> 1017          0    1  255 #> 1018          0    2  255 #> 1019         50    3  255 #> 1020         50    4  255 #> 1021          0    1  256 #> 1022          0    2  256 #> 1023         53    3  256 #> 1024         63    4  256 #> 1025          0    1  257 #> 1026          0    2  257 #> 1027         39    3  257 #> 1028         59    4  257 #> 1029          0    1  258 #> 1030          0    2  258 #> 1031         39    3  258 #> 1032        148    4  258 #> 1033          0    1  259 #> 1034          0    2  259 #> 1035         33    3  259 #> 1036        401    4  259 #> 1037          0    1  260 #> 1038          0    2  260 #> 1039         41    3  260 #> 1040        154    4  260 #> 1041          0    1  261 #> 1042          0    2  261 #> 1043         45    3  261 #> 1044         43    4  261 #> 1045          0    1  262 #> 1046          0    2  262 #> 1047         68    3  262 #> 1048        140    4  262 #> 1049          0    1  263 #> 1050          0    2  263 #> 1051         28    3  263 #> 1052        236    4  263 #> 1053          0    1  264 #> 1054          0    2  264 #> 1055         63    3  264 #> 1056         18    4  264 #> 1057          0    1  265 #> 1058          0    2  265 #> 1059         42    3  265 #> 1060        420    4  265 #> 1061          0    1  266 #> 1062          0    2  266 #> 1063         42    3  266 #> 1064        176    4  266 #> 1065          0    1  267 #> 1066          0    2  267 #> 1067         44    3  267 #> 1068        102    4  267 #> 1069          0    1  268 #> 1070          0    2  268 #> 1071         47    3  268 #> 1072        270    4  268 #> 1073          0    1  269 #> 1074          0    2  269 #> 1075         33    3  269 #> 1076        129    4  269 #> 1077          0    1  270 #> 1078          0    2  270 #> 1079         25    3  270 #> 1080         23    4  270 #> 1081          0    1  271 #> 1082          0    2  271 #> 1083         35    3  271 #> 1084         82    4  271 #> 1085          0    1  272 #> 1086          0    2  272 #> 1087         51    3  272 #> 1088          1    4  272 #> 1089          0    1  273 #> 1090          0    2  273 #> 1091         37    3  273 #> 1092        311    4  273 #> 1093          0    1  274 #> 1094          0    2  274 #> 1095         47    3  274 #> 1096          3    4  274 #> 1097          0    1  275 #> 1098          0    2  275 #> 1099         29    3  275 #> 1100         42    4  275 #> 1101          0    1  276 #> 1102          0    2  276 #> 1103         30    3  276 #> 1104          0    4  276 #> 1105          0    1  277 #> 1106          0    2  277 #> 1107         58    3  277 #> 1108         81    4  277 #> 1109          0    1  278 #> 1110          0    2  278 #> 1111         59    3  278 #> 1112        186    4  278 #> 1113          0    1  279 #> 1114          0    2  279 #> 1115         33    3  279 #> 1116          4    4  279 #> 1117          0    1  280 #> 1118          0    2  280 #> 1119         35    3  280 #> 1120         36    4  280 #> 1121          0    1  281 #> 1122          0    2  281 #> 1123         35    3  281 #> 1124         62    4  281 #> 1125          0    1  282 #> 1126          0    2  282 #> 1127         52    3  282 #> 1128         90    4  282 #> 1129          0    1  283 #> 1130          0    2  283 #> 1131         31    3  283 #> 1132         44    4  283 #> 1133          0    1  284 #> 1134          0    2  284 #> 1135         64    3  284 #> 1136         72    4  284 #> 1137          0    1  285 #> 1138          0    2  285 #> 1139         32    3  285 #> 1140         66    4  285 #> 1141          0    1  286 #> 1142          0    2  286 #> 1143         40    3  286 #> 1144        106    4  286 #> 1145          0    1  287 #> 1146          0    2  287 #> 1147         58    3  287 #> 1148        259    4  287 #> 1149          0    1  288 #> 1150          0    2  288 #> 1151         43    3  288 #> 1152          9    4  288 #> 1153          0    1  289 #> 1154          0    2  289 #> 1155         20    3  289 #> 1156         11    4  289 #> 1157          0    1  290 #> 1158          0    2  290 #> 1159         25    3  290 #> 1160         27    4  290 #> 1161          0    1  291 #> 1162          0    2  291 #> 1163         51    3  291 #> 1164        104    4  291 #> 1165          0    1  292 #> 1166          0    2  292 #> 1167         40    3  292 #> 1168         87    4  292 #> 1169          0    1  293 #> 1170          0    2  293 #> 1171         51    3  293 #> 1172        162    4  293 #> 1173          0    1  294 #> 1174          0    2  294 #> 1175         43    3  294 #> 1176        257    4  294 #> 1177          0    1  295 #> 1178          0    2  295 #> 1179         42    3  295 #> 1180        117    4  295 #> 1181          0    1  296 #> 1182          0    2  296 #> 1183         40    3  296 #> 1184          8    4  296 #> 1185          0    1  297 #> 1186          0    2  297 #> 1187         59    3  297 #> 1188         29    4  297 #> 1189          0    1  298 #> 1190          0    2  298 #> 1191         54    3  298 #> 1192         60    4  298 #> 1193          0    1  299 #> 1194          0    2  299 #> 1195         51    3  299 #> 1196        178    4  299 #> 1197          0    1  300 #> 1198          0    2  300 #> 1199         45    3  300 #> 1200         57    4  300 #> 1201          0    1  301 #> 1202          0    2  301 #> 1203         28    3  301 #> 1204        119    4  301 #> 1205          0    1  302 #> 1206          0    2  302 #> 1207         62    3  302 #> 1208         22    4  302 #> 1209          0    1  303 #> 1210          0    2  303 #> 1211         30    3  303 #> 1212          5    4  303 #> 1213          0    1  304 #> 1214          0    2  304 #> 1215         23    3  304 #> 1216         26    4  304 #> 1217          0    1  305 #> 1218          0    2  305 #> 1219         19    3  305 #> 1220        168    4  305 #> 1221          0    1  306 #> 1222          0    2  306 #> 1223         26    3  306 #> 1224         68    4  306 #> 1225          0    1  307 #> 1226          0    2  307 #> 1227         33    3  307 #> 1228        143    4  307 #> 1229          0    1  308 #> 1230          0    2  308 #> 1231         32    3  308 #> 1232         19    4  308 #> 1233          0    1  309 #> 1234          0    2  309 #> 1235         52    3  309 #> 1236        295    4  309 #> 1237          0    1  310 #> 1238          0    2  310 #> 1239         17    3  310 #> 1240         58    4  310 #> 1241          0    1  311 #> 1242          0    2  311 #> 1243         38    3  311 #> 1244         18    4  311 #> 1245          0    1  312 #> 1246          0    2  312 #> 1247         46    3  312 #> 1248        224    4  312 #> 1249          0    1  313 #> 1250          0    2  313 #> 1251         53    3  313 #> 1252        105    4  313 #> 1253          0    1  314 #> 1254          0    2  314 #> 1255         25    3  314 #> 1256         99    4  314 #> 1257          0    1  315 #> 1258          0    2  315 #> 1259         37    3  315 #> 1260         60    4  315 #> 1261          0    1  316 #> 1262          0    2  316 #> 1263         38    3  316 #> 1264        474    4  316 #> 1265          0    1  317 #> 1266          0    2  317 #> 1267         30    3  317 #> 1268          1    4  317 #> 1269          0    1  318 #> 1270          0    2  318 #> 1271         24    3  318 #> 1272         56    4  318 #> 1273          0    1  319 #> 1274          0    2  319 #> 1275         37    3  319 #> 1276        168    4  319 #> 1277          0    1  320 #> 1278          0    2  320 #> 1279         43    3  320 #> 1280         22    4  320 #> 1281          0    1  321 #> 1282          0    2  321 #> 1283         44    3  321 #> 1284         12    4  321 #> 1285          0    1  322 #> 1286          0    2  322 #> 1287         14    3  322 #> 1288         12    4  322 #> 1289          0    1  323 #> 1290          0    2  323 #> 1291         36    3  323 #> 1292         64    4  323 #> 1293          0    1  324 #> 1294          0    2  324 #> 1295         60    3  324 #> 1296         18    4  324 #> 1297          0    1  325 #> 1298          0    2  325 #> 1299         40    3  325 #> 1300         72    4  325 #> 1301          0    1  326 #> 1302          0    2  326 #> 1303         35    3  326 #> 1304        139    4  326 #> 1305          0    1  327 #> 1306          0    2  327 #> 1307         25    3  327 #> 1308         92    4  327 #> 1309          0    1  328 #> 1310          0    2  328 #> 1311         46    3  328 #> 1312         54    4  328 #> 1313          0    1  329 #> 1314          0    2  329 #> 1315         41    3  329 #> 1316         60    4  329 #> 1317          0    1  330 #> 1318          0    2  330 #> 1319         36    3  330 #> 1320        219    4  330 #> 1321          0    1  331 #> 1322          0    2  331 #> 1323         28    3  331 #> 1324        156    4  331 #> 1325          0    1  332 #> 1326          0    2  332 #> 1327         58    3  332 #> 1328         51    4  332 #> 1329          0    1  333 #> 1330          0    2  333 #> 1331         37    3  333 #> 1332        139    4  333 #> 1333          0    1  334 #> 1334          0    2  334 #> 1335         51    3  334 #> 1336         50    4  334 #> 1337          0    1  335 #> 1338          0    2  335 #> 1339         27    3  335 #> 1340        136    4  335 #> 1341          0    1  336 #> 1342          0    2  336 #> 1343         48    3  336 #> 1344          3    4  336 #> 1345          0    1  337 #> 1346          0    2  337 #> 1347         36    3  337 #> 1348        404    4  337 #> 1349          0    1  338 #> 1350          0    2  338 #> 1351         50    3  338 #> 1352         22    4  338 #> 1353          0    1  339 #> 1354          0    2  339 #> 1355         26    3  339 #> 1356         36    4  339 #> 1357          0    1  340 #> 1358          0    2  340 #> 1359         43    3  340 #> 1360          5    4  340 #> 1361          0    1  341 #> 1362          0    2  341 #> 1363         44    3  341 #> 1364         39    4  341 #> 1365          0    1  342 #> 1366          0    2  342 #> 1367         37    3  342 #> 1368         23    4  342 #> 1369          0    1  343 #> 1370          0    2  343 #> 1371         42    3  343 #> 1372         47    4  343 #> 1373          0    1  344 #> 1374          0    2  344 #> 1375         22    3  344 #> 1376         11    4  344 #> 1377          0    1  345 #> 1378          0    2  345 #> 1379         28    3  345 #> 1380        158    4  345 #> 1381          0    1  346 #> 1382          0    2  346 #> 1383         33    3  346 #> 1384         56    4  346 #> 1385          0    1  347 #> 1386          0    2  347 #> 1387         46    3  347 #> 1388         60    4  347 #> 1389          0    1  348 #> 1390          0    2  348 #> 1391         30    3  348 #> 1392          9    4  348 #> 1393          0    1  349 #> 1394          0    2  349 #> 1395         44    3  349 #> 1396         16    4  349 #> 1397          0    1  350 #> 1398          0    2  350 #> 1399         47    3  350 #> 1400         35    4  350 #> 1401          0    1  351 #> 1402          0    2  351 #> 1403         39    3  351 #> 1404         79    4  351 #> 1405          0    1  352 #> 1406          0    2  352 #> 1407         24    3  352 #> 1408         20    4  352 #> 1409          0    1  353 #> 1410          0    2  353 #> 1411         28    3  353 #> 1412         80    4  353 #> 1413          0    1  354 #> 1414          0    2  354 #> 1415         49    3  354 #> 1416         39    4  354 #> 1417          0    1  355 #> 1418          0    2  355 #> 1419         44    3  355 #> 1420         44    4  355 #> 1421          0    1  356 #> 1422          0    2  356 #> 1423         29    3  356 #> 1424          5    4  356 #> 1425          0    1  357 #> 1426          0    2  357 #> 1427         23    3  357 #> 1428        153    4  357 #> 1429          0    1  358 #> 1430          0    2  358 #> 1431         39    3  358 #> 1432         60    4  358 #> 1433          0    1  359 #> 1434          0    2  359 #> 1435         25    3  359 #> 1436        145    4  359 #> 1437          0    1  360 #> 1438          0    2  360 #> 1439         37    3  360 #> 1440         31    4  360 #> 1441          0    1  361 #> 1442          0    2  361 #> 1443         40    3  361 #> 1444         84    4  361 #> 1445          0    1  362 #> 1446          0    2  362 #> 1447         36    3  362 #> 1448          0    4  362 #> 1449          0    1  363 #> 1450          0    2  363 #> 1451         37    3  363 #> 1452         10    4  363 #> 1453          0    1  364 #> 1454          0    2  364 #> 1455         37    3  364 #> 1456        105    4  364 #> 1457          0    1  365 #> 1458          0    2  365 #> 1459         34    3  365 #> 1460         13    4  365 #> 1461          0    1  366 #> 1462          0    2  366 #> 1463         45    3  366 #> 1464        100    4  366 #> 1465          0    1  367 #> 1466          0    2  367 #> 1467         30    3  367 #> 1468         15    4  367 #> 1469          0    1  368 #> 1470          0    2  368 #> 1471         33    3  368 #> 1472        143    4  368 #> 1473          0    1  369 #> 1474          0    2  369 #> 1475         42    3  369 #> 1476        117    4  369 #> 1477          0    1  370 #> 1478          0    2  370 #> 1479         34    3  370 #> 1480         70    4  370 #> 1481          0    1  371 #> 1482          0    2  371 #> 1483         30    3  371 #> 1484         48    4  371 #> 1485          0    1  372 #> 1486          0    2  372 #> 1487         30    3  372 #> 1488         23    4  372 #> 1489          0    1  373 #> 1490          0    2  373 #> 1491         38    3  373 #> 1492        273    4  373 #> 1493          0    1  374 #> 1494          0    2  374 #> 1495         55    3  374 #> 1496         98    4  374 #> 1497          0    1  375 #> 1498          0    2  375 #> 1499         15    3  375 #> 1500         80    4  375 #> 1501          0    1  376 #> 1502          0    2  376 #> 1503         48    3  376 #> 1504         11    4  376 #> 1505          0    1  377 #> 1506          0    2  377 #> 1507         50    3  377 #> 1508        110    4  377 #> 1509          0    1  378 #> 1510          0    2  378 #> 1511         29    3  378 #> 1512        190    4  378 #> 1513          0    1  379 #> 1514          0    2  379 #> 1515         16    3  379 #> 1516          0    4  379 #> 1517          0    1  380 #> 1518          0    2  380 #> 1519         35    3  380 #> 1520        113    4  380 #> 1521          0    1  381 #> 1522          0    2  381 #> 1523         64    3  381 #> 1524         56    4  381 #> 1525          0    1  382 #> 1526          0    2  382 #> 1527         55    3  382 #> 1528        187    4  382 #> 1529          0    1  383 #> 1530          0    2  383 #> 1531         59    3  383 #> 1532         49    4  383 #> 1533          0    1  384 #> 1534          0    2  384 #> 1535         47    3  384 #> 1536          3    4  384 #> 1537          0    1  385 #> 1538          0    2  385 #> 1539         46    3  385 #> 1540         31    4  385 #> 1541          0    1  386 #> 1542          0    2  386 #> 1543         28    3  386 #> 1544         31    4  386 #> 1545          0    1  387 #> 1546          0    2  387 #> 1547         62    3  387 #> 1548         58    4  387 #> 1549          0    1  388 #> 1550          0    2  388 #> 1551         34    3  388 #> 1552         10    4  388 #> 1553          0    1  389 #> 1554          0    2  389 #> 1555         31    3  389 #> 1556         24    4  389 #> 1557          0    1  390 #> 1558          0    2  390 #> 1559         60    3  390 #> 1560        202    4  390 #> 1561          0    1  391 #> 1562          0    2  391 #> 1563         28    3  391 #> 1564        142    4  391 #> 1565          0    1  392 #> 1566          0    2  392 #> 1567         19    3  392 #> 1568         28    4  392 #> 1569          0    1  393 #> 1570          0    2  393 #> 1571         40    3  393 #> 1572          3    4  393 #> 1573          0    1  394 #> 1574          0    2  394 #> 1575         41    3  394 #> 1576         50    4  394 #> 1577          0    1  395 #> 1578          0    2  395 #> 1579         38    3  395 #> 1580        251    4  395 #> 1581          0    1  396 #> 1582          0    2  396 #> 1583         59    3  396 #> 1584        103    4  396 #> 1585          0    1  397 #> 1586          0    2  397 #> 1587         61    3  397 #> 1588          0    4  397 #> 1589          0    1  398 #> 1590          0    2  398 #> 1591         63    3  398 #> 1592        136    4  398 #> 1593          0    1  399 #> 1594          0    2  399 #> 1595         27    3  399 #> 1596         89    4  399 #> 1597          0    1  400 #> 1598          0    2  400 #> 1599         37    3  400 #> 1600          0    4  400 #> 1601          0    1  401 #> 1602          0    2  401 #> 1603         75    3  401 #> 1604         61    4  401 #> 1605          0    1  402 #> 1606          0    2  402 #> 1607         31    3  402 #> 1608         23    4  402 #> 1609          0    1  403 #> 1610          0    2  403 #> 1611         34    3  403 #> 1612          1    4  403 #> 1613          0    1  404 #> 1614          0    2  404 #> 1615         40    3  404 #> 1616         74    4  404 #> 1617          0    1  405 #> 1618          0    2  405 #> 1619         45    3  405 #> 1620          8    4  405 #> 1621          0    1  406 #> 1622          0    2  406 #> 1623         27    3  406 #> 1624        141    4  406 #> 1625          0    1  407 #> 1626          0    2  407 #> 1627         28    3  407 #> 1628         37    4  407 #> 1629          0    1  408 #> 1630          0    2  408 #> 1631         28    3  408 #> 1632         72    4  408 #> 1633          0    1  409 #> 1634          0    2  409 #> 1635         32    3  409 #> 1636          0    4  409 #> 1637          0    1  410 #> 1638          0    2  410 #> 1639         40    3  410 #> 1640        145    4  410 #> 1641          0    1  411 #> 1642          0    2  411 #> 1643         57    3  411 #> 1644         50    4  411 #> 1645          0    1  412 #> 1646          0    2  412 #> 1647         59    3  412 #> 1648          7    4  412 #> 1649          0    1  413 #> 1650          0    2  413 #> 1651         46    3  413 #> 1652         48    4  413 #> 1653          0    1  414 #> 1654          0    2  414 #> 1655         31    3  414 #> 1656         16    4  414 #> 1657          0    1  415 #> 1658          0    2  415 #> 1659         37    3  415 #> 1660        119    4  415 #> 1661          0    1  416 #> 1662          0    2  416 #> 1663         24    3  416 #> 1664         53    4  416 #> 1665          0    1  417 #> 1666          0    2  417 #> 1667         21    3  417 #> 1668         16    4  417 #> 1669          0    1  418 #> 1670          0    2  418 #> 1671         38    3  418 #> 1672         24    4  418 #> 1673          0    1  419 #> 1674          0    2  419 #> 1675         47    3  419 #> 1676         74    4  419 #> 1677          0    1  420 #> 1678          0    2  420 #> 1679         54    3  420 #> 1680         66    4  420 #> 1681          0    1  421 #> 1682          0    2  421 #> 1683         45    3  421 #> 1684         17    4  421 #> 1685          0    1  422 #> 1686          0    2  422 #> 1687         34    3  422 #> 1688         98    4  422 #> 1689          0    1  423 #> 1690          0    2  423 #> 1691         27    3  423 #> 1692         59    4  423 #> 1693          0    1  424 #> 1694          0    2  424 #> 1695         38    3  424 #> 1696         16    4  424 #> 1697          0    1  425 #> 1698          0    2  425 #> 1699         39    3  425 #> 1700         40    4  425 #> 1701          0    1  426 #> 1702          0    2  426 #> 1703         34    3  426 #> 1704         29    4  426 #> 1705          0    1  427 #> 1706          0    2  427 #> 1707         49    3  427 #> 1708        106    4  427 #> 1709          0    1  428 #> 1710          0    2  428 #> 1711         25    3  428 #> 1712         28    4  428 #> 1713          0    1  429 #> 1714          0    2  429 #> 1715         36    3  429 #> 1716         19    4  429 #> 1717          0    1  430 #> 1718          0    2  430 #> 1719         23    3  430 #> 1720          7    4  430 #> 1721          0    1  431 #> 1722          0    2  431 #> 1723         34    3  431 #> 1724         91    4  431 #> 1725          0    1  432 #> 1726          0    2  432 #> 1727         44    3  432 #> 1728        143    4  432 #> 1729          0    1  433 #> 1730          0    2  433 #> 1731         48    3  433 #> 1732         23    4  433 #> 1733          0    1  434 #> 1734          0    2  434 #> 1735         44    3  434 #> 1736          3    4  434 #> 1737          0    1  435 #> 1738          0    2  435 #> 1739         37    3  435 #> 1740         20    4  435 #> 1741          0    1  436 #> 1742          0    2  436 #> 1743         41    3  436 #> 1744         34    4  436 #> 1745          0    1  437 #> 1746          0    2  437 #> 1747         51    3  437 #> 1748          1    4  437 #> 1749          0    1  438 #> 1750          0    2  438 #> 1751         43    3  438 #> 1752        245    4  438 #> 1753          0    1  439 #> 1754          0    2  439 #> 1755         22    3  439 #> 1756          3    4  439 #> 1757          0    1  440 #> 1758          0    2  440 #> 1759         40    3  440 #> 1760         40    4  440 #> 1761          0    1  441 #> 1762          0    2  441 #> 1763         52    3  441 #> 1764         64    4  441 #> 1765          0    1  442 #> 1766          0    2  442 #> 1767         40    3  442 #> 1768        133    4  442 #> 1769          0    1  443 #> 1770          0    2  443 #> 1771         38    3  443 #> 1772        116    4  443 #> 1773          0    1  444 #> 1774          0    2  444 #> 1775         32    3  444 #> 1776        189    4  444 #> 1777          0    1  445 #> 1778          0    2  445 #> 1779         19    3  445 #> 1780         34    4  445 #> 1781          0    1  446 #> 1782          0    2  446 #> 1783         61    3  446 #> 1784         39    4  446 #> 1785          0    1  447 #> 1786          0    2  447 #> 1787         24    3  447 #> 1788         39    4  447 #> 1789          0    1  448 #> 1790          0    2  448 #> 1791         16    3  448 #> 1792         22    4  448 #> 1793          0    1  449 #> 1794          0    2  449 #> 1795         31    3  449 #> 1796          5    4  449 #> 1797          0    1  450 #> 1798          0    2  450 #> 1799         56    3  450 #> 1800         97    4  450 #> 1801          0    1  451 #> 1802          0    2  451 #> 1803         24    3  451 #> 1804         16    4  451 #> 1805          0    1  452 #> 1806          0    2  452 #> 1807         29    3  452 #> 1808         13    4  452 #> 1809          0    1  453 #> 1810          0    2  453 #> 1811         38    3  453 #> 1812         34    4  453 #> 1813          0    1  454 #> 1814          0    2  454 #> 1815         59    3  454 #> 1816         53    4  454 #> 1817          0    1  455 #> 1818          0    2  455 #> 1819         30    3  455 #> 1820         14    4  455 #> 1821          0    1  456 #> 1822          0    2  456 #> 1823         46    3  456 #> 1824          9    4  456 #> 1825          0    1  457 #> 1826          0    2  457 #> 1827         37    3  457 #> 1828         45    4  457 #> 1829          0    1  458 #> 1830          0    2  458 #> 1831         36    3  458 #> 1832        252    4  458 #> 1833          0    1  459 #> 1834          0    2  459 #> 1835         41    3  459 #> 1836         42    4  459 #> 1837          0    1  460 #> 1838          0    2  460 #> 1839         35    3  460 #> 1840         47    4  460 #> 1841          0    1  461 #> 1842          0    2  461 #> 1843         53    3  461 #> 1844         98    4  461 #> 1845          0    1  462 #> 1846          0    2  462 #> 1847         32    3  462 #> 1848          6    4  462 #> 1849          0    1  463 #> 1850          0    2  463 #> 1851         24    3  463 #> 1852        154    4  463 #> 1853          0    1  464 #> 1854          0    2  464 #> 1855         40    3  464 #> 1856        137    4  464 #> 1857          0    1  465 #> 1858          0    2  465 #> 1859         35    3  465 #> 1860         16    4  465 #> 1861          0    1  466 #> 1862          0    2  466 #> 1863         45    3  466 #> 1864         23    4  466 #> 1865          0    1  467 #> 1866          0    2  467 #> 1867         50    3  467 #> 1868         56    4  467 #> 1869          0    1  468 #> 1870          0    2  468 #> 1871         20    3  468 #> 1872        151    4  468 #> 1873          0    1  469 #> 1874          0    2  469 #> 1875         32    3  469 #> 1876         42    4  469 #> 1877          0    1  470 #> 1878          0    2  470 #> 1879         19    3  470 #> 1880         71    4  470 #> 1881          0    1  471 #> 1882          0    2  471 #> 1883         41    3  471 #> 1884         23    4  471 #> 1885          0    1  472 #> 1886          0    2  472 #> 1887         38    3  472 #> 1888          3    4  472 #> 1889          0    1  473 #> 1890          0    2  473 #> 1891         41    3  473 #> 1892         33    4  473 #> 1893          0    1  474 #> 1894          0    2  474 #> 1895         32    3  474 #> 1896        360    4  474 #> 1897          0    1  475 #> 1898          0    2  475 #> 1899         34    3  475 #> 1900         65    4  475 #> 1901          0    1  476 #> 1902          0    2  476 #> 1903         42    3  476 #> 1904          2    4  476 #> 1905          0    1  477 #> 1906          0    2  477 #> 1907         51    3  477 #> 1908        169    4  477 #> 1909          0    1  478 #> 1910          0    2  478 #> 1911         36    3  478 #> 1912         67    4  478 #> 1913          0    1  479 #> 1914          0    2  479 #> 1915         50    3  479 #> 1916         14    4  479 #> 1917          0    1  480 #> 1918          0    2  480 #> 1919         57    3  480 #> 1920         11    4  480 #> 1921          0    1  481 #> 1922          0    2  481 #> 1923         25    3  481 #> 1924         19    4  481 #> 1925          0    1  482 #> 1926          0    2  482 #> 1927         33    3  482 #> 1928         90    4  482 #> 1929          0    1  483 #> 1930          0    2  483 #> 1931         41    3  483 #> 1932         62    4  483 #> 1933          0    1  484 #> 1934          0    2  484 #> 1935         48    3  484 #> 1936         63    4  484 #> 1937          0    1  485 #> 1938          0    2  485 #> 1939         12    3  485 #> 1940         43    4  485 #> 1941          0    1  486 #> 1942          0    2  486 #> 1943         39    3  486 #> 1944        159    4  486 #> 1945          0    1  487 #> 1946          0    2  487 #> 1947         31    3  487 #> 1948         11    4  487 #> 1949          0    1  488 #> 1950          0    2  488 #> 1951         30    3  488 #> 1952         40    4  488 #> 1953          0    1  489 #> 1954          0    2  489 #> 1955         39    3  489 #> 1956        150    4  489 #> 1957          0    1  490 #> 1958          0    2  490 #> 1959         25    3  490 #> 1960        227    4  490 #> 1961          0    1  491 #> 1962          0    2  491 #> 1963         32    3  491 #> 1964          4    4  491 #> 1965          0    1  492 #> 1966          0    2  492 #> 1967         47    3  492 #> 1968        394    4  492 #> 1969          0    1  493 #> 1970          0    2  493 #> 1971         51    3  493 #> 1972        141    4  493 #> 1973          0    1  494 #> 1974          0    2  494 #> 1975         26    3  494 #> 1976        160    4  494 #> 1977          0    1  495 #> 1978          0    2  495 #> 1979         30    3  495 #> 1980          4    4  495 #> 1981          0    1  496 #> 1982          0    2  496 #> 1983         39    3  496 #> 1984         43    4  496 #> 1985          0    1  497 #> 1986          0    2  497 #> 1987         27    3  497 #> 1988         10    4  497 #> 1989          0    1  498 #> 1990          0    2  498 #> 1991         26    3  498 #> 1992         59    4  498 #> 1993          0    1  499 #> 1994          0    2  499 #> 1995         29    3  499 #> 1996        162    4  499 #> 1997          0    1  500 #> 1998          0    2  500 #> 1999         28    3  500 #> 2000         32    4  500"},{"path":"https://baselinenowcast.epinowcast.org/reference/replace_lower_right_with_NA.html","id":null,"dir":"Reference","previous_headings":"","what":"Replace the lower right triangle of the matrix with NAs — replace_lower_right_with_NA","title":"Replace the lower right triangle of the matrix with NAs — replace_lower_right_with_NA","text":"Replace lower right triangle matrix NAs","code":""},{"path":"https://baselinenowcast.epinowcast.org/reference/replace_lower_right_with_NA.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Replace the lower right triangle of the matrix with NAs — replace_lower_right_with_NA","text":"","code":"replace_lower_right_with_NA(matrix, structure = 1)"},{"path":"https://baselinenowcast.epinowcast.org/reference/replace_lower_right_with_NA.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Replace the lower right triangle of the matrix with NAs — replace_lower_right_with_NA","text":"matrix Matrix structure Integer vector specifying reporting structure. integer, divides columns evenly integer (last possibly truncated).  vector, must sum number columns. Default 1 (standard triangular structure).","code":""},{"path":"https://baselinenowcast.epinowcast.org/reference/replace_lower_right_with_NA.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Replace the lower right triangle of the matrix with NAs — replace_lower_right_with_NA","text":"matrix dimensions, NAs unreported entries.","code":""},{"path":"https://baselinenowcast.epinowcast.org/reference/replace_lower_right_with_NA.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Replace the lower right triangle of the matrix with NAs — replace_lower_right_with_NA","text":"","code":"# Define a reporting triangle with zeros triangle_w_zeros <- matrix(   c(     1, 3, 5, 7, 9,     4, 7, 8, 0, 12,     9, 10, 0, 0, 15,     3, 0, 0, 0, 0,     6, 2, 0, 0, 0   ),   nrow = 5,   byrow = TRUE )  # Standard triangular structure (default) rep_tri <- replace_lower_right_with_NA(triangle_w_zeros) rep_tri #>      [,1] [,2] [,3] [,4] [,5] #> [1,]    1    3    5    7    9 #> [2,]    4    7    8    0   NA #> [3,]    9   10    0   NA   NA #> [4,]    3    0   NA   NA   NA #> [5,]    6   NA   NA   NA   NA  # Ragged structure with 2 columns per delay period rep_ragged <- replace_lower_right_with_NA(triangle_w_zeros, 2) rep_ragged #>      [,1] [,2] [,3] [,4] [,5] #> [1,]    1    3    5    7    9 #> [2,]    4    7    8    0   12 #> [3,]    9   10    0    0   15 #> [4,]    3    0    0    0   NA #> [5,]    6    2   NA   NA   NA  # Custom structure with explicit column counts rep_custom <- replace_lower_right_with_NA(triangle_w_zeros, c(1, 2, 1)) rep_custom #>      [,1] [,2] [,3] [,4] [,5] #> [1,]    1    3    5    7    9 #> [2,]    4    7    8    0   12 #> [3,]    9   10    0    0   NA #> [4,]    3    0    0   NA   NA #> [5,]    6   NA   NA   NA   NA"},{"path":"https://baselinenowcast.epinowcast.org/reference/truncate_triangle.html","id":null,"dir":"Reference","previous_headings":"","what":"Get a single truncated triangle — truncate_triangle","title":"Get a single truncated triangle — truncate_triangle","text":"function takes integer t reporting triangle generates truncated reporting triangle, remove last t observations.","code":""},{"path":"https://baselinenowcast.epinowcast.org/reference/truncate_triangle.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get a single truncated triangle — truncate_triangle","text":"","code":"truncate_triangle(t, matr_observed)"},{"path":"https://baselinenowcast.epinowcast.org/reference/truncate_triangle.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get a single truncated triangle — truncate_triangle","text":"t Integer indicating number timepoints truncate bottom original reporting triangle. matr_observed Matrix reporting triangle/matrix used generate retrospective nowcast matrices, rows representing time points reference columns representing delays.","code":""},{"path":"https://baselinenowcast.epinowcast.org/reference/truncate_triangle.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get a single truncated triangle — truncate_triangle","text":"Matrix t fewer rows matr_observed.","code":""},{"path":"https://baselinenowcast.epinowcast.org/reference/truncate_triangle.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get a single truncated triangle — truncate_triangle","text":"","code":"# example code triangle <- matrix(   c(     65, 46, 21, 7,     70, 40, 20, 5,     80, 50, 10, 10,     100, 40, 31, 20,     95, 45, 21, NA,     82, 42, NA, NA,     70, NA, NA, NA   ),   nrow = 7,   byrow = TRUE )  trunc_rep_tri <- truncate_triangle(t = 1, matr_observed = triangle) trunc_rep_tri #>      [,1] [,2] [,3] [,4] #> [1,]   65   46   21    7 #> [2,]   70   40   20    5 #> [3,]   80   50   10   10 #> [4,]  100   40   31   20 #> [5,]   95   45   21   NA #> [6,]   82   42   NA   NA"},{"path":"https://baselinenowcast.epinowcast.org/reference/truncate_triangles.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate truncated reporting triangles — truncate_triangles","title":"Generate truncated reporting triangles — truncate_triangles","text":"function ingests reporting triangle/matrix number truncated reporting triangles want create, n, iteratively truncated reporting triangle, working bottom top n snapshots.","code":""},{"path":"https://baselinenowcast.epinowcast.org/reference/truncate_triangles.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate truncated reporting triangles — truncate_triangles","text":"","code":"truncate_triangles(   reporting_triangle,   n = nrow(reporting_triangle) - ncol(reporting_triangle) - 1 )"},{"path":"https://baselinenowcast.epinowcast.org/reference/truncate_triangles.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate truncated reporting triangles — truncate_triangles","text":"reporting_triangle Matrix reporting triangle/rectangle used generate retrospective triangles, rows representing time points reference columns representing delays. n Integer indicating number retrospective truncated triangles generated, always starting recent reference time. Default generate truncated matrices sufficient number rows generate nowcast , though number can specified.","code":""},{"path":"https://baselinenowcast.epinowcast.org/reference/truncate_triangles.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate truncated reporting triangles — truncate_triangles","text":"trunc_rep_mat_list List n truncated reporting triangle matrices many rows available given truncation, number columns triangle.","code":""},{"path":"https://baselinenowcast.epinowcast.org/reference/truncate_triangles.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate truncated reporting triangles — truncate_triangles","text":"","code":"triangle <- matrix(   c(     65, 46, 21, 7,     70, 40, 20, 5,     80, 50, 10, 10,     100, 40, 31, 20,     95, 45, 21, NA,     82, 42, NA, NA,     70, NA, NA, NA   ),   nrow = 7,   byrow = TRUE )  truncated_rts <- truncate_triangles(triangle, n = 2) truncated_rts[1:2] #> [[1]] #>      [,1] [,2] [,3] [,4] #> [1,]   65   46   21    7 #> [2,]   70   40   20    5 #> [3,]   80   50   10   10 #> [4,]  100   40   31   20 #> [5,]   95   45   21   NA #> [6,]   82   42   NA   NA #>  #> [[2]] #>      [,1] [,2] [,3] [,4] #> [1,]   65   46   21    7 #> [2,]   70   40   20    5 #> [3,]   80   50   10   10 #> [4,]  100   40   31   20 #> [5,]   95   45   21   NA #>"},{"path":"https://baselinenowcast.epinowcast.org/news/index.html","id":"baselinenowcast-0001000","dir":"Changelog","previous_headings":"","what":"baselinenowcast 0.0.0.1000","title":"baselinenowcast 0.0.0.1000","text":"Removes requirement elements reporting triangle integers. Modify method used estimate dispersion. Instead estimating dispersion individual elements nowcast matrix, now estimate dispersion predicted nowcasts summed across reporting dates function forecast horizon. Standardises naming objects matrices vs vectors objects contain observations, point estimates, probabilistic draws. Modifies functions estimate delay generate point nowcast ensure throw error/warning first element delay PMF 0. Adjusts function estimate delay distribution able handle complete partially complete reporting triangles. Add function convert list expected observed reporting squares long tidy dataframe indexed reference time, delay, sample index. Implement zero-handling bottom left reporting triangle applying delay generate point nowcast. Add function generate list expected observed reporting squares. Add function generate expected observed reporting square point nowcast vector dispersion parameters. Add function estimate dispersion parameters match list nowcasts observed reporting triangles. Add functions generate retrospective nowcasts single reporting triangle. Refactor uncertainty estimation use user-facing function generate retrospective reporting triangles. Methods write-separate vignette. Introduced function estimate uncertainty triangle nowcasted delay distribution. Introduced functions get delay estimate apply delay, used Getting Started vignette. Added package skeleton.","code":""}]
